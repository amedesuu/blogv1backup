<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="https://yousa.love/atom.xml" rel="self"/>
  
  <link href="https://yousa.love/"/>
  <updated>2023-06-04T07:01:59.275Z</updated>
  <id>https://yousa.love/</id>
  
  <author>
    <name>Rock Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GPU参数</title>
    <link href="https://yousa.love/2023/06/04/GPU%E5%8F%82%E6%95%B0/"/>
    <id>https://yousa.love/2023/06/04/GPU%E5%8F%82%E6%95%B0/</id>
    <published>2023-06-04T06:37:48.000Z</published>
    <updated>2023-06-04T07:01:59.275Z</updated>
    
    <content type="html"><![CDATA[<p><strong>持续更新中</strong></p><span id="more"></span><h1 id="NVIDIA"><a href="#NVIDIA" class="headerlink" title="NVIDIA"></a>NVIDIA</h1><h2 id="消费级"><a href="#消费级" class="headerlink" title="消费级"></a>消费级</h2><h3 id="RTX30系"><a href="#RTX30系" class="headerlink" title="RTX30系"></a>RTX30系</h3><h4 id="RTX-3090Ti"><a href="#RTX-3090Ti" class="headerlink" title="RTX 3090Ti"></a>RTX 3090Ti</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>1560 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1695 MHz</td></tr><tr><td align="left">流处理单元</td><td>10752 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">GPU代号</td><td>GA102</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>450W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>21.2 Gbps</td></tr><tr><td align="left">内存类型</td><td>GDDR6X</td></tr><tr><td align="left">内存位宽</td><td>384 bit</td></tr><tr><td align="left">最大显存</td><td>24 GB</td></tr></tbody></table><table><thead><tr><th align="left">参数补充</th><th></th></tr></thead><tbody><tr><td align="left">晶片编号</td><td>GA102-350-A1</td></tr><tr><td align="left">代工厂</td><td>Samsung</td></tr><tr><td align="left">核心面积</td><td>628 mm²</td></tr><tr><td align="left">一级缓存</td><td>128 KB</td></tr><tr><td align="left">二级缓存</td><td>6 MB</td></tr><tr><td align="left">光栅单元</td><td>336</td></tr><tr><td align="left">纹理单元</td><td>112</td></tr><tr><td align="left">RT cores</td><td>84</td></tr><tr><td align="left">SM count</td><td>84</td></tr><tr><td align="left">Tensor cores</td><td>336</td></tr><tr><td align="left">建议电源</td><td>850 W</td></tr><tr><td align="left">公版供电</td><td>1x 12-pin</td></tr><tr><td align="left">公版接口</td><td>1x HDMI3x DisplayPort</td></tr><tr><td align="left">总线接口</td><td>PCIe 4.0 x16</td></tr><tr><td align="left">以太坊算力</td><td>131 MH/s</td></tr><tr><td align="left">以太坊挖矿功耗</td><td>400 W/h</td></tr></tbody></table><table><thead><tr><th align="left">理论性能</th><th></th></tr></thead><tbody><tr><td align="left">像素填充率</td><td>189.8 GPixel/s</td></tr><tr><td align="left">纹理填充率</td><td>569.5 GTexel/s</td></tr><tr><td align="left">显存带宽</td><td>1,018 GB/s</td></tr><tr><td align="left">FP16</td><td>36.45 TFLOPS (1:1)</td></tr><tr><td align="left">FP32</td><td>36.45 TFLOPS</td></tr><tr><td align="left">FP64</td><td>569.5 GFLOPS (1:64)</td></tr></tbody></table><table><thead><tr><th align="left">显卡特性</th><th></th></tr></thead><tbody><tr><td align="left">DirectX</td><td>12 Ultimate (12_2)</td></tr><tr><td align="left">OpenGL</td><td>4.6</td></tr><tr><td align="left">OpenCL</td><td>3.0</td></tr><tr><td align="left">Vulkan</td><td>1.2</td></tr><tr><td align="left">CUDA</td><td>8.6</td></tr><tr><td align="left">Shader model</td><td>6.6</td></tr></tbody></table><hr><h4 id="RTX-3090"><a href="#RTX-3090" class="headerlink" title="RTX 3090"></a>RTX 3090</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>1395 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1695 MHz</td></tr><tr><td align="left">流处理单元</td><td>10496 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">GPU代号</td><td>GA102</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>350W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>19.5 Gbps</td></tr><tr><td align="left">内存类型</td><td>GDDR6X</td></tr><tr><td align="left">内存位宽</td><td>384 bit</td></tr><tr><td align="left">最大显存</td><td>24 GB</td></tr></tbody></table><table><thead><tr><th align="left">参数补充</th><th></th></tr></thead><tbody><tr><td align="left">晶片编号</td><td>GA102-300-A1</td></tr><tr><td align="left">晶体管数量</td><td>283亿</td></tr><tr><td align="left">代工厂</td><td>Samsung</td></tr><tr><td align="left">核心面积</td><td>628 mm²</td></tr><tr><td align="left">一级缓存</td><td>128 KB</td></tr><tr><td align="left">二级缓存</td><td>6 MB</td></tr><tr><td align="left">光栅单元</td><td>328</td></tr><tr><td align="left">纹理单元</td><td>112</td></tr><tr><td align="left">RT cores</td><td>82</td></tr><tr><td align="left">SM count</td><td>82</td></tr><tr><td align="left">Tensor cores</td><td>328</td></tr><tr><td align="left">建议电源</td><td>750 W</td></tr><tr><td align="left">公版供电</td><td>1x 12-pin</td></tr><tr><td align="left">公版接口</td><td>1x HDMI3x DisplayPort</td></tr><tr><td align="left">总线接口</td><td>PCIe 4.0 x16</td></tr><tr><td align="left">以太坊算力</td><td>121 MH/s</td></tr><tr><td align="left">以太坊挖矿功耗</td><td>370 W/h</td></tr></tbody></table><table><thead><tr><th align="left">理论性能</th><th></th></tr></thead><tbody><tr><td align="left">像素填充率</td><td>189.8 GPixel/s</td></tr><tr><td align="left">纹理填充率</td><td>556.0 GTexel/s</td></tr><tr><td align="left">显存带宽</td><td>936.2 GB/s</td></tr><tr><td align="left">FP16</td><td>35.58 TFLOPS (1:1)</td></tr><tr><td align="left">FP32</td><td>35.58 TFLOPS</td></tr><tr><td align="left">FP64</td><td>556.0 GFLOPS (1:64)</td></tr></tbody></table><table><thead><tr><th align="left">显卡特性</th><th></th></tr></thead><tbody><tr><td align="left">DirectX</td><td>12 Ultimate (12_2)</td></tr><tr><td align="left">OpenGL</td><td>4.6</td></tr><tr><td align="left">OpenCL</td><td>3.0</td></tr><tr><td align="left">Vulkan</td><td>1.2</td></tr><tr><td align="left">CUDA</td><td>8.6</td></tr><tr><td align="left">Shader model</td><td>6.6</td></tr></tbody></table><hr><h4 id="RTX-3080-Ti"><a href="#RTX-3080-Ti" class="headerlink" title="RTX 3080 Ti"></a>RTX 3080 Ti</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>1365 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1665 MHz</td></tr><tr><td align="left">流处理单元</td><td>10240 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">GPU代号</td><td>GA102</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>350W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>19 Gbps</td></tr><tr><td align="left">内存类型</td><td>GDDR6X</td></tr><tr><td align="left">内存位宽</td><td>384 bit</td></tr><tr><td align="left">最大显存</td><td>16 GB</td></tr></tbody></table><table><thead><tr><th align="left">参数补充</th><th></th></tr></thead><tbody><tr><td align="left">晶片编号</td><td>GA102-225-A1</td></tr><tr><td align="left">晶体管数量</td><td>280亿</td></tr><tr><td align="left">代工厂</td><td>Samsung</td></tr><tr><td align="left">核心面积</td><td>628 mm²</td></tr><tr><td align="left">一级缓存</td><td>128 KB</td></tr><tr><td align="left">二级缓存</td><td>6 MB</td></tr><tr><td align="left">光栅单元</td><td>320</td></tr><tr><td align="left">纹理单元</td><td>112</td></tr><tr><td align="left">RT cores</td><td>80</td></tr><tr><td align="left">SM count</td><td>80</td></tr><tr><td align="left">Tensor cores</td><td>320</td></tr><tr><td align="left">建议电源</td><td>750 W</td></tr><tr><td align="left">公版供电</td><td>1x 12-pin</td></tr><tr><td align="left">公版接口</td><td>1x HDMI3x DisplayPort</td></tr><tr><td align="left">总线接口</td><td>PCIe 4.0 x16</td></tr><tr><td align="left">以太坊算力</td><td>117 MH/s</td></tr><tr><td align="left">以太坊挖矿功耗</td><td>310 W/h</td></tr></tbody></table><table><thead><tr><th align="left">理论性能</th><th></th></tr></thead><tbody><tr><td align="left">像素填充率</td><td>186.5 GPixel/s</td></tr><tr><td align="left">纹理填充率</td><td>532.8 GTexel/s</td></tr><tr><td align="left">显存带宽</td><td>912.4 GB/s</td></tr><tr><td align="left">FP16</td><td>34.10 TFLOPS (1:1)</td></tr><tr><td align="left">FP32</td><td>34.10 TFLOPS</td></tr><tr><td align="left">FP64</td><td>532.8 GFLOPS (1:64)</td></tr></tbody></table><table><thead><tr><th align="left">显卡特性</th><th></th></tr></thead><tbody><tr><td align="left">DirectX</td><td>12 Ultimate (12_2)</td></tr><tr><td align="left">OpenGL</td><td>4.6</td></tr><tr><td align="left">OpenCL</td><td>3.0</td></tr><tr><td align="left">Vulkan</td><td>1.2</td></tr><tr><td align="left">CUDA</td><td>8.6</td></tr><tr><td align="left">Shader model</td><td>6.6</td></tr></tbody></table><hr><h4 id="RTX-3080Ti-Laptop"><a href="#RTX-3080Ti-Laptop" class="headerlink" title="RTX 3080Ti Laptop"></a>RTX 3080Ti Laptop</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>975 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1590 MHz</td></tr><tr><td align="left">流处理单元</td><td>7424 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">GPU代号</td><td>GN20-E8</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>150W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>14 GHz</td></tr><tr><td align="left">内存类型</td><td>GDDR6</td></tr><tr><td align="left">内存位宽</td><td>256 Bit</td></tr><tr><td align="left">最大显存</td><td>16 GB</td></tr></tbody></table><p>参数补充</p><p>理论性能</p><p>显卡特性</p><hr><h4 id="RTX-3080"><a href="#RTX-3080" class="headerlink" title="RTX 3080"></a>RTX 3080</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>1440 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1710 MHz</td></tr><tr><td align="left">流处理单元</td><td>8704 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">GPU代号</td><td>GA102</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>320W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>19 Gbps</td></tr><tr><td align="left">内存类型</td><td>GDDR6X</td></tr><tr><td align="left">内存位宽</td><td>320 bit</td></tr><tr><td align="left">最大显存</td><td>10 GB</td></tr></tbody></table><table><thead><tr><th align="left">参数补充</th><th></th></tr></thead><tbody><tr><td align="left">晶片编号</td><td>GA102-200-KD-A1</td></tr><tr><td align="left">晶体管数量</td><td>283亿</td></tr><tr><td align="left">代工厂</td><td>Samsung</td></tr><tr><td align="left">核心面积</td><td>628 mm²</td></tr><tr><td align="left">一级缓存</td><td>128 KB</td></tr><tr><td align="left">二级缓存</td><td>5 MB</td></tr><tr><td align="left">光栅单元</td><td>272</td></tr><tr><td align="left">纹理单元</td><td>96</td></tr><tr><td align="left">RT cores</td><td>68</td></tr><tr><td align="left">SM count</td><td>68</td></tr><tr><td align="left">Tensor cores</td><td>272</td></tr><tr><td align="left">建议电源</td><td>700 W</td></tr><tr><td align="left">公版供电</td><td>1x 12-pin</td></tr><tr><td align="left">公版接口</td><td>1x HDMI3x DisplayPort</td></tr><tr><td align="left">总线接口</td><td>PCIe 4.0 x16</td></tr><tr><td align="left">以太坊算力</td><td>85 MH/s</td></tr><tr><td align="left">以太坊挖矿功耗</td><td>298 W/h</td></tr></tbody></table><table><thead><tr><th align="left">理论性能</th><th></th></tr></thead><tbody><tr><td align="left">像素填充率</td><td>164.2 GPixel/s</td></tr><tr><td align="left">纹理填充率</td><td>465.1 GTexel/s</td></tr><tr><td align="left">显存带宽</td><td>760.3 GB/s</td></tr><tr><td align="left">FP16</td><td>29.77 TFLOPS (1:1)</td></tr><tr><td align="left">FP32</td><td>29.77 TFLOPS</td></tr><tr><td align="left">FP64</td><td>465.1 GFLOPS (1:64)</td></tr></tbody></table><table><thead><tr><th align="left">显卡特性</th><th></th></tr></thead><tbody><tr><td align="left">DirectX</td><td>12 Ultimate (12_2)</td></tr><tr><td align="left">OpenGL</td><td>4.6</td></tr><tr><td align="left">OpenCL</td><td>3.0</td></tr><tr><td align="left">Vulkan</td><td>1.2</td></tr><tr><td align="left">CUDA</td><td>8.6</td></tr><tr><td align="left">Shader model</td><td>6.6</td></tr></tbody></table><hr><h4 id="RTX-3080-Laptop"><a href="#RTX-3080-Laptop" class="headerlink" title="RTX 3080 Laptop"></a>RTX 3080 Laptop</h4><hr><h4 id="RTX-3070Ti"><a href="#RTX-3070Ti" class="headerlink" title="RTX 3070Ti"></a>RTX 3070Ti</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>1575 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1770 MHz</td></tr><tr><td align="left">流处理单元</td><td>6144 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">GPU代号</td><td>GA104</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>290W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>19 Gbps</td></tr><tr><td align="left">内存类型</td><td>GDDR6X</td></tr><tr><td align="left">内存位宽</td><td>256 bit</td></tr><tr><td align="left">最大显存</td><td>8 GB</td></tr></tbody></table><table><thead><tr><th align="left">参数补充</th><th></th></tr></thead><tbody><tr><td align="left">晶片编号</td><td>GA104-400-A1</td></tr><tr><td align="left">代工厂</td><td>Samsung</td></tr><tr><td align="left">核心面积</td><td>392 mm²</td></tr><tr><td align="left">一级缓存</td><td>128 KB</td></tr><tr><td align="left">二级缓存</td><td>4 MB</td></tr><tr><td align="left">光栅单元</td><td>192</td></tr><tr><td align="left">纹理单元</td><td>96</td></tr><tr><td align="left">RT cores</td><td>48</td></tr><tr><td align="left">SM count</td><td>48</td></tr><tr><td align="left">Tensor cores</td><td>192</td></tr><tr><td align="left">建议电源</td><td>600 W</td></tr><tr><td align="left">公版供电</td><td>1x 12-pin</td></tr><tr><td align="left">公版接口</td><td>1x HDMI3x DisplayPort</td></tr><tr><td align="left">总线接口</td><td>PCIe 4.0 x16</td></tr></tbody></table><table><thead><tr><th align="left">理论性能</th><th></th></tr></thead><tbody><tr><td align="left">像素填充率</td><td>169.9 GPixel/s</td></tr><tr><td align="left">纹理填充率</td><td>339.8 GTexel/s</td></tr><tr><td align="left">显存带宽</td><td>608.3 GB/s</td></tr><tr><td align="left">FP16</td><td>21.75 TFLOPS (1:1)</td></tr><tr><td align="left">FP32</td><td>21.75 TFLOPS</td></tr><tr><td align="left">FP64</td><td>339.8 GFLOPS (1:64)</td></tr></tbody></table><table><thead><tr><th align="left">显卡特性</th><th></th></tr></thead><tbody><tr><td align="left">DirectX</td><td>12 Ultimate (12_2)</td></tr><tr><td align="left">OpenGL</td><td>4.6</td></tr><tr><td align="left">OpenCL</td><td>3.0</td></tr><tr><td align="left">Vulkan</td><td>1.2</td></tr><tr><td align="left">CUDA</td><td>8.6</td></tr><tr><td align="left">Shader model</td><td>6.6</td></tr></tbody></table><hr><h4 id="RTX-3070Ti-Laptop"><a href="#RTX-3070Ti-Laptop" class="headerlink" title="RTX 3070Ti Laptop"></a>RTX 3070Ti Laptop</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>915 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1410 MHz</td></tr><tr><td align="left">流处理单元</td><td>5632 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">GPU代号</td><td>GA104</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>115W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>14 Gbps</td></tr><tr><td align="left">内存类型</td><td>GDDR6</td></tr><tr><td align="left">内存位宽</td><td>256 bit</td></tr><tr><td align="left">最大显存</td><td>8 GB</td></tr></tbody></table><table><thead><tr><th align="left">参数补充</th><th></th></tr></thead><tbody><tr><td align="left">代工厂</td><td>Samsung</td></tr><tr><td align="left">核心面积</td><td>392 mm²</td></tr><tr><td align="left">一级缓存</td><td>128 KB</td></tr><tr><td align="left">二级缓存</td><td>4 MB</td></tr><tr><td align="left">光栅单元</td><td>176</td></tr><tr><td align="left">纹理单元</td><td>80</td></tr><tr><td align="left">RT cores</td><td>44</td></tr><tr><td align="left">SM count</td><td>44</td></tr><tr><td align="left">Tensor cores</td><td>176</td></tr><tr><td align="left">总线接口</td><td>PCIe 4.0 x16</td></tr></tbody></table><table><thead><tr><th align="left">理论性能</th><th></th></tr></thead><tbody><tr><td align="left">像素填充率</td><td>112.8 GPixel/s</td></tr><tr><td align="left">纹理填充率</td><td>248.2 GTexel/s</td></tr><tr><td align="left">显存带宽</td><td>448.0 GB/s</td></tr><tr><td align="left">FP16</td><td>15.88 TFLOPS (1:1)</td></tr><tr><td align="left">FP32</td><td>15.88 TFLOPS</td></tr><tr><td align="left">FP64</td><td>248.2 GFLOPS (1:64)</td></tr></tbody></table><table><thead><tr><th align="left">显卡特性</th><th></th></tr></thead><tbody><tr><td align="left">DirectX</td><td>12 Ultimate (12_2)</td></tr><tr><td align="left">OpenGL</td><td>4.6</td></tr><tr><td align="left">OpenCL</td><td>3.0</td></tr><tr><td align="left">Vulkan</td><td>1.2</td></tr><tr><td align="left">CUDA</td><td>8.6</td></tr><tr><td align="left">Shader model</td><td>6.6</td></tr></tbody></table><hr><h4 id="RTX-3070"><a href="#RTX-3070" class="headerlink" title="RTX 3070"></a>RTX 3070</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>1500 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1725 MHz</td></tr><tr><td align="left">流处理单元</td><td>5888 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">GPU代号</td><td>GA104</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>220W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>14 Gbps</td></tr><tr><td align="left">内存类型</td><td>GDDR6</td></tr><tr><td align="left">内存位宽</td><td>256 bit</td></tr><tr><td align="left">最大显存</td><td>8 GB</td></tr></tbody></table><table><thead><tr><th align="left">参数补充</th><th></th></tr></thead><tbody><tr><td align="left">晶片编号</td><td>GA104-300-A1</td></tr><tr><td align="left">晶体管数量</td><td>174亿</td></tr><tr><td align="left">代工厂</td><td>Samsung</td></tr><tr><td align="left">核心面积</td><td>392 mm²</td></tr><tr><td align="left">一级缓存</td><td>128 KB</td></tr><tr><td align="left">二级缓存</td><td>4 MB</td></tr><tr><td align="left">光栅单元</td><td>184</td></tr><tr><td align="left">纹理单元</td><td>96</td></tr><tr><td align="left">RT cores</td><td>46</td></tr><tr><td align="left">SM count</td><td>46</td></tr><tr><td align="left">Tensor cores</td><td>184</td></tr><tr><td align="left">建议电源</td><td>550 W</td></tr><tr><td align="left">公版供电</td><td>1x 12-pin</td></tr><tr><td align="left">公版接口</td><td>1x HDMI3x DisplayPort</td></tr><tr><td align="left">总线接口</td><td>PCIe 4.0 x16</td></tr><tr><td align="left">以太坊算力</td><td>59 MH/s</td></tr><tr><td align="left">以太坊挖矿功耗</td><td>175 W/h</td></tr></tbody></table><table><thead><tr><th align="left">理论性能</th><th></th></tr></thead><tbody><tr><td align="left">像素填充率</td><td>165.6 GPixel/s</td></tr><tr><td align="left">纹理填充率</td><td>317.4 GTexel/s</td></tr><tr><td align="left">显存带宽</td><td>448.0 GB/s</td></tr><tr><td align="left">FP16</td><td>20.31 TFLOPS (1:1)</td></tr><tr><td align="left">FP32</td><td>20.31 TFLOPS</td></tr><tr><td align="left">FP64</td><td>317.4 GFLOPS (1:64)</td></tr></tbody></table><table><thead><tr><th align="left">显卡特性</th><th></th></tr></thead><tbody><tr><td align="left">DirectX</td><td>12 Ultimate (12_2)</td></tr><tr><td align="left">OpenGL</td><td>4.6</td></tr><tr><td align="left">OpenCL</td><td>3.0</td></tr><tr><td align="left">Vulkan</td><td>1.2</td></tr><tr><td align="left">CUDA</td><td>8.6</td></tr><tr><td align="left">Shader model</td><td>6.6</td></tr></tbody></table><hr><h4 id="RTX-3070-Laptop"><a href="#RTX-3070-Laptop" class="headerlink" title="RTX 3070 Laptop"></a>RTX 3070 Laptop</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>1500 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1725 MHz</td></tr><tr><td align="left">流处理单元</td><td>5888 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>220W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>16000 MHz</td></tr><tr><td align="left">内存类型</td><td>GDDR6</td></tr><tr><td align="left">内存位宽</td><td>256 Bit</td></tr></tbody></table><table><thead><tr><th align="left">参数补充</th><th></th></tr></thead><tbody><tr><td align="left">晶体管数量</td><td>174亿</td></tr><tr><td align="left">以太坊算力</td><td>59 MH/s</td></tr><tr><td align="left">以太坊挖矿功耗</td><td>175 W/h</td></tr></tbody></table><p>理论性能</p><p>显卡特性</p><hr><h4 id="RTX-3060Ti"><a href="#RTX-3060Ti" class="headerlink" title="RTX 3060Ti"></a>RTX 3060Ti</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>1410 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1665 MHz</td></tr><tr><td align="left">流处理单元</td><td>4864 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">GPU代号</td><td>GA104</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>200W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>14 Gbps</td></tr><tr><td align="left">内存类型</td><td>GDDR6</td></tr><tr><td align="left">内存位宽</td><td>256 bit</td></tr><tr><td align="left">最大显存</td><td>8 GB</td></tr></tbody></table><table><thead><tr><th align="left">参数补充</th><th></th></tr></thead><tbody><tr><td align="left">晶片编号</td><td>GA104-200-A1</td></tr><tr><td align="left">晶体管数量</td><td>174亿</td></tr><tr><td align="left">代工厂</td><td>Samsung</td></tr><tr><td align="left">核心面积</td><td>392 mm²</td></tr><tr><td align="left">一级缓存</td><td>128 KB</td></tr><tr><td align="left">二级缓存</td><td>4 MB</td></tr><tr><td align="left">光栅单元</td><td>152</td></tr><tr><td align="left">纹理单元</td><td>80</td></tr><tr><td align="left">RT cores</td><td>38</td></tr><tr><td align="left">SM count</td><td>38</td></tr><tr><td align="left">Tensor cores</td><td>152</td></tr><tr><td align="left">建议电源</td><td>550 W</td></tr><tr><td align="left">公版供电</td><td>1x 12-pin</td></tr><tr><td align="left">公版接口</td><td>1x HDMI3x DisplayPort</td></tr><tr><td align="left">总线接口</td><td>PCIe 4.0 x16</td></tr><tr><td align="left">以太坊算力</td><td>61 MH/s</td></tr><tr><td align="left">以太坊挖矿功耗</td><td>193 W/h</td></tr></tbody></table><table><thead><tr><th align="left">理论性能</th><th></th></tr></thead><tbody><tr><td align="left">像素填充率</td><td>133.2 GPixel/s</td></tr><tr><td align="left">纹理填充率</td><td>253.1 GTexel/s</td></tr><tr><td align="left">显存带宽</td><td>448.0 GB/s</td></tr><tr><td align="left">FP16</td><td>16.20 TFLOPS (1:1)</td></tr><tr><td align="left">FP32</td><td>16.20 TFLOPS</td></tr><tr><td align="left">FP64</td><td>253.1 GFLOPS (1:64)</td></tr></tbody></table><table><thead><tr><th align="left">显卡特性</th><th></th></tr></thead><tbody><tr><td align="left">DirectX</td><td>12 Ultimate (12_2)</td></tr><tr><td align="left">OpenGL</td><td>4.6</td></tr><tr><td align="left">OpenCL</td><td>3.0</td></tr><tr><td align="left">Vulkan</td><td>1.2</td></tr><tr><td align="left">CUDA</td><td>8.6</td></tr><tr><td align="left">Shader model</td><td>6.6</td></tr></tbody></table><hr><h4 id="RTX-3060Ti-Laptop"><a href="#RTX-3060Ti-Laptop" class="headerlink" title="RTX 3060Ti Laptop"></a>RTX 3060Ti Laptop</h4><hr><h4 id="RTX-3060"><a href="#RTX-3060" class="headerlink" title="RTX 3060"></a>RTX 3060</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>1320 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1777 MHz</td></tr><tr><td align="left">流处理单元</td><td>3584 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">GPU代号</td><td>GA106</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>170W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>15 Gbps</td></tr><tr><td align="left">内存类型</td><td>GDDR6</td></tr><tr><td align="left">内存位宽</td><td>192 bit</td></tr><tr><td align="left">最大显存</td><td>12 GB</td></tr></tbody></table><table><thead><tr><th align="left">参数补充</th><th></th></tr></thead><tbody><tr><td align="left">晶片编号</td><td>GA106-300-A1</td></tr><tr><td align="left">晶体管数量</td><td>132亿</td></tr><tr><td align="left">代工厂</td><td>Samsung</td></tr><tr><td align="left">核心面积</td><td>276 mm²</td></tr><tr><td align="left">一级缓存</td><td>128 KB</td></tr><tr><td align="left">二级缓存</td><td>3 MB</td></tr><tr><td align="left">光栅单元</td><td>112</td></tr><tr><td align="left">纹理单元</td><td>48</td></tr><tr><td align="left">RT cores</td><td>28</td></tr><tr><td align="left">SM count</td><td>28</td></tr><tr><td align="left">Tensor cores</td><td>112</td></tr><tr><td align="left">建议电源</td><td>450 W</td></tr><tr><td align="left">公版供电</td><td>1x 12-pin</td></tr><tr><td align="left">公版接口</td><td>1x HDMI3x DisplayPort</td></tr><tr><td align="left">总线接口</td><td>PCIe 4.0 x16</td></tr><tr><td align="left">以太坊算力</td><td>46 MH/s</td></tr><tr><td align="left">以太坊挖矿功耗</td><td>154 W/h</td></tr></tbody></table><table><thead><tr><th align="left">理论性能</th><th></th></tr></thead><tbody><tr><td align="left">像素填充率</td><td>85.30 GPixel/s</td></tr><tr><td align="left">纹理填充率</td><td>199.0 GTexel/s</td></tr><tr><td align="left">显存带宽</td><td>360.0 GB/s</td></tr><tr><td align="left">FP16</td><td>12.74 TFLOPS (1:1)</td></tr><tr><td align="left">FP32</td><td>12.74 TFLOPS</td></tr><tr><td align="left">FP64</td><td>199.0 GFLOPS (1:64)</td></tr></tbody></table><table><thead><tr><th align="left">显卡特性</th><th></th></tr></thead><tbody><tr><td align="left">DirectX</td><td>12 Ultimate (12_2)</td></tr><tr><td align="left">OpenGL</td><td>4.6</td></tr><tr><td align="left">OpenCL</td><td>3.0</td></tr><tr><td align="left">Vulkan</td><td>1.2</td></tr><tr><td align="left">CUDA</td><td>8.6</td></tr><tr><td align="left">Shader model</td><td>6.6</td></tr></tbody></table><hr><h4 id="RTX-3060-Laptop"><a href="#RTX-3060-Laptop" class="headerlink" title="RTX 3060 Laptop"></a>RTX 3060 Laptop</h4><hr><h4 id="RTX-3050Ti-Laptop"><a href="#RTX-3050Ti-Laptop" class="headerlink" title="RTX 3050Ti Laptop"></a>RTX 3050Ti Laptop</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>1222 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1485 MHz</td></tr><tr><td align="left">流处理单元</td><td>2560 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>60W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>12 GHz</td></tr><tr><td align="left">内存类型</td><td>GDDR6</td></tr><tr><td align="left">内存位宽</td><td>128 Bit</td></tr><tr><td align="left">最大显存</td><td>4 GB</td></tr></tbody></table><p>参数补充</p><p>理论性能</p><p>显卡特性</p><hr><h4 id="RTX-3050"><a href="#RTX-3050" class="headerlink" title="RTX 3050"></a>RTX 3050</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>1552 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1777 MHz</td></tr><tr><td align="left">流处理单元</td><td>2560 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">GPU代号</td><td>GA106</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>90W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>14 Gbps</td></tr><tr><td align="left">内存类型</td><td>GDDR6</td></tr><tr><td align="left">内存位宽</td><td>128 bit</td></tr><tr><td align="left">最大显存</td><td>8 GB</td></tr></tbody></table><table><thead><tr><th align="left">参数补充</th><th></th></tr></thead><tbody><tr><td align="left">晶片编号</td><td>GA106-150-A1</td></tr><tr><td align="left">代工厂</td><td>Samsung</td></tr><tr><td align="left">核心面积</td><td>276 mm²</td></tr><tr><td align="left">一级缓存</td><td>128 KB</td></tr><tr><td align="left">二级缓存</td><td>2 MB</td></tr><tr><td align="left">光栅单元</td><td>80</td></tr><tr><td align="left">纹理单元</td><td>48</td></tr><tr><td align="left">RT cores</td><td>20</td></tr><tr><td align="left">SM count</td><td>20</td></tr><tr><td align="left">Tensor cores</td><td>80</td></tr><tr><td align="left">建议电源</td><td>250 W</td></tr><tr><td align="left">公版供电</td><td>1x 6-pin</td></tr><tr><td align="left">公版接口</td><td>1x HDMI3x DisplayPort</td></tr><tr><td align="left">总线接口</td><td>PCIe 4.0 x16</td></tr></tbody></table><table><thead><tr><th align="left">理论性能</th><th></th></tr></thead><tbody><tr><td align="left">像素填充率</td><td>85.30 GPixel/s</td></tr><tr><td align="left">纹理填充率</td><td>142.2 GTexel/s</td></tr><tr><td align="left">显存带宽</td><td>224.0 GB/s</td></tr><tr><td align="left">FP16</td><td>9.098 TFLOPS (1:1)</td></tr><tr><td align="left">FP32</td><td>9.098 TFLOPS</td></tr><tr><td align="left">FP64</td><td>142.2 GFLOPS (1:64)</td></tr></tbody></table><table><thead><tr><th align="left">显卡特性</th><th></th></tr></thead><tbody><tr><td align="left">DirectX</td><td>12 Ultimate (12_2)</td></tr><tr><td align="left">OpenGL</td><td>4.6</td></tr><tr><td align="left">OpenCL</td><td>3.0</td></tr><tr><td align="left">Vulkan</td><td>1.2</td></tr><tr><td align="left">CUDA</td><td>8.6</td></tr><tr><td align="left">Shader model</td><td>6.6</td></tr></tbody></table><hr><h4 id="RTX-3050-Laptop"><a href="#RTX-3050-Laptop" class="headerlink" title="RTX 3050 Laptop"></a>RTX 3050 Laptop</h4><table><thead><tr><th align="left">主要参数</th><th></th></tr></thead><tbody><tr><td align="left">核心频率</td><td>1238 MHz</td></tr><tr><td align="left">Turbo频率</td><td>1500 MHz</td></tr><tr><td align="left">流处理单元</td><td>2048 个</td></tr><tr><td align="left">核心架构</td><td>Ampere</td></tr><tr><td align="left">生产工艺</td><td>8 nm</td></tr><tr><td align="left">TDP功耗</td><td>60 W</td></tr></tbody></table><table><thead><tr><th align="left">内存参数</th><th></th></tr></thead><tbody><tr><td align="left">内存频率</td><td>12 GHz</td></tr><tr><td align="left">内存类型</td><td>GDDR6</td></tr><tr><td align="left">内存位宽</td><td>128 Bit</td></tr><tr><td align="left">最大显存</td><td>4 GB</td></tr></tbody></table><p>参数补充</p><p>理论性能</p><p>显卡特性</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;持续更新中&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="GPU" scheme="https://yousa.love/tags/GPU/"/>
    
  </entry>
  
  <entry>
    <title>梯度下降算法简介</title>
    <link href="https://yousa.love/2023/06/03/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>https://yousa.love/2023/06/03/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/</id>
    <published>2023-06-03T13:12:42.000Z</published>
    <updated>2023-06-04T06:37:13.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><span id="more"></span><p>梯度下降（gradient descent）在机器学习中应用十分的广泛，不论是在线性回归还是Logistic回归中，它的主要目的是通过迭代找到目标函数的最小值，或者收敛到最小值。<br>本文将从一个下山的场景开始，先提出梯度下降算法的基本思想，进而从数学上解释梯度下降算法的原理，解释为什么要用梯度，最后实现一个简单的梯度下降算法的实例！</p><h1 id="梯度下降算法"><a href="#梯度下降算法" class="headerlink" title="梯度下降算法"></a>梯度下降算法</h1><h2 id="场景假设"><a href="#场景假设" class="headerlink" title="场景假设"></a>场景假设</h2><p>梯度下降法的基本思想可以类比为一个下山的过程。<br>假设这样一个场景：一个人被困在山上，需要从山上下来(找到山的最低点，也就是山谷)。但此时山上的浓雾很大，导致可视度很低；因此，下山的路径就无法确定，必须利用自己周围的信息一步一步地找到下山的路。这个时候，便可利用梯度下降算法来帮助自己下山。怎么做呢，首先以他当前的所处的位置为基准，寻找这个位置最陡峭的地方，然后朝着下降方向走一步，然后又继续以当前位置为基准，再找最陡峭的地方，再走直到最后到达最低处；同理上山也是如此，只是这时候就变成梯度上升算法了</p><p><a href="https://pic.imgdb.cn/item/647b3c72f024cca1733051c3.jpg"><img src="https://pic.imgdb.cn/item/647b3c72f024cca1733051c3.jpg"></a></p><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>梯度下降的基本过程就和下山的场景很类似。</p><p>首先，我们有一个可微分的函数。这个函数就代表着一座山。我们的目标就是找到这个函数的最小值，也就是山底。根据之前的场景假设，最快的下山的方式就是找到当前位置最陡峭的方向，然后沿着此方向向下走，对应到函数中，就是找到给定点的梯度 ，然后朝着梯度相反的方向，就能让函数值下降的最快！因为梯度的方向就是函数之变化最快的方向(在后面会详细解释)<br>所以，我们重复利用这个方法，反复求取梯度，最后就能到达局部的最小值，这就类似于我们下山的过程。而求取梯度就确定了最陡峭的方向，也就是场景中测量方向的手段。那么为什么梯度的方向就是最陡峭的方向呢？接下来，我们从微分开始讲起：</p><h3 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h3><p>看待微分的意义，可以有不同的角度，最常用的两种是：</p><p>函数图像中，某点的切线的斜率<br>函数的变化率<br>几个微分的例子：</p><ol><li>单变量的微分，函数只有一个变量时</li></ol><p>$$<br>\frac{\mathrm{d}\left(\mathrm{x}^2\right)}{\mathrm{dx}}=2 \mathrm{x}<br>$$</p><p>$$<br>\frac{\mathrm{d}(-2y^{5})}{\mathrm{d}y}{=}-10y^{4}<br>$$</p><p>$$<br>{\frac{\operatorname*{d}(5-θ)^{2}}{\operatorname*{d}θ}}{=}-2(5-\Theta)<br>$$</p><ol start="2"><li>多变量的微分，当函数有多个变量的时候，即分别对每个变量进行求微分</li></ol><p>$$<br>\frac{\partial}{\partial x}\left({\bf x}^{2}{\bf y}^{2}\right)=2{\bf x}y^{2}<br>$$</p><p>$$<br>\frac{\partial}{\partial\mathbf{y}}\left(-2\mathbf{y}^{5}+\mathbf{z}^{2}\right)=-10\mathbf{y}^{4}<br>$$</p><p>$$<br>\frac{\partial}{\partial\theta_{2}}\left(5\theta_{1}+2\theta_{2},-12\theta_{3}\right)=2<br>$$</p><p>$$<br>\frac{\partial}{\partial\theta_{2}}\left(0.55-\left(50_{1},+\ 2\theta_{2},-,12\theta_{3}\right)\right)=-2<br>$$</p><h3 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h3><p>梯度实际上就是多变量微分的一般化。<br>下面这个例子：<br>$$<br>\operatorname{J}(\Theta)=0.55-(5\theta_{1}+2\theta_{2}-12\theta_{3})<br>$$</p><p>$$<br>\nabla J\left(\Theta\right){=}\langle\frac{\partial{ J}}{\partial\theta_{1}},\frac{\partial{ J}}{\partial\theta_{2}},\frac{\partial{ J}}{\partial\theta_{3}}\rangle{=}\left(-5,-2,12\right)<br>$$</p><p>我们可以看到，梯度就是分别对每个变量进行微分，然后用逗号分割开，梯度是用&lt;&gt;包括起来，说明梯度其实一个向量。</p><p>梯度是微积分中一个很重要的概念，之前提到过梯度的意义</p><p>在单变量的函数中，梯度其实就是函数的微分，代表着函数在某个给定点的切线的斜率<br>在多变量函数中，梯度是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向<br>这也就说明了为什么我们需要千方百计的求取梯度！我们需要到达山底，就需要在每一步观测到此时最陡峭的地方，梯度就恰巧告诉了我们这个方向。梯度的方向是函数在给定点上升最快的方向，那么梯度的反方向就是函数在给定点下降最快的方向，这正是我们所需要的。所以我们只要沿着梯度的方向一直走，就能走到局部的最低点！</p><h2 id="数学解释"><a href="#数学解释" class="headerlink" title="数学解释"></a>数学解释</h2><p>首先给出数学公式：<br>$$<br>\Theta^{1}=\Theta^{0}+a\nabla\mathrm{J}\left(\Theta\right)\rightarrow\mathrm{evaluatedat}\Theta^{0}<br>$$<br>此公式的意义是：J是关于Θ的一个函数，我们当前所处的位置为Θ0点，要从这个点走到J的最小值点，也就是山底。首先我们先确定前进的方向，也就是梯度的反向，然后走一段距离的步长，也就是α，走完这个段步长，就到达了Θ1这个点！</p><p><a href="https://pic.imgdb.cn/item/647b4a0cf024cca1734e29c2.jpg"><img src="https://pic.imgdb.cn/item/647b4a0cf024cca1734e29c2.jpg"></a></p><h3 id="α"><a href="#α" class="headerlink" title="α"></a>α</h3><p>α在梯度下降算法中被称作为学习率或者步长，意味着我们可以通过α来控制每一步走的距离，以保证不要步子跨的太大扯着蛋，哈哈，其实就是不要走太快，错过了最低点。同时也要保证不要走的太慢，导致太阳下山了，还没有走到山下。所以α的选择在梯度下降法中往往是很重要的！α不能太大也不能太小，太小的话，可能导致迟迟走不到最低点，太大的话，会导致错过最低点！</p><h3 id="梯度要乘以一个负号"><a href="#梯度要乘以一个负号" class="headerlink" title="梯度要乘以一个负号"></a>梯度要乘以一个负号</h3><p>梯度前加一个负号，就意味着朝着梯度相反的方向前进！我们在前文提到，梯度的方向实际就是函数在此点上升最快的方向！而我们需要朝着下降最快的方向走，自然就是负的梯度的方向，所以此处需要加上负号；那么如果时上坡，也就是梯度上升算法，当然就不需要添加负号了。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>我们已经基本了解了梯度下降算法的计算过程，那么我们就来看几个梯度下降算法的小实例，首先从单变量的函数开始，然后介绍多变量的函数。</p><h2 id="单变量函数的梯度下降"><a href="#单变量函数的梯度下降" class="headerlink" title="单变量函数的梯度下降"></a>单变量函数的梯度下降</h2><p>我们假设有一个单变量的函数<br>$$<br>{\mathbf{J}}(\theta)=\theta^{2}<br>$$<br>函数的微分，直接求导就可以得到<br>$$<br>J^′(θ)=2θ<br>$$<br>初始化，也就是起点，起点可以随意的设置，这里设置为1<br>$$<br>θ ^0<br> =1<br>$$<br>学习率也可以随意的设置，这里设置为0.4<br>$$<br>α=0.4<br>$$<br>根据梯度下降的计算公式</p><p>我们开始进行梯度下降的迭代计算过程：</p><p><a href="https://pic.imgdb.cn/item/647b4b29f024cca1735137e0.jpg"><img src="https://pic.imgdb.cn/item/647b4b29f024cca1735137e0.jpg"></a></p><p>如图，经过四次的运算，也就是走了四步，基本就抵达了函数的最低点，也就是山底</p><p><a href="https://pic.imgdb.cn/item/647b4b39f024cca1735161bb.jpg"><img src="https://pic.imgdb.cn/item/647b4b39f024cca1735161bb.jpg"></a></p><h2 id="多变量函数的梯度下降"><a href="#多变量函数的梯度下降" class="headerlink" title="多变量函数的梯度下降"></a>多变量函数的梯度下降</h2><p>我们假设有一个目标函数<br>$$<br>\operatorname{J}(\Theta)=\theta_{1}^{2}+\theta_{2}^{2}<br>$$<br>现在要通过梯度下降法计算这个函数的最小值。我们通过观察就能发现最小值其实就是 (0，0)点。但是接下来，我们会从梯度下降算法开始一步步计算到这个最小值！<br>我们假设初始的起点为：<br>$$<br>Θ _0<br> =(1,3)<br>$$<br>初始的学习率为：</p><p>$$<br>α=0.1<br>$$<br>函数的梯度为：<br>$$<br>▽J(Θ)=⟨2θ_1,2θ_2⟩<br>$$<br>进行多次迭代：</p><p><a href="https://pic.imgdb.cn/item/647bfbb9f024cca1730d4327.jpg"><img src="https://pic.imgdb.cn/item/647bfbb9f024cca1730d4327.jpg"></a></p><p>我们发现，已经基本靠近函数的最小值点</p><p><a href="https://pic.imgdb.cn/item/647bfbcef024cca1730d5562.jpg"><img src="https://pic.imgdb.cn/item/647bfbcef024cca1730d5562.jpg"></a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h2><p>下面我们将用python实现一个简单的梯度下降算法。场景是一个简单的线性回归的例子：假设现在我们有一系列的点，如下图所示：</p><p><a href="https://pic.imgdb.cn/item/647bfbe0f024cca1730d6375.jpg"><img src="https://pic.imgdb.cn/item/647bfbe0f024cca1730d6375.jpg"></a></p><p>我们将用梯度下降法来拟合出这条直线！</p><p>首先，我们需要定义一个代价函数，在此我们选用<a href="https://en.wikipedia.org/wiki/Least_squares"><strong>均方误差代价函数</strong></a>（也称平方误差代价函数）<br>$$<br>J\left(\Theta\right)={\frac{1}{2\mathrm{m}}}\sum_{\mathrm{i=1}}^{\mathrm{m}}\left(\mathrm{h}_{\theta}\left(\mathbf{x}^{\mathrm{(i)}}\right)-\mathbf{y}^{\mathrm{(i)}}\right)^{2}<br>$$<br>此公式中</p><ul><li>m是数据集中数据点的个数，也就是样本数</li><li>1/2m是一个常量，这样是为了在求梯度的时候，二次方乘下来的2就和这里的½抵消了，自然就没有多余的常数系数，方便后续的计算，同时对结果不会有影响</li><li>y 是数据集中每个点的真实y坐标的值，也就是类标签</li><li>h 是我们的预测函数（假设函数），根据每一个输入x，根据Θ 计算得到预测的y值，即</li></ul><p><a href="https://imgse.com/i/pC9cop6"><img src="https://s1.ax1x.com/2023/06/04/pC9cop6.png"></a></p><p>我们可以根据代价函数看到，代价函数中的变量有两个，所以是一个多变量的梯度下降问题，求解出代价函数的梯度，也就是分别对两个变量进行微分</p><p><a href="https://pic.imgdb.cn/item/647bfd73f024cca1730eac24.jpg"><img src="https://pic.imgdb.cn/item/647bfd73f024cca1730eac24.jpg"></a></p><p>明确了代价函数和梯度，以及预测的函数形式。我们就可以开始编写代码了。但在这之前，需要说明一点，就是为了方便代码的编写，我们会将所有的公式都转换为矩阵的形式，python中计算矩阵是非常方便的，同时代码也会变得非常的简洁。<br>为了转换为矩阵的计算，我们观察到预测函数的形式<br>$$<br>h_{\Theta}({\bf x}^{(\mathrm{i})}){=}\Theta_{0}+\Theta_{1}{\bf x}^{(\mathrm{i})}<br>$$<br>我们有两个变量，为了对这个公式进行矩阵化，我们可以给每一个点x增加一维，这一维的值固定为1，这一维将会乘到Θ0上。这样就方便我们统一矩阵化的计算</p><p>然后我们将代价函数和梯度转化为矩阵向量相乘的形式<br>$$<br>\operatorname{J}(\Theta)={\textstyle\frac{1}{2\mathrm{m}}}\left(\mathbf{X}\Theta-{\vec{y}}\right)^{\mathrm{T}}\left(\mathbf{X}\Theta-{\vec{y}}\right)<br>$$</p><p>$$<br>\nabla{J}\left(\Theta\right)={\operatorname*{\frac{1}{\mathrm{m}}}}\mathbf{X}^{\mathrm{T}}\left(\mathbf{X}\Theta-{\vec{\mathbf{y}}}\right)<br>$$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>首先，我们需要定义数据集和学习率</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from numpy import *</span><br><span class="line"></span><br><span class="line"># 数据集大小 即20个数据点</span><br><span class="line">m = 20</span><br><span class="line"># x的坐标以及对应的矩阵</span><br><span class="line">X0 = ones((m, 1))  # 生成一个m行1列的向量，也就是x0，全是1</span><br><span class="line">X1 = arange(1, m+1).reshape(m, 1)  # 生成一个m行1列的向量，也就是x1，从1到m</span><br><span class="line">X = hstack((X0, X1))  # 按照列堆叠形成数组，其实就是样本数据</span><br><span class="line"># 对应的y坐标</span><br><span class="line">y = np.array([</span><br><span class="line">    3, 4, 5, 5, 2, 4, 7, 8, 11, 8, 12,</span><br><span class="line">    11, 13, 13, 16, 17, 18, 17, 19, 21</span><br><span class="line">]).reshape(m, 1)</span><br><span class="line"># 学习率</span><br><span class="line">alpha = 0.01</span><br></pre></td></tr></tbody></table></figure><p>接下来我们以矩阵向量的形式定义代价函数和代价函数的梯度</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义代价函数</span><br><span class="line">def cost_function(theta, X, Y):</span><br><span class="line">    diff = dot(X, theta) - Y  # dot() 数组需要像矩阵那样相乘，就需要用到dot()</span><br><span class="line">    return (1/(2*m)) * dot(diff.transpose(), diff)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义代价函数对应的梯度函数</span><br><span class="line">def gradient_function(theta, X, Y):</span><br><span class="line">    diff = dot(X, theta) - Y</span><br><span class="line">    return (1/m) * dot(X.transpose(), diff)</span><br></pre></td></tr></tbody></table></figure><p>最后就是算法的核心部分，梯度下降迭代计算</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 梯度下降迭代</span><br><span class="line">def gradient_descent(X, Y, alpha):</span><br><span class="line">    theta = array([1, 1]).reshape(2, 1)</span><br><span class="line">    gradient = gradient_function(theta, X, Y)</span><br><span class="line">    while not all(abs(gradient) &lt;= 1e-5):</span><br><span class="line">        theta = theta - alpha * gradient</span><br><span class="line">        gradient = gradient_function(theta, X, Y)</span><br><span class="line">    return theta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">optimal = gradient_descent(X, Y, alpha)</span><br><span class="line">print('optimal:', optimal)</span><br><span class="line">print('cost function:', cost_function(optimal, X, Y)[0][0])</span><br></pre></td></tr></tbody></table></figure><p>当梯度小于1e-5时，说明已经进入了比较平滑的状态，类似于山谷的状态，这时候再继续迭代效果也不大了，所以这个时候可以退出循环！<br>运行代码，计算得到的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print('optimal:', optimal)  # 结果 [[0.51583286][0.96992163]]</span><br><span class="line">print('cost function:', cost_function(optimal, X, Y)[0][0])  # 1.014962406233101</span><br></pre></td></tr></tbody></table></figure><p>通过matplotlib画出图像，</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 根据数据画出对应的图像</span><br><span class="line">def plot(X, Y, theta):</span><br><span class="line">    import matplotlib.pyplot as plt</span><br><span class="line">    ax = plt.subplot(111)  # 这是我改的</span><br><span class="line">    ax.scatter(X, Y, s=30, c="red", marker="s")</span><br><span class="line">    plt.xlabel("X")</span><br><span class="line">    plt.ylabel("Y")</span><br><span class="line">    x = arange(0, 21, 0.2)  # x的范围</span><br><span class="line">    y = theta[0] + theta[1]*x</span><br><span class="line">    ax.plot(x, y)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plot(X1, Y, optimal)</span><br></pre></td></tr></tbody></table></figure><p>所拟合出的直线如下</p><p><a href="https://pic.imgdb.cn/item/647c2806f024cca173561b9a.jpg"><img src="https://pic.imgdb.cn/item/647c2806f024cca173561b9a.jpg"></a></p><p>全部代码如下，大家有兴趣的可以复制下来跑一下看一下结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">from numpy import *</span><br><span class="line"></span><br><span class="line"># 数据集大小 即20个数据点</span><br><span class="line">m = 20</span><br><span class="line"># x的坐标以及对应的矩阵</span><br><span class="line">X0 = ones((m, 1))  # 生成一个m行1列的向量，也就是x0，全是1</span><br><span class="line">X1 = arange(1, m+1).reshape(m, 1)  # 生成一个m行1列的向量，也就是x1，从1到m</span><br><span class="line">X = hstack((X0, X1))  # 按照列堆叠形成数组，其实就是样本数据</span><br><span class="line"># 对应的y坐标</span><br><span class="line">Y = array([</span><br><span class="line">    3, 4, 5, 5, 2, 4, 7, 8, 11, 8, 12,</span><br><span class="line">    11, 13, 13, 16, 17, 18, 17, 19, 21</span><br><span class="line">]).reshape(m, 1)</span><br><span class="line"># 学习率</span><br><span class="line">alpha = 0.01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义代价函数</span><br><span class="line">def cost_function(theta, X, Y):</span><br><span class="line">    diff = dot(X, theta) - Y  # dot() 数组需要像矩阵那样相乘，就需要用到dot()</span><br><span class="line">    return (1/(2*m)) * dot(diff.transpose(), diff)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义代价函数对应的梯度函数</span><br><span class="line">def gradient_function(theta, X, Y):</span><br><span class="line">    diff = dot(X, theta) - Y</span><br><span class="line">    return (1/m) * dot(X.transpose(), diff)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 梯度下降迭代</span><br><span class="line">def gradient_descent(X, Y, alpha):</span><br><span class="line">    theta = array([1, 1]).reshape(2, 1)</span><br><span class="line">    gradient = gradient_function(theta, X, Y)</span><br><span class="line">    while not all(abs(gradient) &lt;= 1e-5):</span><br><span class="line">        theta = theta - alpha * gradient</span><br><span class="line">        gradient = gradient_function(theta, X, Y)</span><br><span class="line">    return theta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">optimal = gradient_descent(X, Y, alpha)</span><br><span class="line">print('optimal:', optimal)</span><br><span class="line">print('cost function:', cost_function(optimal, X, Y)[0][0])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 根据数据画出对应的图像</span><br><span class="line">def plot(X, Y, theta):</span><br><span class="line">    import matplotlib.pyplot as plt</span><br><span class="line">    ax = plt.subplot(111)  # 这是我改的</span><br><span class="line">    ax.scatter(X, Y, s=30, c="red", marker="s")</span><br><span class="line">    plt.xlabel("X")</span><br><span class="line">    plt.ylabel("Y")</span><br><span class="line">    x = arange(0, 21, 0.2)  # x的范围</span><br><span class="line">    y = theta[0] + theta[1]*x</span><br><span class="line">    ax.plot(x, y)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plot(X1, Y, optimal)</span><br></pre></td></tr></tbody></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>至此，就基本介绍完了梯度下降法的基本思想和算法流程，并且用python实现了一个简单的梯度下降算法拟合直线的案例！<br>最后，我们回到文章开头所提出的场景假设:<br>这个下山的人实际上就代表了<a href="https://en.wikipedia.org/wiki/Backpropagation"><strong>反向传播算法</strong></a>，下山的路径其实就代表着算法中一直在寻找的参数Θ，山上当前点的最陡峭的方向实际上就是代价函数在这一点的梯度方向，场景中观测最陡峭方向所用的工具就是<a href="https://en.wikipedia.org/wiki/Derivative"><strong>微分</strong></a> 。在下一次观测之前的时间就是有我们算法中的学习率α所定义的。<br>可以看到场景假设和梯度下降算法很好的完成了对应！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://yousa.love/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python3列表、元组、字典、集合</title>
    <link href="https://yousa.love/2023/06/03/Python3%E5%88%97%E8%A1%A8/"/>
    <id>https://yousa.love/2023/06/03/Python3%E5%88%97%E8%A1%A8/</id>
    <published>2023-06-03T13:00:05.000Z</published>
    <updated>2023-06-04T06:01:25.283Z</updated>
    
    <content type="html"><![CDATA[<p><strong>笔记</strong></p><span id="more"></span><h1 id="Python3-列表"><a href="#Python3-列表" class="headerlink" title="Python3 列表"></a>Python3 列表</h1><p>序列是 Python 中最基本的数据结构。</p><p>序列中的每个值都有对应的位置值，称之为索引，第一个索引是 0，第二个索引是 1，依此类推。</p><p>Python 有 6 个序列的内置类型，但最常见的是列表和元组。</p><p>列表都可以进行的操作包括索引，切片，加，乘，检查成员。</p><p>此外，Python 已经内置确定序列的长度以及确定最大和最小的元素的方法。</p><p>列表是最常用的 Python 数据类型，它可以作为一个方括号内的逗号分隔值出现。</p><p>列表的数据项不需要具有相同的类型</p><p>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = ['Google', 'Runoob', 1997, 2000]</span><br><span class="line">list2 = [1, 2, 3, 4, 5 ]</span><br><span class="line">list3 = ["a", "b", "c", "d"]</span><br><span class="line">list4 = ['red', 'green', 'blue', 'yellow', 'white', 'black']</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="访问列表中的值"><a href="#访问列表中的值" class="headerlink" title="访问列表中的值"></a>访问列表中的值</h2><p>与字符串的索引一样，列表索引从 <strong>0</strong> 开始，第二个索引是 <strong>1</strong>，依此类推。</p><p>通过索引列表可以进行截取、组合等操作。</p><p><a href="https://pic.imgdb.cn/item/647b39adf024cca1732dc190.jpg"><img src="https://pic.imgdb.cn/item/647b39adf024cca1732dc190.jpg"></a></p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = ['red', 'green', 'blue', 'yellow', 'white', 'black']</span><br><span class="line">print( list[0] )</span><br><span class="line">print( list[1] )</span><br><span class="line">print( list[2] )</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">red</span><br><span class="line">green</span><br><span class="line">blue</span><br></pre></td></tr></tbody></table></figure><p>索引也可以从尾部开始，最后一个元素的索引为 <strong>-1</strong>，往前一位为 <strong>-2</strong>，以此类推。</p><p><a href="https://pic.imgdb.cn/item/647b39dbf024cca1732de931.jpg"><img src="https://pic.imgdb.cn/item/647b39dbf024cca1732de931.jpg"></a></p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"></span><br><span class="line">list = ['red', 'green', 'blue', 'yellow', 'white', 'black']</span><br><span class="line">print( list[-1] )</span><br><span class="line">print( list[-2] )</span><br><span class="line">print( list[-3] )</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">black</span><br><span class="line">white</span><br><span class="line">yellow</span><br></pre></td></tr></tbody></table></figure><p>使用下标索引来访问列表中的值，同样你也可以使用方括号 <strong>[]</strong> 的形式截取字符，如下所示：</p><p><a href="https://pic.imgdb.cn/item/647b39fcf024cca1732e0633.jpg"><img src="https://pic.imgdb.cn/item/647b39fcf024cca1732e0633.jpg"></a></p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]</span><br><span class="line">print(nums[0:4])</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[10, 20, 30, 40]</span><br></pre></td></tr></tbody></table></figure><p>使用负数索引值截取：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = ['Google', 'Runoob', "Zhihu", "Taobao", "Wiki"]</span><br><span class="line"> </span><br><span class="line"># 读取第二位</span><br><span class="line">print ("list[1]: ", list[1])</span><br><span class="line"># 从第二位开始（包含）截取到倒数第二位（不包含）</span><br><span class="line">print ("list[1:-2]: ", list[1:-2])</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list[1]:  Runoob</span><br><span class="line">list[1:-2]:  ['Runoob', 'Zhihu']</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="更新列表"><a href="#更新列表" class="headerlink" title="更新列表"></a>更新列表</h2><p>你可以对列表的数据项进行修改或更新，你也可以使用 append() 方法来添加列表项，如下所示：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list = ['Google', 'Runoob', 1997, 2000]</span><br><span class="line"> </span><br><span class="line">print ("第三个元素为 : ", list[2])</span><br><span class="line">list[2] = 2001</span><br><span class="line">print ("更新后的第三个元素为 : ", list[2])</span><br><span class="line"> </span><br><span class="line">list1 = ['Google', 'Runoob', 'Taobao']</span><br><span class="line">list1.append('Baidu')</span><br><span class="line">print ("更新后的列表 : ", list1)</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第三个元素为 :  1997</span><br><span class="line">更新后的第三个元素为 :  2001</span><br><span class="line">更新后的列表 :  ['Google', 'Runoob', 'Taobao', 'Baidu']</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h2><p>可以使用 del 语句来删除列表的的元素，如下实例：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = ['Google', 'Runoob', 1997, 2000]</span><br><span class="line"> </span><br><span class="line">print ("原始列表 : ", list)</span><br><span class="line">del list[2]</span><br><span class="line">print ("删除第三个元素 : ", list)</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原始列表 :  ['Google', 'Runoob', 1997, 2000]</span><br><span class="line">删除第三个元素 :  ['Google', 'Runoob', 2000]</span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong>我们会在接下来的章节讨论 remove() 方法的使用</p><hr><h2 id="Python列表脚本操作符"><a href="#Python列表脚本操作符" class="headerlink" title="Python列表脚本操作符"></a>Python列表脚本操作符</h2><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</p><p>如下所示：</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1, 2, 3]</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print(x, end=” “)</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><hr><h2 id="Python列表截取与拼接"><a href="#Python列表截取与拼接" class="headerlink" title="Python列表截取与拼接"></a>Python列表截取与拼接</h2><p>Python的列表截取与字符串操作类型，如下所示：</p><p>L=[‘Google’, ‘Runoob’, ‘Taobao’]</p><p>操作：</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">L[2]</td><td align="left">‘Taobao’</td><td align="left">读取第三个元素</td></tr><tr><td align="left">L[-2]</td><td align="left">‘Runoob’</td><td align="left">从右侧开始读取倒数第二个元素: count from the right</td></tr><tr><td align="left">L[1:]</td><td align="left">[‘Runoob’, ‘Taobao’]</td><td align="left">输出从第二个元素开始后的所有元素</td></tr></tbody></table><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;L=['Google', 'Runoob', 'Taobao']</span><br><span class="line">&gt;&gt;&gt; L[2]</span><br><span class="line">'Taobao'</span><br><span class="line">&gt;&gt;&gt; L[-2]</span><br><span class="line">'Runoob'</span><br><span class="line">&gt;&gt;&gt; L[1:]</span><br><span class="line">['Runoob', 'Taobao']</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure><p>列表还支持拼接操作：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;squares = [1, 4, 9, 16, 25]</span><br><span class="line">&gt;&gt;&gt; squares += [36, 49, 64, 81, 100]</span><br><span class="line">&gt;&gt;&gt; squares</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><p>使用嵌套列表即在列表里创建其它列表，例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = ['a', 'b', 'c']</span><br><span class="line">&gt;&gt;&gt; n = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; x = [a, n]</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">[['a', 'b', 'c'], [1, 2, 3]]</span><br><span class="line">&gt;&gt;&gt; x[0]</span><br><span class="line">['a', 'b', 'c']</span><br><span class="line">&gt;&gt;&gt; x[0][1]</span><br><span class="line">'b'</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="列表比较"><a href="#列表比较" class="headerlink" title="列表比较"></a>列表比较</h2><p>列表比较需要引入 <strong>operator</strong> 模块的 <strong>eq</strong> 方法：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 导入 operator 模块</span><br><span class="line">import operator</span><br><span class="line"></span><br><span class="line">a = [1, 2]</span><br><span class="line">b = [2, 3]</span><br><span class="line">c = [2, 3]</span><br><span class="line">print("operator.eq(a,b): ", operator.eq(a,b))</span><br><span class="line">print("operator.eq(c,b): ", operator.eq(c,b))</span><br></pre></td></tr></tbody></table></figure><p>以上代码输出结果为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">operator.eq(a,b):  False</span><br><span class="line">operator.eq(c,b):  True</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Python列表函数-amp-方法"><a href="#Python列表函数-amp-方法" class="headerlink" title="Python列表函数&amp;方法"></a>Python列表函数&amp;方法</h2><p>Python包含以下函数:</p><table><thead><tr><th align="left">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-len.html">len(list)</a> 列表元素个数</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-max.html">max(list)</a> 返回列表元素最大值</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-min.html">min(list)</a> 返回列表元素最小值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(seq)</a> 将元组转换为列表</td></tr></tbody></table><p>Python包含以下方法:</p><table><thead><tr><th align="left">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-append.html">list.append(obj)</a> 在列表末尾添加新的对象</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-count.html">list.count(obj)</a> 统计某个元素在列表中出现的次数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-extend.html">list.extend(seq)</a> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-index.html">list.index(obj)</a> 从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-insert.html">list.insert(index, obj)</a> 将对象插入列表</td></tr><tr><td align="left">6</td><td align="left">[list.pop(<a href="https://www.runoob.com/python3/python3-att-list-pop.html">index=-1])</a> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-remove.html">list.remove(obj)</a> 移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-reverse.html">list.reverse()</a> 反向列表中元素</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-sort.html">list.sort( key=None, reverse=False)</a> 对原列表进行排序</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-clear.html">list.clear()</a> 清空列表</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-copy.html">list.copy()</a> 复制列表</td></tr></tbody></table><h1 id="Python3-元组"><a href="#Python3-元组" class="headerlink" title="Python3 元组"></a>Python3 元组</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;笔记&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://yousa.love/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python3数字、字符串</title>
    <link href="https://yousa.love/2023/06/03/Python3%E6%95%B0%E5%AD%97/"/>
    <id>https://yousa.love/2023/06/03/Python3%E6%95%B0%E5%AD%97/</id>
    <published>2023-06-03T12:41:41.000Z</published>
    <updated>2023-06-03T12:55:35.483Z</updated>
    
    <content type="html"><![CDATA[<p><strong>笔记</strong></p><span id="more"></span><h1 id="Python3-数字"><a href="#Python3-数字" class="headerlink" title="Python3 数字"></a>Python3 数字</h1><p>Python 数字数据类型用于存储数值。</p><p>数据类型是不允许改变的,这就意味着如果改变数字数据类型的值，将重新分配内存空间。</p><p>以下实例在变量赋值时 Number 对象将被创建：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1 = 1</span><br><span class="line">var2 = 10</span><br></pre></td></tr></tbody></table></figure><p>您也可以使用del语句删除一些数字对象的引用。</p><p>del语句的语法是：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del var1[,var2[,var3[....,varN]]]</span><br></pre></td></tr></tbody></table></figure><p>您可以通过使用del语句删除单个或多个对象的引用，例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del var</span><br><span class="line">del var_a, var_b</span><br></pre></td></tr></tbody></table></figure><p>Python 支持三种不同的数值类型：</p><ul><li><strong>整型(int)</strong> - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。布尔(bool)是整型的子类型。</li><li><strong>浮点型(float)</strong> - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）</li><li><strong>复数( (complex))</strong> - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</li></ul><p>我们可以使用十六进制和八进制来代表整数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; number = 0xA0F # 十六进制</span><br><span class="line">&gt;&gt;&gt; number</span><br><span class="line">2575</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; number=0o37 # 八进制</span><br><span class="line">&gt;&gt;&gt; number</span><br><span class="line">31</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th align="left">int</th><th align="left">float</th><th align="left">complex</th></tr></thead><tbody><tr><td align="left">10</td><td align="left">0.0</td><td align="left">3.14j</td></tr><tr><td align="left">100</td><td align="left">15.20</td><td align="left">45.j</td></tr><tr><td align="left">-786</td><td align="left">-21.9</td><td align="left">9.322e-36j</td></tr><tr><td align="left">080</td><td align="left">32.3e+18</td><td align="left">.876j</td></tr><tr><td align="left">-0490</td><td align="left">-90.</td><td align="left">-.6545+0J</td></tr><tr><td align="left">-0x260</td><td align="left">-32.54e100</td><td align="left">3e+26J</td></tr><tr><td align="left">0x69</td><td align="left">70.2E-12</td><td align="left">4.53e-7j</td></tr></tbody></table><ul><li>Python支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</li></ul><hr><h2 id="Python-数字类型转换"><a href="#Python-数字类型转换" class="headerlink" title="Python 数字类型转换"></a>Python 数字类型转换</h2><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><ul><li><strong>int(x)</strong> 将x转换为一个整数。</li><li><strong>float(x)</strong> 将x转换到一个浮点数。</li><li><strong>complex(x)</strong> 将x转换到一个复数，实数部分为 x，虚数部分为 0。</li><li><strong>complex(x, y)</strong> 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</li></ul><p>以下实例将浮点数变量 a 转换为整数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = 1.0</span><br><span class="line">&gt;&gt;&gt; int(a)</span><br><span class="line">1</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Python-数字运算"><a href="#Python-数字运算" class="headerlink" title="Python 数字运算"></a>Python 数字运算</h2><p>Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。</p><p>表达式的语法很直白： <strong>+</strong>, <strong>-</strong>, ***** 和 <strong>/</strong>, 和其它语言（如Pascal或C）里一样。例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 2 + 2</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; 50 - 5*6</span><br><span class="line">20</span><br><span class="line">&gt;&gt;&gt; (50 - 5*6) / 4</span><br><span class="line">5.0</span><br><span class="line">&gt;&gt;&gt; 8 / 5  # 总是返回一个浮点数</span><br><span class="line">1.6</span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong>在不同的机器上浮点运算的结果可能会不一样。</p><p>在整数除法中，除法 <strong>/</strong> 总是返回一个浮点数，如果只想得到整数的结果，丢弃可能的分数部分，可以使用运算符 <strong>//</strong> ：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 17 / 3  # 整数除法返回浮点型</span><br><span class="line">5.666666666666667</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; 17 // 3  # 整数除法返回向下取整后的结果</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; 17 % 3  # ％操作符返回除法的余数</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 5 * 3 + 2 </span><br><span class="line">17</span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong><strong>//</strong> 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 7//2</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; 7.0//2</span><br><span class="line">3.0</span><br><span class="line">&gt;&gt;&gt; 7//2.0</span><br><span class="line">3.0</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></tbody></table></figure><p>等号 <strong>=</strong> 用于给变量赋值。赋值之后，除了下一个提示符，解释器不会显示任何结果。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; width = 20</span><br><span class="line">&gt;&gt;&gt; height = 5*9</span><br><span class="line">&gt;&gt;&gt; width * height</span><br><span class="line">900</span><br></pre></td></tr></tbody></table></figure><p>Python 可以使用 *<strong>*</strong> 操作来进行幂运算：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 5 ** 2  # 5 的平方</span><br><span class="line">25</span><br><span class="line">&gt;&gt;&gt; 2 ** 7  # 2的7次方</span><br><span class="line">128</span><br></pre></td></tr></tbody></table></figure><p>变量在使用前必须先”定义”（即赋予变量一个值），否则会出现错误：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; n   # 尝试访问一个未定义的变量</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span><br><span class="line">NameError: name 'n' is not defined</span><br></pre></td></tr></tbody></table></figure><p>不同类型的数混合运算时会将整数转换为浮点数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 3 * 3.75 / 1.5</span><br><span class="line">7.5</span><br><span class="line">&gt;&gt;&gt; 7.0 / 2</span><br><span class="line">3.5</span><br></pre></td></tr></tbody></table></figure><p>在交互模式中，最后被输出的表达式结果被赋值给变量 <strong>_</strong> 。例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tax = 12.5 / 100</span><br><span class="line">&gt;&gt;&gt; price = 100.50</span><br><span class="line">&gt;&gt;&gt; price * tax</span><br><span class="line">12.5625</span><br><span class="line">&gt;&gt;&gt; price + _</span><br><span class="line">113.0625</span><br><span class="line">&gt;&gt;&gt; round(_, 2)</span><br><span class="line">113.06</span><br></pre></td></tr></tbody></table></figure><p>此处， <strong>_</strong> 变量应被用户视为只读变量。</p><hr><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><table><thead><tr><th align="left">函数</th><th align="left">返回值 ( 描述 )</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-abs.html">abs(x)</a></td><td align="left">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-ceil.html">ceil(x)</a></td><td align="left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td align="left">cmp(x, y)</td><td align="left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 <strong>Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换</strong>。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-exp.html">exp(x)</a></td><td align="left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-fabs.html">fabs(x)</a></td><td align="left">以浮点数形式返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-floor.html">floor(x)</a></td><td align="left">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-log.html">log(x)</a></td><td align="left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-log10.html">log10(x)</a></td><td align="left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-max.html">max(x1, x2,…)</a></td><td align="left">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-min.html">min(x1, x2,…)</a></td><td align="left">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-modf.html">modf(x)</a></td><td align="left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-pow.html">pow(x, y)</a></td><td align="left">x**y 运算后的值。</td></tr><tr><td align="left">[round(x <a href="https://www.runoob.com/python3/python3-func-number-round.html">,n])</a></td><td align="left">返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-sqrt.html">sqrt(x)</a></td><td align="left">返回数字x的平方根。</td></tr></tbody></table><hr><h2 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h2><p>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</p><p>Python包含以下常用随机数函数：</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-choice.html">choice(seq)</a></td><td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td align="left">[randrange (<a href="https://www.runoob.com/python3/python3-func-number-randrange.html">start,] stop [,step])</a></td><td align="left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-random.html">random()</a></td><td align="left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td align="left">[seed(<a href="https://www.runoob.com/python3/python3-func-number-seed.html">x])</a></td><td align="left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-shuffle.html">shuffle(lst)</a></td><td align="left">将序列的所有元素随机排序</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-uniform.html">uniform(x, y)</a></td><td align="left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table><hr><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><p>Python包括以下三角函数：</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-acos.html">acos(x)</a></td><td align="left">返回x的反余弦弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-asin.html">asin(x)</a></td><td align="left">返回x的反正弦弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-atan.html">atan(x)</a></td><td align="left">返回x的反正切弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-atan2.html">atan2(y, x)</a></td><td align="left">返回给定的 X 及 Y 坐标值的反正切值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-cos.html">cos(x)</a></td><td align="left">返回x的弧度的余弦值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-hypot.html">hypot(x, y)</a></td><td align="left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-sin.html">sin(x)</a></td><td align="left">返回的x弧度的正弦值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-tan.html">tan(x)</a></td><td align="left">返回x弧度的正切值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-degrees.html">degrees(x)</a></td><td align="left">将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-radians.html">radians(x)</a></td><td align="left">将角度转换为弧度</td></tr></tbody></table><hr><h2 id="数学常量"><a href="#数学常量" class="headerlink" title="数学常量"></a>数学常量</h2><table><thead><tr><th align="left">常量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pi</td><td align="left">数学常量 pi（圆周率，一般以π来表示）</td></tr><tr><td align="left">e</td><td align="left">数学常量 e，e即自然常数（自然常数）。</td></tr></tbody></table><hr><h1 id="Python3-字符串"><a href="#Python3-字符串" class="headerlink" title="Python3 字符串"></a>Python3 字符串</h1><p>字符串是 Python 中最常用的数据类型。我们可以使用引号( <strong>‘</strong> 或 <strong>“</strong> )来创建字符串。</p><p>创建字符串很简单，只要为变量分配一个值即可。例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1 = 'Hello World!'</span><br><span class="line">var2 = "Runoob"</span><br></pre></td></tr></tbody></table></figure><h2 id="Python-访问字符串中的值"><a href="#Python-访问字符串中的值" class="headerlink" title="Python 访问字符串中的值"></a>Python 访问字符串中的值</h2><p>Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</p><p>Python 访问子字符串，可以使用方括号 <strong>[]</strong> 来截取字符串，字符串的截取的语法格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量[头下标:尾下标]</span><br></pre></td></tr></tbody></table></figure><p>索引值以 <strong>0</strong> 为开始值，**-1** 为从末尾的开始位置。</p><p><a href="https://pic.imgdb.cn/item/647b2a61f024cca1731c8c36.jpg"><img src="https://pic.imgdb.cn/item/647b2a61f024cca1731c8c36.jpg"></a></p><p><a href="https://pic.imgdb.cn/item/647b35d5f024cca173293f7f.jpg"><img src="https://pic.imgdb.cn/item/647b35d5f024cca173293f7f.jpg"></a></p><p>如下实例：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var1 = 'Hello World!'</span><br><span class="line">var2 = "Runoob"</span><br><span class="line"> </span><br><span class="line">print ("var1[0]: ", var1[0])</span><br><span class="line">print ("var2[1:5]: ", var2[1:5])</span><br></pre></td></tr></tbody></table></figure><p>以上实例执行结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1[0]:  H</span><br><span class="line">var2[1:5]:  unoo</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Python-字符串更新"><a href="#Python-字符串更新" class="headerlink" title="Python 字符串更新"></a>Python 字符串更新</h2><p>你可以截取字符串的一部分并与其他字段拼接，如下实例：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var1 = 'Hello World!'</span><br><span class="line"> </span><br><span class="line">print ("已更新字符串 : ", var1[:6] + 'Runoob!')</span><br></pre></td></tr></tbody></table></figure><p>以上实例执行结果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已更新字符串 :  Hello Runoob!</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Python-转义字符"><a href="#Python-转义字符" class="headerlink" title="Python 转义字符"></a>Python 转义字符</h2><p>在需要在字符中使用特殊字符时，python 用反斜杠<code>\</code>转义字符。如下表：</p><table><thead><tr><th align="left">转义字符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">\在行尾时</td><td align="left">续行符</td><td align="left"><code>&gt;&gt;&gt; print("line1 \ ... line2 \ ... line3") line1 line2 line3 &gt;&gt;&gt; </code></td></tr><tr><td align="left"><code>\\</code></td><td align="left">反斜杠符号</td><td align="left"><code>&gt;&gt;&gt; print("\\") \</code></td></tr><tr><td align="left"><code>\'</code></td><td align="left">单引号</td><td align="left"><code>&gt;&gt;&gt; print('\'') '</code></td></tr><tr><td align="left"><code>\"</code></td><td align="left">双引号</td><td align="left"><code>&gt;&gt;&gt; print("\"") "</code></td></tr><tr><td align="left">\a</td><td align="left">响铃</td><td align="left"><code>&gt;&gt;&gt; print("\a")</code>执行后电脑有响声。</td></tr><tr><td align="left">\b</td><td align="left">退格(Backspace)</td><td align="left"><code>&gt;&gt;&gt; print("Hello \b World!") Hello World!</code></td></tr><tr><td align="left">\000</td><td align="left">空</td><td align="left"><code>&gt;&gt;&gt; print("\000") &gt;&gt;&gt; </code></td></tr><tr><td align="left">\n</td><td align="left">换行</td><td align="left"><code>&gt;&gt;&gt; print("\n")  &gt;&gt;&gt;</code></td></tr><tr><td align="left">\v</td><td align="left">纵向制表符</td><td align="left"><code>&gt;&gt;&gt; print("Hello \v World!") Hello        World! &gt;&gt;&gt;</code></td></tr><tr><td align="left">\t</td><td align="left">横向制表符</td><td align="left"><code>&gt;&gt;&gt; print("Hello \t World!") Hello    World! &gt;&gt;&gt;</code></td></tr><tr><td align="left">\r</td><td align="left">回车，将 <strong>\r</strong> 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 <strong>\r</strong> 后面的内容完全替换完成。</td><td align="left"><code>&gt;&gt;&gt; print("Hello\rWorld!") World! &gt;&gt;&gt; print('google runoob taobao\r123456') 123456 runoob taobao</code></td></tr><tr><td align="left">\f</td><td align="left">换页</td><td align="left"><code>&gt;&gt;&gt; print("Hello \f World!") Hello        World! &gt;&gt;&gt; </code></td></tr><tr><td align="left">\yyy</td><td align="left">八进制数，y 代表 0~7 的字符，例如：\012 代表换行。</td><td align="left"><code>&gt;&gt;&gt; print("\110\145\154\154\157\40\127\157\162\154\144\41") Hello World!</code></td></tr><tr><td align="left">\xyy</td><td align="left">十六进制数，以 \x 开头，y 代表的字符，例如：\x0a 代表换行</td><td align="left"><code>&gt;&gt;&gt; print("\x48\x65\x6c\x6c\x6f\x20\x57\x6f\x72\x6c\x64\x21") Hello World!</code></td></tr><tr><td align="left">\other</td><td align="left">其它的字符以普通格式输出</td><td align="left"></td></tr></tbody></table><p>使用 <strong>\r</strong> 实现百分比进度：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">for i in range(101):</span><br><span class="line">    print("\r{:3}%".format(i),end=' ')</span><br><span class="line">    time.sleep(0.05)</span><br></pre></td></tr></tbody></table></figure><p>以下实例，我们使用了不同的转义字符来演示单引号、换行符、制表符、退格符、换页符、ASCII、二进制、八进制数和十六进制数的效果：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">print('\'Hello, world!\'')  # 输出：'Hello, world!'</span><br><span class="line"></span><br><span class="line">print("Hello, world!\nHow are you?")  # 输出：Hello, world!</span><br><span class="line">                                        #       How are you?</span><br><span class="line"></span><br><span class="line">print("Hello, world!\tHow are you?")  # 输出：Hello, world!    How are you?</span><br><span class="line"></span><br><span class="line">print("Hello,\b world!")  # 输出：Hello world!</span><br><span class="line"></span><br><span class="line">print("Hello,\f world!")  # 输出：</span><br><span class="line">                           # Hello,</span><br><span class="line">                           #  world!</span><br><span class="line"></span><br><span class="line">print("A 对应的 ASCII 值为：", ord('A'))  # 输出：A 对应的 ASCII 值为： 65</span><br><span class="line"></span><br><span class="line">print("\x41 为 A 的 ASCII 代码")  # 输出：A 为 A 的 ASCII 代码</span><br><span class="line"></span><br><span class="line">decimal_number = 42</span><br><span class="line">binary_number = bin(decimal_number)  # 十进制转换为二进制</span><br><span class="line">print('转换为二进制:', binary_number)  # 转换为二进制: 0b101010</span><br><span class="line"></span><br><span class="line">octal_number = oct(decimal_number)  # 十进制转换为八进制</span><br><span class="line">print('转换为八进制:', octal_number)  # 转换为八进制: 0o52</span><br><span class="line"></span><br><span class="line">hexadecimal_number = hex(decimal_number)  # 十进制转换为十六进制</span><br><span class="line">print('转换为十六进制:', hexadecimal_number) # 转换为十六进制: 0x2a</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Python-字符串运算符"><a href="#Python-字符串运算符" class="headerlink" title="Python 字符串运算符"></a>Python 字符串运算符</h2><p>下表实例变量 a 值为字符串 “Hello”，b 变量值为 “Python”：</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">字符串连接</td><td align="left">a + b 输出结果： HelloPython</td></tr><tr><td align="left">*</td><td align="left">重复输出字符串</td><td align="left">a*2 输出结果：HelloHello</td></tr><tr><td align="left">[]</td><td align="left">通过索引获取字符串中字符</td><td align="left">a[1] 输出结果 <strong>e</strong></td></tr><tr><td align="left">[ : ]</td><td align="left">截取字符串中的一部分，遵循<strong>左闭右开</strong>原则，str[0:2] 是不包含第 3 个字符的。</td><td align="left">a[1:4] 输出结果 <strong>ell</strong></td></tr><tr><td align="left">in</td><td align="left">成员运算符 - 如果字符串中包含给定的字符返回 True</td><td align="left"><strong>‘H’ in a</strong> 输出结果 True</td></tr><tr><td align="left">not in</td><td align="left">成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td align="left"><strong>‘M’ not in a</strong> 输出结果 True</td></tr><tr><td align="left">r/R</td><td align="left">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 <strong>r</strong>（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td><td align="left"><code>print( r'\n' ) print( R'\n' )</code></td></tr><tr><td align="left">%</td><td align="left">格式字符串</td><td align="left">请看下一节内容。</td></tr></tbody></table><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a = "Hello"</span><br><span class="line">b = "Python"</span><br><span class="line"> </span><br><span class="line">print("a + b 输出结果：", a + b)</span><br><span class="line">print("a * 2 输出结果：", a * 2)</span><br><span class="line">print("a[1] 输出结果：", a[1])</span><br><span class="line">print("a[1:4] 输出结果：", a[1:4])</span><br><span class="line"> </span><br><span class="line">if( "H" in a) :</span><br><span class="line">    print("H 在变量 a 中")</span><br><span class="line">else :</span><br><span class="line">    print("H 不在变量 a 中")</span><br><span class="line"> </span><br><span class="line">if( "M" not in a) :</span><br><span class="line">    print("M 不在变量 a 中")</span><br><span class="line">else :</span><br><span class="line">    print("M 在变量 a 中")</span><br><span class="line"> </span><br><span class="line">print (r'\n')</span><br><span class="line">print (R'\n')</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a + b 输出结果： HelloPython</span><br><span class="line">a * 2 输出结果： HelloHello</span><br><span class="line">a[1] 输出结果： e</span><br><span class="line">a[1:4] 输出结果： ell</span><br><span class="line">H 在变量 a 中</span><br><span class="line">M 不在变量 a 中</span><br><span class="line">\n</span><br><span class="line">\n</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Python-字符串格式化"><a href="#Python-字符串格式化" class="headerlink" title="Python 字符串格式化"></a>Python 字符串格式化</h2><p>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。</p><p>在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print ("我叫 %s 今年 %d 岁!" % ('小明', 10))</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我叫 小明 今年 10 岁!</span><br></pre></td></tr></tbody></table></figure><p>python字符串格式化符号:</p><table><thead><tr><th align="left">符  号</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%c</td><td align="left">格式化字符及其ASCII码</td></tr><tr><td align="left">%s</td><td align="left">格式化字符串</td></tr><tr><td align="left">%d</td><td align="left">格式化整数</td></tr><tr><td align="left">%u</td><td align="left">格式化无符号整型</td></tr><tr><td align="left">%o</td><td align="left">格式化无符号八进制数</td></tr><tr><td align="left">%x</td><td align="left">格式化无符号十六进制数</td></tr><tr><td align="left">%X</td><td align="left">格式化无符号十六进制数（大写）</td></tr><tr><td align="left">%f</td><td align="left">格式化浮点数字，可指定小数点后的精度</td></tr><tr><td align="left">%e</td><td align="left">用科学计数法格式化浮点数</td></tr><tr><td align="left">%E</td><td align="left">作用同%e，用科学计数法格式化浮点数</td></tr><tr><td align="left">%g</td><td align="left">%f和%e的简写</td></tr><tr><td align="left">%G</td><td align="left">%f 和 %E 的简写</td></tr><tr><td align="left">%p</td><td align="left">用十六进制数格式化变量的地址</td></tr></tbody></table><p>格式化操作符辅助指令:</p><table><thead><tr><th align="left">符号</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">定义宽度或者小数点精度</td></tr><tr><td align="left">-</td><td align="left">用做左对齐</td></tr><tr><td align="left">+</td><td align="left">在正数前面显示加号( + )</td></tr><tr><td align="left"><sp></sp></td><td align="left">在正数前面显示空格</td></tr><tr><td align="left">#</td><td align="left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td align="left">0</td><td align="left">显示的数字前面填充’0’而不是默认的空格</td></tr><tr><td align="left">%</td><td align="left">‘%%’输出一个单一的’%’</td></tr><tr><td align="left">(var)</td><td align="left">映射变量(字典参数)</td></tr><tr><td align="left">m.n.</td><td align="left">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table><p>Python2.6 开始，新增了一种格式化字符串的函数 <a href="https://www.runoob.com/python/att-string-format.html">str.format()</a>，它增强了字符串格式化的功能。</p><hr><h2 id="Python三引号"><a href="#Python三引号" class="headerlink" title="Python三引号"></a>Python三引号</h2><p>python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。实例如下</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">para_str = """这是一个多行字符串的实例</span><br><span class="line">多行字符串可以使用制表符</span><br><span class="line">TAB ( \t )。</span><br><span class="line">也可以使用换行符 [ \n ]。</span><br><span class="line">"""</span><br><span class="line">print (para_str)</span><br></pre></td></tr></tbody></table></figure><p>以上实例执行结果为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是一个多行字符串的实例</span><br><span class="line">多行字符串可以使用制表符</span><br><span class="line">TAB (    )。</span><br><span class="line">也可以使用换行符 [ </span><br><span class="line"> ]。</span><br></pre></td></tr></tbody></table></figure><p>三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。</p><p>一个典型的用例是，当你需要一块HTML或者SQL时，这时用字符串组合，特殊字符串转义将会非常的繁琐。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">errHTML = '''</span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span><br><span class="line">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span><br><span class="line">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span><br><span class="line">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span><br><span class="line">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span><br><span class="line">ONCLICK="window.history.back()"&gt;&lt;/FORM&gt;</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="line">'''</span><br><span class="line">cursor.execute('''</span><br><span class="line">CREATE TABLE users (  </span><br><span class="line">login VARCHAR(8), </span><br><span class="line">uid INTEGER,</span><br><span class="line">prid INTEGER)</span><br><span class="line">''')</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="f-string"><a href="#f-string" class="headerlink" title="f-string"></a>f-string</h2><p>f-string 是 python3.6 之后版本添加的，称之为字面量格式化字符串，是新的格式化字符串的语法。</p><p>之前我们习惯用百分号 (%):</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name = 'Runoob'</span><br><span class="line">&gt;&gt;&gt; 'Hello %s' % name</span><br><span class="line">'Hello Runoob'</span><br></pre></td></tr></tbody></table></figure><p><strong>f-string</strong> 格式化字符串以 <strong>f</strong> 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去，实例如下：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name = 'Runoob'</span><br><span class="line">&gt;&gt;&gt; f'Hello {name}'  # 替换变量</span><br><span class="line">'Hello Runoob'</span><br><span class="line">&gt;&gt;&gt; f'{1+2}'         # 使用表达式</span><br><span class="line">'3'</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; w = {'name': 'Runoob', 'url': 'www.runoob.com'}</span><br><span class="line">&gt;&gt;&gt; f'{w["name"]}: {w["url"]}'</span><br><span class="line">'Runoob: www.runoob.com'</span><br></pre></td></tr></tbody></table></figure><p>用了这种方式明显更简单了，不用再去判断使用 %s，还是 %d。</p><p>在 Python 3.8 的版本中可以使用 <strong>=</strong> 符号来拼接运算表达式与结果：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x = 1</span><br><span class="line">&gt;&gt;&gt; print(f'{x+1}')   # Python 3.6</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x = 1</span><br><span class="line">&gt;&gt;&gt; print(f'{x+1=}')   # Python 3.8</span><br><span class="line">x+1=2</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Unicode-字符串"><a href="#Unicode-字符串" class="headerlink" title="Unicode 字符串"></a>Unicode 字符串</h2><p>在Python2中，普通字符串是以8位ASCII码进行存储的，而Unicode字符串则存储为16位unicode字符串，这样能够表示更多的字符集。使用的语法是在字符串前面加上前缀 <strong>u</strong>。</p><p>在Python3中，所有的字符串都是Unicode字符串。</p><hr><h2 id="Python-的字符串内建函数"><a href="#Python-的字符串内建函数" class="headerlink" title="Python 的字符串内建函数"></a>Python 的字符串内建函数</h2><p>Python 的字符串常用内建函数如下：</p><table><thead><tr><th align="left">序号</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-capitalize.html">capitalize()</a> 将字符串的第一个字符转换为大写</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-center.html">center(width, fillchar)</a>返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-count.html">count(str, beg= 0,end=len(string))</a> 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-decode.html">bytes.decode(encoding=”utf-8”, errors=”strict”)</a> Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-encode.html">encode(encoding=’UTF-8’,errors=’strict’)</a> 以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-endswith.html">endswith(suffix, beg=0, end=len(string))</a> 检查字符串是否以 suffix 结束，如果 beg 或者 end 指定则检查指定的范围内是否以 suffix 结束，如果是，返回 True,否则返回 False。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-expandtabs.html">expandtabs(tabsize=8)</a> 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-find.html">find(str, beg=0, end=len(string))</a> 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-index.html">index(str, beg=0, end=len(string))</a> 跟find()方法一样，只不过如果str不在字符串中会报一个异常。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isalnum.html">isalnum()</a> 如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isalpha.html">isalpha()</a> 如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isdigit.html">isdigit()</a> 如果字符串只包含数字则返回 True 否则返回 False..</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-islower.html">islower()</a> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isnumeric.html">isnumeric()</a> 如果字符串中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isspace.html">isspace()</a> 如果字符串中只包含空白，则返回 True，否则返回 False.</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-istitle.html">istitle()</a> 如果字符串是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isupper.html">isupper()</a> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-join.html">join(seq)</a> 以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-len.html">len(string)</a> 返回字符串长度</td></tr><tr><td align="left">20</td><td align="left">[ljust(width<a href="https://www.runoob.com/python3/python3-string-ljust.html">, fillchar])</a> 返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。</td></tr><tr><td align="left">21</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-lower.html">lower()</a> 转换字符串中所有大写字符为小写.</td></tr><tr><td align="left">22</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-lstrip.html">lstrip()</a> 截掉字符串左边的空格或指定字符。</td></tr><tr><td align="left">23</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-maketrans.html">maketrans()</a> 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td align="left">24</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-max.html">max(str)</a> 返回字符串 str 中最大的字母。</td></tr><tr><td align="left">25</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-min.html">min(str)</a> 返回字符串 str 中最小的字母。</td></tr><tr><td align="left">26</td><td align="left">[replace(old, new <a href="https://www.runoob.com/python3/python3-string-replace.html">, max])</a> 把 将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次。</td></tr><tr><td align="left">27</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rfind.html">rfind(str, beg=0,end=len(string))</a> 类似于 find()函数，不过是从右边开始查找.</td></tr><tr><td align="left">28</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rindex.html">rindex( str, beg=0, end=len(string))</a> 类似于 index()，不过是从右边开始.</td></tr><tr><td align="left">29</td><td align="left">[rjust(width,<a href="https://www.runoob.com/python3/python3-string-rjust.html">, fillchar])</a> 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串</td></tr><tr><td align="left">30</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rstrip.html">rstrip()</a> 删除字符串末尾的空格或指定字符。</td></tr><tr><td align="left">31</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-split.html">split(str=””, num=string.count(str))</a> 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</td></tr><tr><td align="left">32</td><td align="left">[splitlines(<a href="https://www.runoob.com/python3/python3-string-splitlines.html">keepends])</a> 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td align="left">33</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-startswith.html">startswith(substr, beg=0,end=len(string))</a> 检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。</td></tr><tr><td align="left">34</td><td align="left">[strip(<a href="https://www.runoob.com/python3/python3-string-strip.html">chars])</a> 在字符串上执行 lstrip()和 rstrip()</td></tr><tr><td align="left">35</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-swapcase.html">swapcase()</a> 将字符串中大写转换为小写，小写转换为大写</td></tr><tr><td align="left">36</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-title.html">title()</a> 返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td align="left">37</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-translate.html">translate(table, deletechars=””)</a> 根据 table 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中</td></tr><tr><td align="left">38</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-upper.html">upper()</a> 转换字符串中的小写字母为大写</td></tr><tr><td align="left">39</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-zfill.html">zfill (width)</a> 返回长度为 width 的字符串，原字符串右对齐，前面填充0</td></tr><tr><td align="left">40</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isdecimal.html">isdecimal()</a> 检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;笔记&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://yousa.love/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python3运算符</title>
    <link href="https://yousa.love/2023/06/03/Python3%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://yousa.love/2023/06/03/Python3%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2023-06-03T12:28:56.000Z</published>
    <updated>2023-06-03T12:55:50.786Z</updated>
    
    <content type="html"><![CDATA[<p><strong>笔记</strong></p><span id="more"></span><h1 id="Python3-运算符"><a href="#Python3-运算符" class="headerlink" title="Python3 运算符"></a>Python3 运算符</h1><hr><h2 id="什么是运算符？"><a href="#什么是运算符？" class="headerlink" title="什么是运算符？"></a>什么是运算符？</h2><p>本章节主要说明 Python 的运算符。</p><p>举个简单的例子:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 + 5 = 9</span><br></pre></td></tr></tbody></table></figure><p>例子中，<strong>4</strong> 和 <strong>5</strong> 被称为<strong>操作数</strong>，**+** 称为<strong>运算符</strong>。</p><p>Python 语言支持以下类型的运算符:</p><ul><li>算术运算符</li><li>比较（关系）运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算符</li><li>成员运算符</li><li>身份运算符</li><li>运算符优先级</li></ul><p>接下来让我们一个个来学习Python的运算符。</p><hr><h2 id="Python算术运算符"><a href="#Python算术运算符" class="headerlink" title="Python算术运算符"></a>Python算术运算符</h2><p>以下假设变量 <strong>a=10</strong>，变量 <strong>b=21</strong>：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 31</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -11</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 210</td></tr><tr><td align="left">/</td><td align="left">除 - x 除以 y</td><td align="left">b / a 输出结果 2.1</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 1</td></tr><tr><td align="left">**</td><td align="left">幂 - 返回x的y次幂</td><td align="left">a**b 为10的21次方</td></tr><tr><td align="left">//</td><td align="left">取整除 - 往小的方向取整数</td><td align="left"><code>&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 -5</code></td></tr></tbody></table><p>以下实例演示了Python所有算术运算符的操作：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">a = 21</span><br><span class="line">b = 10</span><br><span class="line">c = 0</span><br><span class="line"> </span><br><span class="line">c = a + b</span><br><span class="line">print ("1 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c = a - b</span><br><span class="line">print ("2 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c = a * b</span><br><span class="line">print ("3 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c = a / b</span><br><span class="line">print ("4 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c = a % b</span><br><span class="line">print ("5 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line"># 修改变量 a 、b 、c</span><br><span class="line">a = 2</span><br><span class="line">b = 3</span><br><span class="line">c = a**b </span><br><span class="line">print ("6 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">a = 10</span><br><span class="line">b = 5</span><br><span class="line">c = a//b </span><br><span class="line">print ("7 - c 的值为：", c)</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 - c 的值为： 31</span><br><span class="line">2 - c 的值为： 11</span><br><span class="line">3 - c 的值为： 210</span><br><span class="line">4 - c 的值为： 2.1</span><br><span class="line">5 - c 的值为： 1</span><br><span class="line">6 - c 的值为： 8</span><br><span class="line">7 - c 的值为： 2</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Python比较运算符"><a href="#Python比较运算符" class="headerlink" title="Python比较运算符"></a>Python比较运算符</h2><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">等于 - 比较对象是否相等</td><td align="left">(a == b) 返回 False。</td></tr><tr><td align="left">!=</td><td align="left">不等于 - 比较两个对象是否不相等</td><td align="left">(a != b) 返回 True。</td></tr><tr><td align="left">&gt;</td><td align="left">大于 - 返回x是否大于y</td><td align="left">(a &gt; b) 返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td><td align="left">(a &lt; b) 返回 True。</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于 - 返回x是否大于等于y。</td><td align="left">(a &gt;= b) 返回 False。</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于 - 返回x是否小于等于y。</td><td align="left">(a &lt;= b) 返回 True。</td></tr></tbody></table><p>以下实例演示了Python所有比较运算符的操作：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">a = 21</span><br><span class="line">b = 10</span><br><span class="line">c = 0</span><br><span class="line"> </span><br><span class="line">if ( a == b ):</span><br><span class="line">   print ("1 - a 等于 b")</span><br><span class="line">else:</span><br><span class="line">   print ("1 - a 不等于 b")</span><br><span class="line"> </span><br><span class="line">if ( a != b ):</span><br><span class="line">   print ("2 - a 不等于 b")</span><br><span class="line">else:</span><br><span class="line">   print ("2 - a 等于 b")</span><br><span class="line"> </span><br><span class="line">if ( a &lt; b ):</span><br><span class="line">   print ("3 - a 小于 b")</span><br><span class="line">else:</span><br><span class="line">   print ("3 - a 大于等于 b")</span><br><span class="line"> </span><br><span class="line">if ( a &gt; b ):</span><br><span class="line">   print ("4 - a 大于 b")</span><br><span class="line">else:</span><br><span class="line">   print ("4 - a 小于等于 b")</span><br><span class="line"> </span><br><span class="line"># 修改变量 a 和 b 的值</span><br><span class="line">a = 5</span><br><span class="line">b = 20</span><br><span class="line">if ( a &lt;= b ):</span><br><span class="line">   print ("5 - a 小于等于 b")</span><br><span class="line">else:</span><br><span class="line">   print ("5 - a 大于  b")</span><br><span class="line"> </span><br><span class="line">if ( b &gt;= a ):</span><br><span class="line">   print ("6 - b 大于等于 a")</span><br><span class="line">else:</span><br><span class="line">   print ("6 - b 小于 a")</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 - a 不等于 b</span><br><span class="line">2 - a 不等于 b</span><br><span class="line">3 - a 大于等于 b</span><br><span class="line">4 - a 大于 b</span><br><span class="line">5 - a 小于等于 b</span><br><span class="line">6 - b 大于等于 a</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Python赋值运算符"><a href="#Python赋值运算符" class="headerlink" title="Python赋值运算符"></a>Python赋值运算符</h2><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">简单的赋值运算符</td><td align="left">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="left">+=</td><td align="left">加法赋值运算符</td><td align="left">c += a 等效于 c = c + a</td></tr><tr><td align="left">-=</td><td align="left">减法赋值运算符</td><td align="left">c -= a 等效于 c = c - a</td></tr><tr><td align="left">*=</td><td align="left">乘法赋值运算符</td><td align="left">c *= a 等效于 c = c * a</td></tr><tr><td align="left">/=</td><td align="left">除法赋值运算符</td><td align="left">c /= a 等效于 c = c / a</td></tr><tr><td align="left">%=</td><td align="left">取模赋值运算符</td><td align="left">c %= a 等效于 c = c % a</td></tr><tr><td align="left">**=</td><td align="left">幂赋值运算符</td><td align="left">c **= a 等效于 c = c ** a</td></tr><tr><td align="left">//=</td><td align="left">取整除赋值运算符</td><td align="left">c //= a 等效于 c = c // a</td></tr><tr><td align="left">:=</td><td align="left">海象运算符，可在表达式内部为变量赋值。<strong>Python3.8 版本新增运算符</strong>。</td><td align="left">在这个示例中，赋值表达式可以避免调用 len() 两次:<code>if (n := len(a)) &gt; 10:    print(f"List is too long ({n} elements, expected &lt;= 10)")</code></td></tr></tbody></table><p>以下实例演示了Python所有赋值运算符的操作：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">a = 21</span><br><span class="line">b = 10</span><br><span class="line">c = 0</span><br><span class="line"> </span><br><span class="line">c = a + b</span><br><span class="line">print ("1 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c += a</span><br><span class="line">print ("2 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c *= a</span><br><span class="line">print ("3 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c /= a </span><br><span class="line">print ("4 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c = 2</span><br><span class="line">c %= a</span><br><span class="line">print ("5 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c **= a</span><br><span class="line">print ("6 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c //= a</span><br><span class="line">print ("7 - c 的值为：", c)</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 - c 的值为： 31</span><br><span class="line">2 - c 的值为： 52</span><br><span class="line">3 - c 的值为： 1092</span><br><span class="line">4 - c 的值为： 52.0</span><br><span class="line">5 - c 的值为： 2</span><br><span class="line">6 - c 的值为： 2097152</span><br><span class="line">7 - c 的值为： 99864</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Python位运算符"><a href="#Python位运算符" class="headerlink" title="Python位运算符"></a>Python位运算符</h2><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p><p>下表中变量 a 为 60，b 为 13二进制格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = 0011 1100</span><br><span class="line"></span><br><span class="line">b = 0000 1101</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">a&amp;b = 0000 1100</span><br><span class="line"></span><br><span class="line">a|b = 0011 1101</span><br><span class="line"></span><br><span class="line">a^b = 0011 0001</span><br><span class="line"></span><br><span class="line">~a  = 1100 0011</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td align="left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td align="left">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符：当两对应的二进位相异时，结果为1</td><td align="left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td align="left">~</td><td align="left">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。**~x** 类似于 <strong>-x-1</strong></td><td align="left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td><td align="left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td><td align="left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><p>以下实例演示了Python所有位运算符的操作：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a = 60            # 60 = 0011 1100 </span><br><span class="line">b = 13            # 13 = 0000 1101 </span><br><span class="line">c = 0</span><br><span class="line"> </span><br><span class="line">c = a &amp; b        # 12 = 0000 1100</span><br><span class="line">print ("1 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c = a | b        # 61 = 0011 1101 </span><br><span class="line">print ("2 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c = a ^ b        # 49 = 0011 0001</span><br><span class="line">print ("3 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c = ~a           # -61 = 1100 0011</span><br><span class="line">print ("4 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c = a &lt;&lt; 2       # 240 = 1111 0000</span><br><span class="line">print ("5 - c 的值为：", c)</span><br><span class="line"> </span><br><span class="line">c = a &gt;&gt; 2       # 15 = 0000 1111</span><br><span class="line">print ("6 - c 的值为：", c)</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 - c 的值为： 12</span><br><span class="line">2 - c 的值为： 61</span><br><span class="line">3 - c 的值为： 49</span><br><span class="line">4 - c 的值为： -61</span><br><span class="line">5 - c 的值为： 240</span><br><span class="line">6 - c 的值为： 15</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Python逻辑运算符"><a href="#Python逻辑运算符" class="headerlink" title="Python逻辑运算符"></a>Python逻辑运算符</h2><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">x and y</td><td align="left">布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td><td align="left">(a and b) 返回 20。</td></tr><tr><td align="left">or</td><td align="left">x or y</td><td align="left">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td align="left">(a or b) 返回 10。</td></tr><tr><td align="left">not</td><td align="left">not x</td><td align="left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="left">not(a and b) 返回 False</td></tr></tbody></table><p>以下实例演示了Python所有逻辑运算符的操作：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">b = 20</span><br><span class="line"> </span><br><span class="line">if ( a and b ):</span><br><span class="line">   print ("1 - 变量 a 和 b 都为 true")</span><br><span class="line">else:</span><br><span class="line">   print ("1 - 变量 a 和 b 有一个不为 true")</span><br><span class="line"> </span><br><span class="line">if ( a or b ):</span><br><span class="line">   print ("2 - 变量 a 和 b 都为 true，或其中一个变量为 true")</span><br><span class="line">else:</span><br><span class="line">   print ("2 - 变量 a 和 b 都不为 true")</span><br><span class="line"> </span><br><span class="line"># 修改变量 a 的值</span><br><span class="line">a = 0</span><br><span class="line">if ( a and b ):</span><br><span class="line">   print ("3 - 变量 a 和 b 都为 true")</span><br><span class="line">else:</span><br><span class="line">   print ("3 - 变量 a 和 b 有一个不为 true")</span><br><span class="line"> </span><br><span class="line">if ( a or b ):</span><br><span class="line">   print ("4 - 变量 a 和 b 都为 true，或其中一个变量为 true")</span><br><span class="line">else:</span><br><span class="line">   print ("4 - 变量 a 和 b 都不为 true")</span><br><span class="line"> </span><br><span class="line">if not( a and b ):</span><br><span class="line">   print ("5 - 变量 a 和 b 都为 false，或其中一个变量为 false")</span><br><span class="line">else:</span><br><span class="line">   print ("5 - 变量 a 和 b 都为 true")</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 - 变量 a 和 b 都为 true</span><br><span class="line">2 - 变量 a 和 b 都为 true，或其中一个变量为 true</span><br><span class="line">3 - 变量 a 和 b 有一个不为 true</span><br><span class="line">4 - 变量 a 和 b 都为 true，或其中一个变量为 true</span><br><span class="line">5 - 变量 a 和 b 都为 false，或其中一个变量为 false</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Python成员运算符"><a href="#Python成员运算符" class="headerlink" title="Python成员运算符"></a>Python成员运算符</h2><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">in</td><td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td align="left">not in</td><td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><p>以下实例演示了Python所有成员运算符的操作：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"> </span><br><span class="line">a = 10</span><br><span class="line">b = 20</span><br><span class="line">list = [1, 2, 3, 4, 5 ]</span><br><span class="line"> </span><br><span class="line">if ( a in list ):</span><br><span class="line">   print ("1 - 变量 a 在给定的列表中 list 中")</span><br><span class="line">else:</span><br><span class="line">   print ("1 - 变量 a 不在给定的列表中 list 中")</span><br><span class="line"> </span><br><span class="line">if ( b not in list ):</span><br><span class="line">   print ("2 - 变量 b 不在给定的列表中 list 中")</span><br><span class="line">else:</span><br><span class="line">   print ("2 - 变量 b 在给定的列表中 list 中")</span><br><span class="line"> </span><br><span class="line"># 修改变量 a 的值</span><br><span class="line">a = 2</span><br><span class="line">if ( a in list ):</span><br><span class="line">   print ("3 - 变量 a 在给定的列表中 list 中")</span><br><span class="line">else:</span><br><span class="line">   print ("3 - 变量 a 不在给定的列表中 list 中")</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 - 变量 a 不在给定的列表中 list 中</span><br><span class="line">2 - 变量 b 不在给定的列表中 list 中</span><br><span class="line">3 - 变量 a 在给定的列表中 list 中</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Python身份运算符"><a href="#Python身份运算符" class="headerlink" title="Python身份运算符"></a>Python身份运算符</h2><p>身份运算符用于比较两个对象的存储单元</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">is</td><td align="left">is 是判断两个标识符是不是引用自一个对象</td><td align="left"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td align="left">is not</td><td align="left">is not 是判断两个标识符是不是引用自不同对象</td><td align="left"><strong>x is not y</strong> ， 类似 **id(x) != id(y)**。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><p><strong>注：</strong> <code>id()</code>函数用于获取对象内存地址。</p><p>以下实例演示了Python所有身份运算符的操作：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">a = 20</span><br><span class="line">b = 20</span><br><span class="line"> </span><br><span class="line">if ( a is b ):</span><br><span class="line">   print ("1 - a 和 b 有相同的标识")</span><br><span class="line">else:</span><br><span class="line">   print ("1 - a 和 b 没有相同的标识")</span><br><span class="line"> </span><br><span class="line">if ( id(a) == id(b) ):</span><br><span class="line">   print ("2 - a 和 b 有相同的标识")</span><br><span class="line">else:</span><br><span class="line">   print ("2 - a 和 b 没有相同的标识")</span><br><span class="line"> </span><br><span class="line"># 修改变量 b 的值</span><br><span class="line">b = 30</span><br><span class="line">if ( a is b ):</span><br><span class="line">   print ("3 - a 和 b 有相同的标识")</span><br><span class="line">else:</span><br><span class="line">   print ("3 - a 和 b 没有相同的标识")</span><br><span class="line"> </span><br><span class="line">if ( a is not b ):</span><br><span class="line">   print ("4 - a 和 b 没有相同的标识")</span><br><span class="line">else:</span><br><span class="line">   print ("4 - a 和 b 有相同的标识")</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 - a 和 b 有相同的标识</span><br><span class="line">2 - a 和 b 有相同的标识</span><br><span class="line">3 - a 和 b 没有相同的标识</span><br><span class="line">4 - a 和 b 没有相同的标识</span><br></pre></td></tr></tbody></table></figure><blockquote><p>is 与 == 区别：</p><p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p><p>&gt;&gt;&gt;a = [1, 2, 3] &gt;&gt;&gt; b = a &gt;&gt;&gt; b is a  True &gt;&gt;&gt; b == a True &gt;&gt;&gt; b = a[:] &gt;&gt;&gt; b is a False &gt;&gt;&gt; b == a True</p></blockquote><hr><h2 id="Python运算符优先级"><a href="#Python运算符优先级" class="headerlink" title="Python运算符优先级"></a>Python运算符优先级</h2><p>以下表格列出了从最高到最低优先级的所有运算符， 相同单元格内的运算符具有相同优先级。 运算符均指二元运算，除非特别指出。 相同单元格内的运算符从左至右分组（除了幂运算是从右至左分组）：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>(expressions...)</code>,<code>[expressions...]</code>, <code>{key: value...}</code>, <code>{expressions...}</code></td><td align="left">圆括号的表达式</td></tr><tr><td align="left"><code>x[index]</code>, <code>x[index:index]</code>, <code>x(arguments...)</code>, <code>x.attribute</code></td><td align="left">读取，切片，调用，属性引用</td></tr><tr><td align="left">await x</td><td align="left">await 表达式</td></tr><tr><td align="left"><code>**</code></td><td align="left">乘方(指数)</td></tr><tr><td align="left"><code>+x</code>, <code>-x</code>, <code>~x</code></td><td align="left">正，负，按位非 NOT</td></tr><tr><td align="left"><code>*</code>, <code>@</code>, <code>/</code>, <code>//</code>, <code>%</code></td><td align="left">乘，矩阵乘，除，整除，取余</td></tr><tr><td align="left"><code>+</code>, <code>-</code></td><td align="left">加和减</td></tr><tr><td align="left"><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td><td align="left">移位</td></tr><tr><td align="left"><code>&amp;</code></td><td align="left">按位与 AND</td></tr><tr><td align="left"><code>^</code></td><td align="left">按位异或 XOR</td></tr><tr><td align="left">`</td><td align="left">`</td></tr><tr><td align="left"><code>in,not in, is,is not, &lt;, &lt;=, &gt;, &gt;=, !=, ==</code></td><td align="left">比较运算，包括成员检测和标识号检测</td></tr><tr><td align="left"><code>not x</code></td><td align="left">逻辑非 NOT</td></tr><tr><td align="left"><code>and</code></td><td align="left">逻辑与 AND</td></tr><tr><td align="left"><code>or</code></td><td align="left">逻辑或 OR</td></tr><tr><td align="left"><code>if -- else</code></td><td align="left">条件表达式</td></tr><tr><td align="left"><code>lambda</code></td><td align="left">lambda 表达式</td></tr><tr><td align="left"><code>:=</code></td><td align="left">赋值表达式</td></tr></tbody></table><p>以下实例演示了Python所有运算符优先级的操作：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = 20</span><br><span class="line">b = 10</span><br><span class="line">c = 15</span><br><span class="line">d = 5</span><br><span class="line">e = 0</span><br><span class="line"> </span><br><span class="line">e = (a + b) * c / d       #( 30 * 15 ) / 5</span><br><span class="line">print ("(a + b) * c / d 运算结果为：",  e)</span><br><span class="line"> </span><br><span class="line">e = ((a + b) * c) / d     # (30 * 15 ) / 5</span><br><span class="line">print ("((a + b) * c) / d 运算结果为：",  e)</span><br><span class="line"> </span><br><span class="line">e = (a + b) * (c / d)    # (30) * (15/5)</span><br><span class="line">print ("(a + b) * (c / d) 运算结果为：",  e)</span><br><span class="line"> </span><br><span class="line">e = a + (b * c) / d      #  20 + (150/5)</span><br><span class="line">print ("a + (b * c) / d 运算结果为：",  e)</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(a + b) * c / d 运算结果为： 90.0</span><br><span class="line">((a + b) * c) / d 运算结果为： 90.0</span><br><span class="line">(a + b) * (c / d) 运算结果为： 90.0</span><br><span class="line">a + (b * c) / d 运算结果为： 50.0</span><br></pre></td></tr></tbody></table></figure><p>and 拥有更高优先级:</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = True</span><br><span class="line">y = False</span><br><span class="line">z = False</span><br><span class="line"> </span><br><span class="line">if x or y and z:</span><br><span class="line">    print("yes")</span><br><span class="line">else:</span><br><span class="line">    print("no")</span><br></pre></td></tr></tbody></table></figure><p>以上实例先计算 <strong>y and z</strong> 并返回 False ，然后 <strong>x or False</strong> 返回 True，输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yes</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>注意：</strong>Python3 已不支持 <strong>&lt;&gt;</strong> 运算符，可以使用 <strong>!=</strong> 代替，如果你一定要使用这种比较运算符，可以使用以下的方式：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from __future__ import barry_as_FLUFL</span><br><span class="line">&gt;&gt;&gt; 1 &lt;&gt; 2</span><br><span class="line">True</span><br></pre></td></tr></tbody></table></figure></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;笔记&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://yousa.love/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python3数据类型转换</title>
    <link href="https://yousa.love/2023/06/03/Python3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://yousa.love/2023/06/03/Python3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2023-06-03T12:21:31.000Z</published>
    <updated>2023-06-03T12:53:59.166Z</updated>
    
    <content type="html"><![CDATA[<p><strong>笔记</strong></p><span id="more"></span><h1 id="Python3-数据类型转换"><a href="#Python3-数据类型转换" class="headerlink" title="Python3 数据类型转换"></a>Python3 数据类型转换</h1><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，一般情况下你只需要将数据类型作为函数名即可。</p><p>Python 数据类型转换可以分为两种：</p><ul><li>隐式类型转换 - 自动完成</li><li>显式类型转换 - 需要使用类型函数来转换</li></ul><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>在隐式类型转换中，Python 会自动将一种数据类型转换为另一种数据类型，不需要我们去干预。</p><p>以下实例中，我们对两种不同类型的数据进行运算，较低数据类型（整数）就会转换为较高数据类型（浮点数）以避免数据丢失。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num_int = 123</span><br><span class="line">num_flo = 1.23</span><br><span class="line"></span><br><span class="line">num_new = num_int + num_flo</span><br><span class="line"></span><br><span class="line">print("datatype of num_int:",type(num_int))</span><br><span class="line">print("datatype of num_flo:",type(num_flo))</span><br><span class="line"></span><br><span class="line">print("Value of num_new:",num_new)</span><br><span class="line">print("datatype of num_new:",type(num_new))</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num_int 数据类型为: &lt;class 'int'&gt;</span><br><span class="line">num_flo 数据类型为: &lt;class 'float'&gt;</span><br><span class="line">num_new: 值为: 124.23</span><br><span class="line">num_new 数据类型为: &lt;class 'float'&gt;</span><br></pre></td></tr></tbody></table></figure><p>代码解析：</p><ul><li>实例中我们对两个不同数据类型的变量 <code>num_int</code> 和 <code>num_flo</code> 进行相加运算，并存储在变量 <code>num_new</code> 中。</li><li>然后查看三个变量的数据类型。</li><li>在输出结果中，我们看到 <code>num_int</code> 是 <code>整型（integer）</code> ， <code>num_flo</code> 是 <code>浮点型（float）</code>。</li><li>同样，新的变量 <code>num_new</code> 是 <code>浮点型（float）</code>，这是因为 Python 会将较小的数据类型转换为较大的数据类型，以避免数据丢失。</li></ul><p>我们再看一个实例，整型数据与字符串类型的数据进行相加：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num_int = 123</span><br><span class="line">num_str = "456"</span><br><span class="line"></span><br><span class="line">print("Data type of num_int:",type(num_int))</span><br><span class="line">print("Data type of num_str:",type(num_str))</span><br><span class="line"></span><br><span class="line">print(num_int+num_str)</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_int 数据类型为: &lt;class 'int'&gt;</span><br><span class="line">num_str 数据类型为: &lt;class 'str'&gt;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/runoob-test/test.py", line 7, in &lt;module&gt;</span><br><span class="line">    print(num_int+num_str)</span><br><span class="line">TypeError: unsupported operand type(s) for +: 'int' and 'str'</span><br></pre></td></tr></tbody></table></figure><p>从输出中可以看出，整型和字符串类型运算结果会报错，输出 TypeError。 Python 在这种情况下无法使用隐式转换。</p><p>但是，Python 为这些类型的情况提供了一种解决方案，称为显式转换。</p><h3 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h3><p>在显式类型转换中，用户将对象的数据类型转换为所需的数据类型。 我们使用 int()、float()、str() 等预定义函数来执行显式类型转换。</p><p><strong>int()</strong> 强制转换为整型：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = int(1)   # x 输出结果为 1</span><br><span class="line">y = int(2.8) # y 输出结果为 2</span><br><span class="line">z = int("3") # z 输出结果为 3</span><br></pre></td></tr></tbody></table></figure><p><strong>float()</strong> 强制转换为浮点型：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = float(1)     # x 输出结果为 1.0</span><br><span class="line">y = float(2.8)   # y 输出结果为 2.8</span><br><span class="line">z = float("3")   # z 输出结果为 3.0</span><br><span class="line">w = float("4.2") # w 输出结果为 4.2</span><br></pre></td></tr></tbody></table></figure><p><strong>str()</strong> 强制转换为字符串类型：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = str("s1") # x 输出结果为 's1'</span><br><span class="line">y = str(2)    # y 输出结果为 '2'</span><br><span class="line">z = str(3.0)  # z 输出结果为 '3.0'</span><br></pre></td></tr></tbody></table></figure><p>整型和字符串类型进行运算，就可以用强制类型转换来完成：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">num_int = 123</span><br><span class="line">num_str = "456"</span><br><span class="line"></span><br><span class="line">print("num_int 数据类型为:",type(num_int))</span><br><span class="line">print("类型转换前，num_str 数据类型为:",type(num_str))</span><br><span class="line"></span><br><span class="line">num_str = int(num_str)    # 强制转换为整型</span><br><span class="line">print("类型转换后，num_str 数据类型为:",type(num_str))</span><br><span class="line"></span><br><span class="line">num_sum = num_int + num_str</span><br><span class="line"></span><br><span class="line">print("num_int 与 num_str 相加结果为:",num_sum)</span><br><span class="line">print("sum 数据类型为:",type(num_sum))</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num_int 数据类型为: &lt;class 'int'&gt;</span><br><span class="line">类型转换前，num_str 数据类型为: &lt;class 'str'&gt;</span><br><span class="line">类型转换后，num_str 数据类型为: &lt;class 'int'&gt;</span><br><span class="line">num_int 与 num_str 相加结果为: 579</span><br><span class="line">sum 数据类型为: &lt;class 'int'&gt;</span><br></pre></td></tr></tbody></table></figure><p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[int(x <a href="https://www.runoob.com/python3/python-func-int.html">,base])</a></td><td align="left">将x转换为一个整数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-float.html">float(x)</a></td><td align="left">将x转换到一个浮点数</td></tr><tr><td align="left">[complex(real <a href="https://www.runoob.com/python3/python-func-complex.html">,imag])</a></td><td align="left">创建一个复数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-str.html">str(x)</a></td><td align="left">将对象 x 转换为字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-repr.html">repr(x)</a></td><td align="left">将对象 x 转换为表达式字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-eval.html">eval(str)</a></td><td align="left">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-tuple.html">tuple(s)</a></td><td align="left">将序列 s 转换为一个元组</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(s)</a></td><td align="left">将序列 s 转换为一个列表</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-set.html">set(s)</a></td><td align="left">转换为可变集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-dict.html">dict(d)</a></td><td align="left">创建一个字典。d 必须是一个 (key, value)元组序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-frozenset.html">frozenset(s)</a></td><td align="left">转换为不可变集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-chr.html">chr(x)</a></td><td align="left">将一个整数转换为一个字符</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-ord.html">ord(x)</a></td><td align="left">将一个字符转换为它的整数值</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-hex.html">hex(x)</a></td><td align="left">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-oct.html">oct(x)</a></td><td align="left">将一个整数转换为一个八进制字符串</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;笔记&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://yousa.love/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python3 基本数据类型</title>
    <link href="https://yousa.love/2023/06/03/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://yousa.love/2023/06/03/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-06-03T12:16:54.000Z</published>
    <updated>2023-06-03T12:53:59.174Z</updated>
    
    <content type="html"><![CDATA[<p><strong>笔记</strong></p><span id="more"></span><h1 id="Python3-基本数据类型"><a href="#Python3-基本数据类型" class="headerlink" title="Python3 基本数据类型"></a>Python3 基本数据类型</h1><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</p><p>等号（=）用来给变量赋值。</p><p>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"></span><br><span class="line">counter = 100          # 整型变量</span><br><span class="line">miles   = 1000.0       # 浮点型变量</span><br><span class="line">name    = "runoob"     # 字符串</span><br><span class="line"></span><br><span class="line">print (counter)</span><br><span class="line">print (miles)</span><br><span class="line">print (name)</span><br></pre></td></tr></tbody></table></figure><p>执行以上程序会输出如下结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">1000.0</span><br><span class="line">runoob</span><br></pre></td></tr></tbody></table></figure><h3 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h3><p>Python允许你同时为多个变量赋值。例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = 1</span><br></pre></td></tr></tbody></table></figure><p>以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。</p><p>您也可以为多个对象指定多个变量。例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = 1, 2, "runoob"</span><br></pre></td></tr></tbody></table></figure><p>以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 “runoob” 分配给变量 c。</p><hr><h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><p>Python3 中常见的数据类型有：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>bool（布尔类型）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>此外还有一些高级的数据类型，如: 字节数组类型(bytes)。</p><hr><h2 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h2><p>Python3 支持 <strong>int、float、bool、complex（复数）</strong>。</p><p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p><p>像大多数语言一样，数值类型的赋值和计算都是很直观的。</p><p>内置的 type() 函数可以用来查询变量所指的对象类型。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c, d = 20, 5.5, True, 4+3j</span><br><span class="line">&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))</span><br><span class="line">&lt;class 'int'&gt; &lt;class 'float'&gt; &lt;class 'bool'&gt; &lt;class 'complex'&gt;</span><br></pre></td></tr></tbody></table></figure><p>此外还可以用 <code>isinstance</code> 来判断：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = 111</span><br><span class="line">&gt;&gt;&gt; isinstance(a, int)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure><p><code>isinstance</code> 和 <code>type</code> 的区别在于：</p><ul><li><code>type()</code>不会认为子类是一种父类类型。</li><li><code>isinstance()</code>会认为子类是一种父类类型。</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class A:</span><br><span class="line">...     pass</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; class B(A):</span><br><span class="line">...     pass</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; isinstance(A(), A)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(A()) == A </span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(B(), A)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(B()) == A</span><br><span class="line">False</span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong>Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加， <strong>True==1、False==0</strong> 会返回 <strong>True</strong>，但可以通过 <strong>is</strong> 来判断类型。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; issubclass(bool, int) </span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; True==1</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; False==0</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; True+1</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; False+1</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 1 is True</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 0 is False</span><br><span class="line">False</span><br></pre></td></tr></tbody></table></figure><p>当你指定一个值时，Number 对象就会被创建：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1 = 1</span><br><span class="line">var2 = 10</span><br></pre></td></tr></tbody></table></figure><p>您也可以使用del语句删除一些对象引用。</p><p>del语句的语法是：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del var1[,var2[,var3[....,varN]]]</span><br></pre></td></tr></tbody></table></figure><p>您可以通过使用del语句删除单个或多个对象。例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del var</span><br><span class="line">del var_a, var_b</span><br></pre></td></tr></tbody></table></figure><h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 5 + 4  # 加法</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; 4.3 - 2 # 减法</span><br><span class="line">2.3</span><br><span class="line">&gt;&gt;&gt; 3 * 7  # 乘法</span><br><span class="line">21</span><br><span class="line">&gt;&gt;&gt; 2 / 4  # 除法，得到一个浮点数</span><br><span class="line">0.5</span><br><span class="line">&gt;&gt;&gt; 2 // 4 # 除法，得到一个整数</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; 17 % 3 # 取余</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 2 ** 5 # 乘方</span><br><span class="line">32</span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong></p><ul><li>1、Python可以同时为多个变量赋值，如a, b = 1, 2。</li><li>2、一个变量可以通过赋值指向不同类型的对象。</li><li>3、数值的除法包含两个运算符：**/** 返回一个浮点数，**//** 返回一个整数。</li><li>4、在混合计算时，Python会把整型转换成为浮点数。</li></ul><h3 id="数值类型实例"><a href="#数值类型实例" class="headerlink" title="数值类型实例"></a>数值类型实例</h3><table><thead><tr><th align="left">int</th><th align="left">float</th><th align="left">complex</th></tr></thead><tbody><tr><td align="left">10</td><td align="left">0.0</td><td align="left">3.14j</td></tr><tr><td align="left">100</td><td align="left">15.20</td><td align="left">45.j</td></tr><tr><td align="left">-786</td><td align="left">-21.9</td><td align="left">9.322e-36j</td></tr><tr><td align="left">080</td><td align="left">32.3e+18</td><td align="left">.876j</td></tr><tr><td align="left">-0490</td><td align="left">-90.</td><td align="left">-.6545+0J</td></tr><tr><td align="left">-0x260</td><td align="left">-32.54e100</td><td align="left">3e+26J</td></tr><tr><td align="left">0x69</td><td align="left">70.2E-12</td><td align="left">4.53e-7j</td></tr></tbody></table><p>Python 还支持复数，复数由实数部分和虚数部分构成，可以用 <strong>a + bj</strong>，或者 <strong>complex(a,b)</strong> 表示， 复数的实部 <strong>a</strong> 和虚部 <strong>b</strong> 都是浮点型。</p><hr><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><p>Python中的字符串用单引号 <strong>‘</strong> 或双引号 <strong>“</strong> 括起来，同时使用反斜杠 *<em>*</em> 转义特殊字符。</p><p>字符串的截取的语法格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量[头下标:尾下标]</span><br></pre></td></tr></tbody></table></figure><p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p><p><a href="https://pic.imgdb.cn/item/647b2a61f024cca1731c8c36.jpg"><img src="https://pic.imgdb.cn/item/647b2a61f024cca1731c8c36.jpg"></a></p><p>加号 <strong>+</strong> 是字符串的连接符， 星号 ***** 表示复制当前字符串，与之结合的数字为复制的次数。实例如下：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"></span><br><span class="line">str = 'Runoob'</span><br><span class="line"></span><br><span class="line">print (str)          # 输出字符串</span><br><span class="line">print (str[0:-1])    # 输出第一个到倒数第二个的所有字符</span><br><span class="line">print (str[0])       # 输出字符串第一个字符</span><br><span class="line">print (str[2:5])     # 输出从第三个开始到第五个的字符</span><br><span class="line">print (str[2:])      # 输出从第三个开始的后的所有字符</span><br><span class="line">print (str * 2)      # 输出字符串两次，也可以写成 print (2 * str)</span><br><span class="line">print (str + "TEST") # 连接字符串</span><br></pre></td></tr></tbody></table></figure><p>执行以上程序会输出如下结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Runoob</span><br><span class="line">Runoo</span><br><span class="line">R</span><br><span class="line">noo</span><br><span class="line">noob</span><br><span class="line">RunoobRunoob</span><br><span class="line">RunoobTEST</span><br></pre></td></tr></tbody></table></figure><p>Python 使用反斜杠 <code>\</code> 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 <strong>r</strong>，表示原始字符串：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print('Ru\noob')</span><br><span class="line">Ru</span><br><span class="line">oob</span><br><span class="line">&gt;&gt;&gt; print(r'Ru\noob')</span><br><span class="line">Ru\noob</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure><p>另外，反斜杠()可以作为续行符，表示下一行是上一行的延续。也可以使用 <strong>“””…”””</strong> 或者 <strong>‘’’…’’’</strong> 跨越多行。</p><p>注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; word = 'Python'</span><br><span class="line">&gt;&gt;&gt; print(word[0], word[5])</span><br><span class="line">P n</span><br><span class="line">&gt;&gt;&gt; print(word[-1], word[-6])</span><br><span class="line">n P</span><br></pre></td></tr></tbody></table></figure><p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如 <strong>word[0] = ‘m’</strong> 会导致错误。</p><p><strong>注意：</strong></p><ul><li>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>2、字符串可以用+运算符连接在一起，用*运算符重复。</li><li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>4、Python中的字符串不能改变。</li></ul><hr><h2 id="bool（布尔类型）"><a href="#bool（布尔类型）" class="headerlink" title="bool（布尔类型）"></a>bool（布尔类型）</h2><p>布尔类型即 True 或 False。</p><p>在 Python 中，True 和 False 都是关键字，表示布尔值。</p><p>布尔类型可以用来控制程序的流程，比如判断某个条件是否成立，或者在某个条件满足时执行某段代码。</p><p>布尔类型特点：</p><ul><li>布尔类型只有两个值：True 和 False。</li><li>布尔类型可以和其他数据类型进行比较，比如数字、字符串等。在比较时，Python 会将 True 视为 1，False 视为 0。</li><li>布尔类型可以和逻辑运算符一起使用，包括 and、or 和 not。这些运算符可以用来组合多个布尔表达式，生成一个新的布尔值。</li><li>布尔类型也可以被转换成其他数据类型，比如整数、浮点数和字符串。在转换时，True 会被转换成 1，False 会被转换成 0。</li></ul><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = True</span><br><span class="line">b = False</span><br><span class="line"></span><br><span class="line"># 比较运算符</span><br><span class="line">print(2 &lt; 3)   # True</span><br><span class="line">print(2 == 3)  # False</span><br><span class="line"></span><br><span class="line"># 逻辑运算符</span><br><span class="line">print(a and b)  # False</span><br><span class="line">print(a or b)   # True</span><br><span class="line">print(not a)    # False</span><br><span class="line"></span><br><span class="line"># 类型转换</span><br><span class="line">print(int(a))   # 1</span><br><span class="line">print(float(b)) # 0.0</span><br><span class="line">print(str(a))   # "True"</span><br></pre></td></tr></tbody></table></figure><p><strong>注意:</strong> 在 Python 中，所有非零的数字和非空的字符串、列表、元组等数据类型都被视为 True，只有 <strong>0、空字符串、空列表、空元组</strong>等被视为 False。因此，在进行布尔类型转换时，需要注意数据类型的真假性。</p><hr><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号 <strong>[]</strong> 之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p>列表截取的语法格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量[头下标:尾下标]</span><br></pre></td></tr></tbody></table></figure><p>索引值以 <strong>0</strong> 为开始值，**-1** 为从末尾的开始位置。</p><p><a href="https://pic.imgdb.cn/item/647b2b22f024cca1731d4f5a.jpg"><img src="https://pic.imgdb.cn/item/647b2b22f024cca1731d4f5a.jpg"></a></p><p>加号 <strong>+</strong> 是列表连接运算符，星号 ***** 是重复操作。如下实例：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"></span><br><span class="line">list = [ 'abcd', 786 , 2.23, 'runoob', 70.2 ]</span><br><span class="line">tinylist = [123, 'runoob']</span><br><span class="line"></span><br><span class="line">print (list)            # 输出完整列表</span><br><span class="line">print (list[0])         # 输出列表第一个元素</span><br><span class="line">print (list[1:3])       # 从第二个开始输出到第三个元素</span><br><span class="line">print (list[2:])        # 输出从第三个元素开始的所有元素</span><br><span class="line">print (tinylist * 2)    # 输出两次列表</span><br><span class="line">print (list + tinylist) # 连接列表</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">['abcd', 786, 2.23, 'runoob', 70.2]</span><br><span class="line">abcd</span><br><span class="line">[786, 2.23]</span><br><span class="line">[2.23, 'runoob', 70.2]</span><br><span class="line">[123, 'runoob', 123, 'runoob']</span><br><span class="line">['abcd', 786, 2.23, 'runoob', 70.2, 123, 'runoob']</span><br></pre></td></tr></tbody></table></figure><p>与Python字符串不一样的是，列表中的元素是可以改变的：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; a[0] = 9</span><br><span class="line">&gt;&gt;&gt; a[2:5] = [13, 14, 15]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[9, 2, 13, 14, 15, 6]</span><br><span class="line">&gt;&gt;&gt; a[2:5] = []   # 将对应的元素值设置为 []</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[9, 2, 6]</span><br></pre></td></tr></tbody></table></figure><p>List 内置了有很多方法，例如 append()、pop() 等等，这在后面会讲到。</p><p><strong>注意：</strong></p><ul><li>1、List写在方括号之间，元素用逗号隔开。</li><li>2、和字符串一样，list可以被索引和切片。</li><li>3、List可以使用+操作符进行拼接。</li><li>4、List中的元素是可以改变的。</li></ul><p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</p><p><a href="https://pic.imgdb.cn/item/647b2b53f024cca1731da222.jpg"><img src="https://pic.imgdb.cn/item/647b2b53f024cca1731da222.jpg"></a></p><p>如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def reverseWords(input):</span><br><span class="line">     </span><br><span class="line">    # 通过空格将字符串分隔符，把各个单词分隔为列表</span><br><span class="line">    inputWords = input.split(" ")</span><br><span class="line"> </span><br><span class="line">    # 翻转字符串</span><br><span class="line">    # 假设列表 list = [1,2,3,4],  </span><br><span class="line">    # list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)</span><br><span class="line">    # inputWords[-1::-1] 有三个参数</span><br><span class="line">    # 第一个参数 -1 表示最后一个元素</span><br><span class="line">    # 第二个参数为空，表示移动到列表末尾</span><br><span class="line">    # 第三个参数为步长，-1 表示逆向</span><br><span class="line">    inputWords=inputWords[-1::-1]</span><br><span class="line"> </span><br><span class="line">    # 重新组合字符串</span><br><span class="line">    output = ' '.join(inputWords)</span><br><span class="line">     </span><br><span class="line">    return output</span><br><span class="line"> </span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    input = 'I like runoob'</span><br><span class="line">    rw = reverseWords(input)</span><br><span class="line">    print(rw)</span><br></pre></td></tr></tbody></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob like I</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h2><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 <strong>()</strong> 里，元素之间用逗号隔开。</p><p>元组中的元素类型也可以不相同：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"></span><br><span class="line">tuple = ( 'abcd', 786 , 2.23, 'runoob', 70.2  )</span><br><span class="line">tinytuple = (123, 'runoob')</span><br><span class="line"></span><br><span class="line">print (tuple)             # 输出完整元组</span><br><span class="line">print (tuple[0])          # 输出元组的第一个元素</span><br><span class="line">print (tuple[1:3])        # 输出从第二个元素开始到第三个元素</span><br><span class="line">print (tuple[2:])         # 输出从第三个元素开始的所有元素</span><br><span class="line">print (tinytuple * 2)     # 输出两次元组</span><br><span class="line">print (tuple + tinytuple) # 连接元组</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">('abcd', 786, 2.23, 'runoob', 70.2)</span><br><span class="line">abcd</span><br><span class="line">(786, 2.23)</span><br><span class="line">(2.23, 'runoob', 70.2)</span><br><span class="line">(123, 'runoob', 123, 'runoob')</span><br><span class="line">('abcd', 786, 2.23, 'runoob', 70.2, 123, 'runoob')</span><br></pre></td></tr></tbody></table></figure><p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。</p><p>其实，可以把字符串看作一种特殊的元组。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tup = (1, 2, 3, 4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; print(tup[0])</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; print(tup[1:5])</span><br><span class="line">(2, 3, 4, 5)</span><br><span class="line">&gt;&gt;&gt; tup[0] = 11  # 修改元组元素的操作是非法的</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span><br><span class="line">TypeError: 'tuple' object does not support item assignment</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()    # 空元组</span><br><span class="line">tup2 = (20,) # 一个元素，需要在元素后添加逗号</span><br></pre></td></tr></tbody></table></figure><p>string、list 和 tuple 都属于 sequence（序列）。</p><p><strong>注意：</strong></p><ul><li>1、与字符串一样，元组的元素不能修改。</li><li>2、元组也可以被索引和切片，方法一样。</li><li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul><hr><h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p><p>创建格式：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parame = {value01,value02,...}</span><br><span class="line">或者</span><br><span class="line">set(value)</span><br></pre></td></tr></tbody></table></figure><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"></span><br><span class="line">sites = {'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu'}</span><br><span class="line"></span><br><span class="line">print(sites)   # 输出集合，重复的元素被自动去掉</span><br><span class="line"></span><br><span class="line"># 成员测试</span><br><span class="line">if 'Runoob' in sites :</span><br><span class="line">    print('Runoob 在集合中')</span><br><span class="line">else :</span><br><span class="line">    print('Runoob 不在集合中')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># set可以进行集合运算</span><br><span class="line">a = set('abracadabra')</span><br><span class="line">b = set('alacazam')</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(a - b)     # a 和 b 的差集</span><br><span class="line"></span><br><span class="line">print(a | b)     # a 和 b 的并集</span><br><span class="line"></span><br><span class="line">print(a &amp; b)     # a 和 b 的交集</span><br><span class="line"></span><br><span class="line">print(a ^ b)     # a 和 b 中不同时存在的元素</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{'Zhihu', 'Baidu', 'Taobao', 'Runoob', 'Google', 'Facebook'}</span><br><span class="line">Runoob 在集合中</span><br><span class="line">{'b', 'c', 'a', 'r', 'd'}</span><br><span class="line">{'r', 'b', 'd'}</span><br><span class="line">{'b', 'c', 'a', 'z', 'm', 'r', 'l', 'd'}</span><br><span class="line">{'c', 'a'}</span><br><span class="line">{'z', 'b', 'm', 'r', 'l', 'd'}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h2><p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"></span><br><span class="line">dict = {}</span><br><span class="line">dict['one'] = "1 - 菜鸟教程"</span><br><span class="line">dict[2]     = "2 - 菜鸟工具"</span><br><span class="line"></span><br><span class="line">tinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print (dict['one'])       # 输出键为 'one' 的值</span><br><span class="line">print (dict[2])           # 输出键为 2 的值</span><br><span class="line">print (tinydict)          # 输出完整的字典</span><br><span class="line">print (tinydict.keys())   # 输出所有键</span><br><span class="line">print (tinydict.values()) # 输出所有值</span><br></pre></td></tr></tbody></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 - 菜鸟教程</span><br><span class="line">2 - 菜鸟工具</span><br><span class="line">{'name': 'runoob', 'code': 1, 'site': 'www.runoob.com'}</span><br><span class="line">dict_keys(['name', 'code', 'site'])</span><br><span class="line">dict_values(['runoob', 1, 'www.runoob.com'])</span><br></pre></td></tr></tbody></table></figure><p>构造函数 dict() 可以直接从键值对序列中构建字典如下：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)])</span><br><span class="line">{'Runoob': 1, 'Google': 2, 'Taobao': 3}</span><br><span class="line">&gt;&gt;&gt; {x: x**2 for x in (2, 4, 6)}</span><br><span class="line">{2: 4, 4: 16, 6: 36}</span><br><span class="line">&gt;&gt;&gt; dict(Runoob=1, Google=2, Taobao=3)</span><br><span class="line">{'Runoob': 1, 'Google': 2, 'Taobao': 3}</span><br></pre></td></tr></tbody></table></figure><p>**{x: x*<em>2 for x in (2, 4, 6)}</em>* 该代码使用的是字典推导式，更多推导式内容可以参考：Python 推导式：</p><h3 id="Python-推导式"><a href="#Python-推导式" class="headerlink" title="Python 推导式"></a>Python 推导式</h3><p>Python 推导式是一种独特的数据处理方式，可以从一个数据序列构建另一个新的数据序列的结构体。</p><p>Python 支持各种数据结构的推导式：</p><ul><li>列表(list)推导式</li><li>字典(dict)推导式</li><li>集合(set)推导式</li><li>元组(tuple)推导式</li></ul><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><p>列表推导式格式为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[表达式 for 变量 in 列表] </span><br><span class="line">[out_exp_res for out_exp in input_list]</span><br><span class="line"></span><br><span class="line">或者 </span><br><span class="line"></span><br><span class="line">[表达式 for 变量 in 列表 if 条件]</span><br><span class="line">[out_exp_res for out_exp in input_list if condition]</span><br></pre></td></tr></tbody></table></figure><ul><li>out_exp_res：列表生成元素表达式，可以是有返回值的函数。</li><li>for out_exp in input_list：迭代 input_list 将 out_exp 传入到 out_exp_res 表达式中。</li><li>if condition：条件语句，可以过滤列表中不符合条件的值。</li></ul><p>过滤掉长度小于或等于3的字符串列表，并将剩下的转换成大写字母：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; names = ['Bob','Tom','alice','Jerry','Wendy','Smith']</span><br><span class="line">&gt;&gt;&gt; new_names = [name.upper()for name in names if len(name)&gt;3]</span><br><span class="line">&gt;&gt;&gt; print(new_names)</span><br><span class="line">['ALICE', 'JERRY', 'WENDY', 'SMITH']</span><br></pre></td></tr></tbody></table></figure><p>计算 30 以内可以被 3 整除的整数：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; multiples = [i for i in range(30) if i % 3 == 0]</span><br><span class="line">&gt;&gt;&gt; print(multiples)</span><br><span class="line">[0, 3, 6, 9, 12, 15, 18, 21, 24, 27]</span><br></pre></td></tr></tbody></table></figure><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><p>字典推导基本格式：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{ key_expr: value_expr for value in collection }</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">{ key_expr: value_expr for value in collection if condition }</span><br></pre></td></tr></tbody></table></figure><p>使用字符串及其长度创建字典：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listdemo = ['Google','Runoob', 'Taobao']</span><br><span class="line"># 将列表中各字符串值为键，各字符串的长度为值，组成键值对</span><br><span class="line">&gt;&gt;&gt; newdict = {key:len(key) for key in listdemo}</span><br><span class="line">&gt;&gt;&gt; newdict</span><br><span class="line">{'Google': 6, 'Runoob': 6, 'Taobao': 6}</span><br></pre></td></tr></tbody></table></figure><p>提供三个数字，以三个数字为键，三个数字的平方为值来创建字典：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dic = {x: x**2 for x in (2, 4, 6)}</span><br><span class="line">&gt;&gt;&gt; dic</span><br><span class="line">{2: 4, 4: 16, 6: 36}</span><br><span class="line">&gt;&gt;&gt; type(dic)</span><br><span class="line">&lt;class 'dict'&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h4><p>集合推导式基本格式：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{ expression for item in Sequence }</span><br><span class="line">或</span><br><span class="line">{ expression for item in Sequence if conditional }</span><br></pre></td></tr></tbody></table></figure><p>计算数字 1,2,3 的平方数：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; setnew = {i**2 for i in (1,2,3)}</span><br><span class="line">&gt;&gt;&gt; setnew</span><br><span class="line">{1, 4, 9}</span><br></pre></td></tr></tbody></table></figure><p>判断不是 abc 的字母并输出：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = {x for x in 'abracadabra' if x not in 'abc'}</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">{'d', 'r'}</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class 'set'&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="元组推导式（生成器表达式）"><a href="#元组推导式（生成器表达式）" class="headerlink" title="元组推导式（生成器表达式）"></a>元组推导式（生成器表达式）</h4><p>元组推导式可以利用 range 区间、元组、列表、字典和集合等数据类型，快速生成一个满足指定需求的元组。</p><p>元组推导式基本格式：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(expression for item in Sequence )</span><br><span class="line">或</span><br><span class="line">(expression for item in Sequence if conditional )</span><br></pre></td></tr></tbody></table></figure><p>元组推导式和列表推导式的用法也完全相同，只是元组推导式是用 <strong>()</strong> 圆括号将各部分括起来，而列表推导式用的是中括号 **[]**，另外元组推导式返回的结果是一个生成器对象。</p><p>例如，我们可以使用下面的代码生成一个包含数字 1~9 的元组：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = (x for x in range(1,10))</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x7faf6ee20a50&gt;  # 返回的是生成器对象</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; tuple(a)       # 使用 tuple() 函数，可以直接将生成器对象转换成元组</span><br><span class="line">(1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br></pre></td></tr></tbody></table></figure><p>另外，字典类型也有一些内置的函数，例如 clear()、keys()、values() 等。</p><p><strong>注意：</strong></p><ul><li>1、字典是一种映射类型，它的元素是键值对。</li><li>2、字典的关键字必须为不可变类型，且不能重复。</li><li>3、创建空字典使用 **{ }**。</li></ul><hr><h2 id="bytes-类型"><a href="#bytes-类型" class="headerlink" title="bytes 类型"></a>bytes 类型</h2><p>在 Python3 中，bytes 类型表示的是不可变的二进制序列（byte sequence）。</p><p>与字符串类型不同的是，bytes 类型中的元素是整数值（0 到 255 之间的整数），而不是 Unicode 字符。</p><p>bytes 类型通常用于处理二进制数据，比如图像文件、音频文件、视频文件等等。在网络编程中，也经常使用 bytes 类型来传输二进制数据。</p><p>创建 bytes 对象的方式有多种，最常见的方式是使用 b 前缀：</p><p>此外，也可以使用 bytes() 函数将其他类型的对象转换为 bytes 类型。bytes() 函数的第一个参数是要转换的对象，第二个参数是编码方式，如果省略第二个参数，则默认使用 UTF-8 编码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = bytes("hello", encoding="utf-8")</span><br></pre></td></tr></tbody></table></figure><p>与字符串类型类似，bytes 类型也支持许多操作和方法，如切片、拼接、查找、替换等等。同时，由于 bytes 类型是不可变的，因此在进行修改操作时需要创建一个新的 bytes 对象。例如：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = b"hello"</span><br><span class="line">y = x[1:3]  # 切片操作，得到 b"el"</span><br><span class="line">z = x + b"world"  # 拼接操作，得到 b"helloworld"</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，bytes 类型中的元素是整数值，因此在进行比较操作时需要使用相应的整数值。例如：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = b"hello"</span><br><span class="line">if x[0] == ord("h"):</span><br><span class="line">    print("The first element is 'h'")</span><br></pre></td></tr></tbody></table></figure><p>其中 ord() 函数用于将字符转换为相应的整数值。</p><hr><h2 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h2><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[int(x <a href="https://www.runoob.com/python3/python-func-int.html">,base])</a></td><td align="left">将x转换为一个整数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-float.html">float(x)</a></td><td align="left">将x转换到一个浮点数</td></tr><tr><td align="left">[complex(real <a href="https://www.runoob.com/python3/python-func-complex.html">,imag])</a></td><td align="left">创建一个复数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-str.html">str(x)</a></td><td align="left">将对象 x 转换为字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-repr.html">repr(x)</a></td><td align="left">将对象 x 转换为表达式字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-eval.html">eval(str)</a></td><td align="left">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-tuple.html">tuple(s)</a></td><td align="left">将序列 s 转换为一个元组</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(s)</a></td><td align="left">将序列 s 转换为一个列表</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-set.html">set(s)</a></td><td align="left">转换为可变集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-dict.html">dict(d)</a></td><td align="left">创建一个字典。d 必须是一个 (key, value)元组序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-frozenset.html">frozenset(s)</a></td><td align="left">转换为不可变集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-chr.html">chr(x)</a></td><td align="left">将一个整数转换为一个字符</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-ord.html">ord(x)</a></td><td align="left">将一个字符转换为它的整数值</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-hex.html">hex(x)</a></td><td align="left">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-oct.html">oct(x)</a></td><td align="left">将一个整数转换为一个八进制字符串</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;笔记&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://yousa.love/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>CUDA</title>
    <link href="https://yousa.love/2023/05/27/CUDA/"/>
    <id>https://yousa.love/2023/05/27/CUDA/</id>
    <published>2023-05-27T07:58:16.000Z</published>
    <updated>2023-05-27T08:19:58.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CUDA：并行计算的新时代"><a href="#CUDA：并行计算的新时代" class="headerlink" title="CUDA：并行计算的新时代"></a>CUDA：并行计算的新时代</h1><p>CUDA（Compute Unified Device Architecture，计算统一设备架构）是英伟达公司推出的一种显卡计算框架，它可以利用显卡的并行计算能力，提高计算效率，实现各种复杂的计算任务。本文将简单介绍CUDA的基本原理和应用。</p><span id="more"></span><h2 id="CUDA的原理"><a href="#CUDA的原理" class="headerlink" title="CUDA的原理"></a>CUDA的原理</h2><p>CUDA的原理是基于GPU（图形处理器）的并行计算能力。GPU在处理图像、视频等高密度数据时的并行能力非常强，因为它内部包含了许多处理核心（CUDA核心），这些核心可以同时处理多个数据。</p><p>CUDA使用了一种称为<code>“kernel”</code>的并行计算单元，通过将数据分配给不同的核心，使它们同时处理这些数据，从而提高计算效率。每个核心可以处理一个小片（通常是几百个）数据，这些小片被组合成一个大的任务，通过并行处理这些任务，可以极大地加快计算速度。</p><h2 id="CUDA的应用"><a href="#CUDA的应用" class="headerlink" title="CUDA的应用"></a>CUDA的应用</h2><p>CUDA被广泛应用于各种领域的计算任务，包括科学计算、深度学习、人工智能等。</p><p>在科学计算中，CUDA可以加速许多计算密集型的任务，比如矩阵运算、大规模数据处理等。借助CUDA并行计算的能力，科学家们可以更快速、更准确地解决各种难题。</p><p>在深度学习和人工智能领域，CUDA则被广泛用于训练神经网络。神经网络的训练需要大量的矩阵计算和梯度计算，使用CUDA可以加速这些计算，从而大大提高训练速度和精度。</p><h2 id="使用CUDA进行开发"><a href="#使用CUDA进行开发" class="headerlink" title="使用CUDA进行开发"></a>使用CUDA进行开发</h2><p>在使用CUDA进行开发时，需要使用CUDA的编程语言，如CUDA C/C++。这个语言和普通的C/C++语言类似，但是它包含了一些特殊的语法和API，可以调用GPU上的核心进行并行计算。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CUDA：并行计算的新时代&quot;&gt;&lt;a href=&quot;#CUDA：并行计算的新时代&quot; class=&quot;headerlink&quot; title=&quot;CUDA：并行计算的新时代&quot;&gt;&lt;/a&gt;CUDA：并行计算的新时代&lt;/h1&gt;&lt;p&gt;CUDA（Compute Unified Device Architecture，计算统一设备架构）是英伟达公司推出的一种显卡计算框架，它可以利用显卡的并行计算能力，提高计算效率，实现各种复杂的计算任务。本文将简单介绍CUDA的基本原理和应用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="GPU" scheme="https://yousa.love/tags/GPU/"/>
    
  </entry>
  
  <entry>
    <title>DDSP-SVC-3.0</title>
    <link href="https://yousa.love/2023/05/13/DDSP-SVC-3-0/"/>
    <id>https://yousa.love/2023/05/13/DDSP-SVC-3-0/</id>
    <published>2023-05-13T15:58:01.000Z</published>
    <updated>2023-05-27T08:35:54.546Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.123pan.com/s/k79SVv-h8zJ.html">链接</a></p><p><del>没想到这玩意居然可以用来交信息作业</del></p><p><a href="https://filedoge.com/download/e6638b2deab855fdf7d9e94cd547338f7e84a57293110b6a9f6b42c2dfc7749f5a58c19c15020a4f98f5">作业</a></p><span id="more"></span><h1 id="数据的处理和可视化表达——DDSP-SVC音声转换"><a href="#数据的处理和可视化表达——DDSP-SVC音声转换" class="headerlink" title="数据的处理和可视化表达——DDSP-SVC音声转换"></a>数据的处理和可视化表达——DDSP-SVC音声转换</h1><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>相较于常用的So-VITS（SoftVC VITS Singing Voice Conversion）和更早的Diff-SVC（Diffusion Probabilistic Model for Singing Voice Conversion），DDSP-SVC（Differentiable Digital Signal Processing for Singing Voice Conversion，用于歌声转换的可微分数字信号处理）在训练推理速度和配置要求上都可以说是全面优于前两个项目，一般来说只要有一张2G以上显存的N卡，花上一两个小时就可以训练完成，大大降低了AI变声的门槛。最近DDSP项目迭代到了3.0版本，在原有的基础上加入了浅扩散机制，将DDSP输出的质量较低的音频梅尔谱图输入扩散模型进行浅扩散处理，输出梅尔谱图并通过声码器转换为高质量音频，使得转换效果大幅提升，在部分数据集上可以达到媲美So-VITS的效果。所以尝试使用DDSP进行音声转换测试。</p><p>项目地址：<a href="https://github.com/yxlllc/DDSP-SVC">https://github.com/yxlllc/DDSP-SVC</a></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>通过训练得到两个模型：</p><ul><li>DDSP模型</li><li>扩散模型</li></ul><p>对源音频进行推理：<img src="https://pic1.imgdb.cn/item/6468a9c0e03e90d874142709.png"></p><h2 id="研究过程"><a href="#研究过程" class="headerlink" title="研究过程"></a>研究过程</h2><h3 id="数据采集、处理"><a href="#数据采集、处理" class="headerlink" title="数据采集、处理"></a>数据采集、处理</h3><p>通过直播回放视频进行音频分离 约1-2小时的干声素材，切片为3-15秒的音频文件</p><h4 id="数据的导入与预处理"><a href="#数据的导入与预处理" class="headerlink" title="数据的导入与预处理"></a>数据的导入与预处理</h4><h5 id="导入数据集和验证集"><a href="#导入数据集和验证集" class="headerlink" title="导入数据集和验证集"></a>导入数据集和验证集</h5><p>数据集导入到<code>项目目录\data\train\audio</code>文件夹下 验证集导入到<code>项目目录\data\val\audio</code>文件夹下</p><p>在数据集中按训练集：验证集=100:1的比例挑选验证集音频放置到<code>data/val/audio</code>文件夹中 单说话人模型，直接将所有wav文件放置到对应的<code>audio</code>文件夹下即可。如果是训练多说话人模型，需要在训练集和验证集的<code>audio</code>文件夹下新建不同说话人的目录，只能以纯数字命名，以1开始 验证集的条数最好不要超过10条，否则训练验证会变得很慢。验证集的音频质量越高越好。</p><p>数据集结构：<br>data<br>├─ train<br>│ ├─ audio<br>│ │ ├─ aaa.wav<br>│ │ ├─ bbb.wav<br>│ │ └─ ….wav<br>├─ val<br>│ ├─ audio<br>│ │ ├─ eee.wav<br>│ │ ├─ fff.wav<br>│ │ └─ ….wav</p><h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p>预处理参数</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">block_size:</span> <span class="number">512</span></span><br><span class="line">  <span class="attr">cnhubertsoft_gate:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">duration:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">encoder:</span> <span class="string">contentvec768l12</span></span><br><span class="line">  <span class="attr">encoder_ckpt:</span> <span class="string">pretrain\contentvec\checkpoint_best_legacy_500.pt</span></span><br><span class="line">  <span class="attr">encoder_hop_size:</span> <span class="number">320</span></span><br><span class="line">  <span class="attr">encoder_out_channels:</span> <span class="number">768</span></span><br><span class="line">  <span class="attr">encoder_sample_rate:</span> <span class="number">16000</span></span><br><span class="line">  <span class="attr">f0_extractor:</span> <span class="string">crepe</span></span><br><span class="line">  <span class="attr">f0_max:</span> <span class="number">800</span></span><br><span class="line">  <span class="attr">f0_min:</span> <span class="number">65</span></span><br><span class="line">  <span class="attr">sampling_rate:</span> <span class="number">44100</span></span><br><span class="line">  <span class="attr">train_path:</span> <span class="string">data/train</span></span><br><span class="line">  <span class="attr">valid_path:</span> <span class="string">data/val</span></span><br><span class="line"><span class="attr">device:</span> <span class="string">cuda</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">expdir:</span> <span class="string">exp/diffusion-test</span></span><br><span class="line">  <span class="attr">gpu_id:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">infer:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="string">dpm-solver</span></span><br><span class="line">  <span class="attr">speedup:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">model:</span></span><br><span class="line">  <span class="attr">n_chans:</span> <span class="number">512</span></span><br><span class="line">  <span class="attr">n_hidden:</span> <span class="number">256</span></span><br><span class="line">  <span class="attr">n_layers:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">n_spk:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">Diffusion</span></span><br><span class="line">  <span class="attr">use_pitch_aug:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">train:</span></span><br><span class="line">  <span class="attr">amp_dtype:</span> <span class="string">fp32</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">24</span></span><br><span class="line">  <span class="attr">cache_all_data:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cache_device:</span> <span class="string">cuda</span></span><br><span class="line">  <span class="attr">cache_fp16:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decay_step:</span> <span class="number">100000</span></span><br><span class="line">  <span class="attr">epochs:</span> <span class="number">100000</span></span><br><span class="line">  <span class="attr">gamma:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">interval_force_save:</span> <span class="number">20000</span></span><br><span class="line">  <span class="attr">interval_log:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">interval_val:</span> <span class="number">1500</span></span><br><span class="line">  <span class="attr">lr:</span> <span class="number">0.0002</span></span><br><span class="line">  <span class="attr">num_workers:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">save_opt:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">weight_decay:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">vocoder:</span></span><br><span class="line">  <span class="attr">ckpt:</span> <span class="string">pretrain/nsf_hifigan/model</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">nsf-hifigan</span></span><br></pre></td></tr></tbody></table></figure><p><strong>预处理脚本</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> librosa</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> pyworld <span class="keyword">as</span> pw</span><br><span class="line"><span class="keyword">import</span> parselmouth</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> logger <span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> ddsp.vocoder <span class="keyword">import</span> F0_Extractor, Volume_Extractor, Units_Encoder</span><br><span class="line"><span class="keyword">from</span> diffusion.vocoder <span class="keyword">import</span> Vocoder</span><br><span class="line"><span class="keyword">from</span> logger.utils <span class="keyword">import</span> traverse_dir</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_args</span>(<span class="params">args=<span class="literal">None</span>, namespace=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">"""Parse command-line arguments."""</span></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">"-c"</span>,</span><br><span class="line">        <span class="string">"--config"</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">        required=<span class="literal">True</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">"path to the config file"</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">"-d"</span>,</span><br><span class="line">        <span class="string">"--device"</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">        default=<span class="literal">None</span>,</span><br><span class="line">        required=<span class="literal">False</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">"cpu or cuda, auto if not set"</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args(args=args, namespace=namespace)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess</span>(<span class="params">path, f0_extractor, volume_extractor, mel_extractor, units_encoder, sample_rate, hop_size, device = <span class="string">'cuda'</span>, use_pitch_aug = <span class="literal">False</span></span>):</span><br><span class="line">    </span><br><span class="line">    path_srcdir  = os.path.join(path, <span class="string">'audio'</span>)</span><br><span class="line">    path_unitsdir  = os.path.join(path, <span class="string">'units'</span>)</span><br><span class="line">    path_f0dir  = os.path.join(path, <span class="string">'f0'</span>)</span><br><span class="line">    path_volumedir  = os.path.join(path, <span class="string">'volume'</span>)</span><br><span class="line">    path_augvoldir  = os.path.join(path, <span class="string">'aug_vol'</span>)</span><br><span class="line">    path_meldir  = os.path.join(path, <span class="string">'mel'</span>)</span><br><span class="line">    path_augmeldir  = os.path.join(path, <span class="string">'aug_mel'</span>)</span><br><span class="line">    path_skipdir = os.path.join(path, <span class="string">'skip'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># list files</span></span><br><span class="line">    filelist =  traverse_dir(</span><br><span class="line">        path_srcdir,</span><br><span class="line">        extension=<span class="string">'wav'</span>,</span><br><span class="line">        is_pure=<span class="literal">True</span>,</span><br><span class="line">        is_sort=<span class="literal">True</span>,</span><br><span class="line">        is_ext=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># pitch augmentation dictionary</span></span><br><span class="line">    pitch_aug_dict = {}</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># run  </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">file</span>):</span><br><span class="line">        ext = file.split(<span class="string">'.'</span>)[-<span class="number">1</span>]</span><br><span class="line">        binfile = file[:-(<span class="built_in">len</span>(ext)+<span class="number">1</span>)]+<span class="string">'.npy'</span></span><br><span class="line">        path_srcfile = os.path.join(path_srcdir, file)</span><br><span class="line">        path_unitsfile = os.path.join(path_unitsdir, binfile)</span><br><span class="line">        path_f0file = os.path.join(path_f0dir, binfile)</span><br><span class="line">        path_volumefile = os.path.join(path_volumedir, binfile)</span><br><span class="line">        path_augvolfile = os.path.join(path_augvoldir, binfile)</span><br><span class="line">        path_melfile = os.path.join(path_meldir, binfile)</span><br><span class="line">        path_augmelfile = os.path.join(path_augmeldir, binfile)</span><br><span class="line">        path_skipfile = os.path.join(path_skipdir, file)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># load audio</span></span><br><span class="line">        audio, _ = librosa.load(path_srcfile, sr=sample_rate)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(audio.shape) &gt; <span class="number">1</span>:</span><br><span class="line">            audio = librosa.to_mono(audio)</span><br><span class="line">        audio_t = torch.from_numpy(audio).<span class="built_in">float</span>().to(device)</span><br><span class="line">        audio_t = audio_t.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># extract volume</span></span><br><span class="line">        volume = volume_extractor.extract(audio)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># extract mel and volume augmentaion</span></span><br><span class="line">        <span class="keyword">if</span> mel_extractor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            mel_t = mel_extractor.extract(audio_t, sample_rate)</span><br><span class="line">            mel = mel_t.squeeze().to(<span class="string">'cpu'</span>).numpy()</span><br><span class="line">            </span><br><span class="line">            max_amp = <span class="built_in">float</span>(torch.<span class="built_in">max</span>(torch.<span class="built_in">abs</span>(audio_t))) + <span class="number">1e-5</span></span><br><span class="line">            max_shift = <span class="built_in">min</span>(<span class="number">1</span>, np.log10(<span class="number">1</span>/max_amp))</span><br><span class="line">            log10_vol_shift = random.uniform(-<span class="number">1</span>, max_shift)</span><br><span class="line">            <span class="keyword">if</span> use_pitch_aug:</span><br><span class="line">                keyshift = random.uniform(-<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                keyshift = <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            aug_mel_t = mel_extractor.extract(audio_t * (<span class="number">10</span> ** log10_vol_shift), sample_rate, keyshift = keyshift)</span><br><span class="line">            aug_mel = aug_mel_t.squeeze().to(<span class="string">'cpu'</span>).numpy()</span><br><span class="line">            aug_vol = volume_extractor.extract(audio * (<span class="number">10</span> ** log10_vol_shift))</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># units encode</span></span><br><span class="line">        units_t = units_encoder.encode(audio_t, sample_rate, hop_size)</span><br><span class="line">        units = units_t.squeeze().to(<span class="string">'cpu'</span>).numpy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># extract f0</span></span><br><span class="line">        f0 = f0_extractor.extract(audio, uv_interp = <span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        uv = f0 == <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(f0[~uv]) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># interpolate the unvoiced f0</span></span><br><span class="line">            f0[uv] = np.interp(np.where(uv)[<span class="number">0</span>], np.where(~uv)[<span class="number">0</span>], f0[~uv])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># save npy     </span></span><br><span class="line">            os.makedirs(os.path.dirname(path_unitsfile), exist_ok=<span class="literal">True</span>)</span><br><span class="line">            np.save(path_unitsfile, units)</span><br><span class="line">            os.makedirs(os.path.dirname(path_f0file), exist_ok=<span class="literal">True</span>)</span><br><span class="line">            np.save(path_f0file, f0)</span><br><span class="line">            os.makedirs(os.path.dirname(path_volumefile), exist_ok=<span class="literal">True</span>)</span><br><span class="line">            np.save(path_volumefile, volume)</span><br><span class="line">            <span class="keyword">if</span> mel_extractor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                pitch_aug_dict[file[:-(<span class="built_in">len</span>(ext)+<span class="number">1</span>)]] = keyshift</span><br><span class="line">                os.makedirs(os.path.dirname(path_melfile), exist_ok=<span class="literal">True</span>)</span><br><span class="line">                np.save(path_melfile, mel)</span><br><span class="line">                os.makedirs(os.path.dirname(path_augmelfile), exist_ok=<span class="literal">True</span>)</span><br><span class="line">                np.save(path_augmelfile, aug_mel)</span><br><span class="line">                os.makedirs(os.path.dirname(path_augvolfile), exist_ok=<span class="literal">True</span>)</span><br><span class="line">                np.save(path_augvolfile, aug_vol)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'\n[Error] F0 extraction failed: '</span> + path_srcfile)</span><br><span class="line">            os.makedirs(os.path.dirname(path_skipfile), exist_ok=<span class="literal">True</span>)</span><br><span class="line">            shutil.move(path_srcfile, os.path.dirname(path_skipfile))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'This file has been moved to '</span> + path_skipfile)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Preprocess the audio clips in :'</span>, path_srcdir)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># single process</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> tqdm(filelist, total=<span class="built_in">len</span>(filelist)):</span><br><span class="line">        process(file)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> mel_extractor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        path_pitchaugdict = os.path.join(path, <span class="string">'pitch_aug_dict.npy'</span>)</span><br><span class="line">        np.save(path_pitchaugdict, pitch_aug_dict)</span><br><span class="line">    <span class="comment"># multi-process (have bugs)</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    with concurrent.futures.ProcessPoolExecutor(max_workers=2) as executor:</span></span><br><span class="line"><span class="string">        list(tqdm(executor.map(process, filelist), total=len(filelist)))</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># parse commands</span></span><br><span class="line">    cmd = parse_args()</span><br><span class="line"></span><br><span class="line">    device = cmd.device</span><br><span class="line">    <span class="keyword">if</span> device <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        device = <span class="string">'cuda'</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">'cpu'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># load config</span></span><br><span class="line">    args = utils.load_config(cmd.config)</span><br><span class="line">    sample_rate = args.data.sampling_rate</span><br><span class="line">    hop_size = args.data.block_size</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize f0 extractor</span></span><br><span class="line">    f0_extractor = F0_Extractor(</span><br><span class="line">                        args.data.f0_extractor, </span><br><span class="line">                        args.data.sampling_rate, </span><br><span class="line">                        args.data.block_size, </span><br><span class="line">                        args.data.f0_min, </span><br><span class="line">                        args.data.f0_max)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize volume extractor</span></span><br><span class="line">    volume_extractor = Volume_Extractor(args.data.block_size)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize mel extractor</span></span><br><span class="line">    mel_extractor = <span class="literal">None</span></span><br><span class="line">    use_pitch_aug = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> args.model.<span class="built_in">type</span> == <span class="string">'Diffusion'</span>:</span><br><span class="line">        mel_extractor = Vocoder(args.vocoder.<span class="built_in">type</span>, args.vocoder.ckpt, device = device)</span><br><span class="line">        <span class="keyword">if</span> mel_extractor.vocoder_sample_rate != sample_rate <span class="keyword">or</span> mel_extractor.vocoder_hop_size != hop_size:</span><br><span class="line">            mel_extractor = <span class="literal">None</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'Unmatch vocoder parameters, mel extraction is ignored!'</span>)</span><br><span class="line">        <span class="keyword">elif</span> args.model.use_pitch_aug:</span><br><span class="line">            use_pitch_aug = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize units encoder</span></span><br><span class="line">    <span class="keyword">if</span> args.data.encoder == <span class="string">'cnhubertsoftfish'</span>:</span><br><span class="line">        cnhubertsoft_gate = args.data.cnhubertsoft_gate</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cnhubertsoft_gate = <span class="number">10</span></span><br><span class="line">    units_encoder = Units_Encoder(</span><br><span class="line">                        args.data.encoder, </span><br><span class="line">                        args.data.encoder_ckpt, </span><br><span class="line">                        args.data.encoder_sample_rate, </span><br><span class="line">                        args.data.encoder_hop_size,</span><br><span class="line">                        cnhubertsoft_gate=cnhubertsoft_gate,</span><br><span class="line">                        device = device)    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># preprocess training set</span></span><br><span class="line">    preprocess(args.data.train_path, f0_extractor, volume_extractor, mel_extractor, units_encoder, sample_rate, hop_size, device = device, use_pitch_aug = use_pitch_aug)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># preprocess validation set</span></span><br><span class="line">    preprocess(args.data.valid_path, f0_extractor, volume_extractor, mel_extractor, units_encoder, sample_rate, hop_size, device = device, use_pitch_aug = <span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><h4 id="DDSP模型训练"><a href="#DDSP模型训练" class="headerlink" title="DDSP模型训练"></a>DDSP模型训练</h4><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">block_size:</span> <span class="number">512</span></span><br><span class="line">  <span class="attr">cnhubertsoft_gate:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">duration:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">encoder:</span> <span class="string">contentvec768l12</span></span><br><span class="line">  <span class="attr">encoder_ckpt:</span> <span class="string">pretrain\contentvec\checkpoint_best_legacy_500.pt</span></span><br><span class="line">  <span class="attr">encoder_hop_size:</span> <span class="number">320</span></span><br><span class="line">  <span class="attr">encoder_out_channels:</span> <span class="number">768</span></span><br><span class="line">  <span class="attr">encoder_sample_rate:</span> <span class="number">16000</span></span><br><span class="line">  <span class="attr">f0_extractor:</span> <span class="string">crepe</span></span><br><span class="line">  <span class="attr">f0_max:</span> <span class="number">800</span></span><br><span class="line">  <span class="attr">f0_min:</span> <span class="number">65</span></span><br><span class="line">  <span class="attr">sampling_rate:</span> <span class="number">44100</span></span><br><span class="line">  <span class="attr">train_path:</span> <span class="string">data/train</span></span><br><span class="line">  <span class="attr">valid_path:</span> <span class="string">data/val</span></span><br><span class="line"><span class="attr">device:</span> <span class="string">cuda</span></span><br><span class="line"><span class="attr">enhancer:</span></span><br><span class="line">  <span class="attr">ckpt:</span> <span class="string">pretrain/nsf_hifigan/model</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">nsf-hifigan</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">expdir:</span> <span class="string">exp/combsub-test</span></span><br><span class="line">  <span class="attr">gpu_id:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">loss:</span></span><br><span class="line">  <span class="attr">fft_max:</span> <span class="number">2048</span></span><br><span class="line">  <span class="attr">fft_min:</span> <span class="number">256</span></span><br><span class="line">  <span class="attr">n_scale:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">model:</span></span><br><span class="line">  <span class="attr">n_spk:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">CombSubFast</span></span><br><span class="line"><span class="attr">train:</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">28</span></span><br><span class="line">  <span class="attr">cache_all_data:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cache_device:</span> <span class="string">cuda</span></span><br><span class="line">  <span class="attr">cache_fp16:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">epochs:</span> <span class="number">100000</span></span><br><span class="line">  <span class="attr">interval_log:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">interval_val:</span> <span class="number">1500</span></span><br><span class="line">  <span class="attr">lr:</span> <span class="number">0.0005</span></span><br><span class="line">  <span class="attr">num_workers:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">save_opt:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">weight_decay:</span> <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><h5 id="训练脚本"><a href="#训练脚本" class="headerlink" title="训练脚本"></a>训练脚本</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> logger <span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> data_loaders <span class="keyword">import</span> get_data_loaders</span><br><span class="line"><span class="keyword">from</span> solver <span class="keyword">import</span> train</span><br><span class="line"><span class="keyword">from</span> ddsp.vocoder <span class="keyword">import</span> Sins, CombSub, CombSubFast</span><br><span class="line"><span class="keyword">from</span> ddsp.loss <span class="keyword">import</span> RSSLoss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_args</span>(<span class="params">args=<span class="literal">None</span>, namespace=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">"""Parse command-line arguments."""</span></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">"-c"</span>,</span><br><span class="line">        <span class="string">"--config"</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">        required=<span class="literal">True</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">"path to the config file"</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args(args=args, namespace=namespace)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># parse commands</span></span><br><span class="line">    cmd = parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># load config</span></span><br><span class="line">    args = utils.load_config(cmd.config)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">' &gt; config:'</span>, cmd.config)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">' &gt;    exp:'</span>, args.env.expdir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># load model</span></span><br><span class="line">    model = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> args.model.<span class="built_in">type</span> == <span class="string">'Sins'</span>:</span><br><span class="line">        model = Sins(</span><br><span class="line">            sampling_rate=args.data.sampling_rate,</span><br><span class="line">            block_size=args.data.block_size,</span><br><span class="line">            n_harmonics=args.model.n_harmonics,</span><br><span class="line">            n_mag_allpass=args.model.n_mag_allpass,</span><br><span class="line">            n_mag_noise=args.model.n_mag_noise,</span><br><span class="line">            n_unit=args.data.encoder_out_channels,</span><br><span class="line">            n_spk=args.model.n_spk)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">elif</span> args.model.<span class="built_in">type</span> == <span class="string">'CombSub'</span>:</span><br><span class="line">        model = CombSub(</span><br><span class="line">            sampling_rate=args.data.sampling_rate,</span><br><span class="line">            block_size=args.data.block_size,</span><br><span class="line">            n_mag_allpass=args.model.n_mag_allpass,</span><br><span class="line">            n_mag_harmonic=args.model.n_mag_harmonic,</span><br><span class="line">            n_mag_noise=args.model.n_mag_noise,</span><br><span class="line">            n_unit=args.data.encoder_out_channels,</span><br><span class="line">            n_spk=args.model.n_spk)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> args.model.<span class="built_in">type</span> == <span class="string">'CombSubFast'</span>:</span><br><span class="line">        model = CombSubFast(</span><br><span class="line">            sampling_rate=args.data.sampling_rate,</span><br><span class="line">            block_size=args.data.block_size,</span><br><span class="line">            n_unit=args.data.encoder_out_channels,</span><br><span class="line">            n_spk=args.model.n_spk)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f" [x] Unknown Model: <span class="subst">{args.model.<span class="built_in">type</span>}</span>"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># load parameters</span></span><br><span class="line">    optimizer = torch.optim.AdamW(model.parameters())</span><br><span class="line">    initial_global_step, model, optimizer = utils.load_model(args.env.expdir, model, optimizer, device=args.device)</span><br><span class="line">    <span class="keyword">for</span> param_group <span class="keyword">in</span> optimizer.param_groups:</span><br><span class="line">        param_group[<span class="string">'lr'</span>] = args.train.lr</span><br><span class="line">        param_group[<span class="string">'weight_decay'</span>] = args.train.weight_decay</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># loss</span></span><br><span class="line">    loss_func = RSSLoss(args.loss.fft_min, args.loss.fft_max, args.loss.n_scale, device = args.device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># device</span></span><br><span class="line">    <span class="keyword">if</span> args.device == <span class="string">'cuda'</span>:</span><br><span class="line">        torch.cuda.set_device(args.env.gpu_id)</span><br><span class="line">    model.to(args.device)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> state <span class="keyword">in</span> optimizer.state.values():</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> state.items():</span><br><span class="line">            <span class="keyword">if</span> torch.is_tensor(v):</span><br><span class="line">                state[k] = v.to(args.device)</span><br><span class="line">                    </span><br><span class="line">    loss_func.to(args.device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># datas</span></span><br><span class="line">    loader_train, loader_valid = get_data_loaders(args, whole_audio=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># run</span></span><br><span class="line">    train(args, initial_global_step, model, optimizer, loss_func, loader_train, loader_valid)</span><br></pre></td></tr></tbody></table></figure><h4 id="扩散模型训练"><a href="#扩散模型训练" class="headerlink" title="扩散模型训练"></a>扩散模型训练</h4><h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">f0_extractor:</span> <span class="string">crepe</span></span><br><span class="line">  <span class="attr">f0_min:</span> <span class="number">65</span></span><br><span class="line">  <span class="attr">f0_max:</span> <span class="number">800</span></span><br><span class="line">  <span class="attr">sampling_rate:</span> <span class="number">44100</span></span><br><span class="line">  <span class="attr">block_size:</span> <span class="number">512</span></span><br><span class="line">  <span class="attr">duration:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">encoder:</span> <span class="string">contentvec768l12</span></span><br><span class="line">  <span class="attr">cnhubertsoft_gate:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">encoder_sample_rate:</span> <span class="number">16000</span></span><br><span class="line">  <span class="attr">encoder_hop_size:</span> <span class="number">320</span></span><br><span class="line">  <span class="attr">encoder_out_channels:</span> <span class="number">768</span></span><br><span class="line">  <span class="attr">encoder_ckpt:</span> <span class="string">pretrain\contentvec\checkpoint_best_legacy_500.pt</span></span><br><span class="line">  <span class="attr">train_path:</span> <span class="string">data/train</span></span><br><span class="line">  <span class="attr">valid_path:</span> <span class="string">data/val</span></span><br><span class="line"><span class="attr">model:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">Diffusion</span></span><br><span class="line">  <span class="attr">n_layers:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">n_chans:</span> <span class="number">512</span></span><br><span class="line">  <span class="attr">n_hidden:</span> <span class="number">256</span></span><br><span class="line">  <span class="attr">use_pitch_aug:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">n_spk:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">device:</span> <span class="string">cuda</span></span><br><span class="line"><span class="attr">vocoder:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">nsf-hifigan</span></span><br><span class="line">  <span class="attr">ckpt:</span> <span class="string">pretrain/nsf_hifigan/model</span></span><br><span class="line"><span class="attr">infer:</span></span><br><span class="line">  <span class="attr">speedup:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">method:</span> <span class="string">dpm-solver</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">expdir:</span> <span class="string">exp/diffusion-test</span></span><br><span class="line">  <span class="attr">gpu_id:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">train:</span></span><br><span class="line">  <span class="attr">num_workers:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">amp_dtype:</span> <span class="string">fp32</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">24</span></span><br><span class="line">  <span class="attr">cache_all_data:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cache_device:</span> <span class="string">cuda</span></span><br><span class="line">  <span class="attr">cache_fp16:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">epochs:</span> <span class="number">100000</span></span><br><span class="line">  <span class="attr">interval_log:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">interval_val:</span> <span class="number">1500</span></span><br><span class="line">  <span class="attr">interval_force_save:</span> <span class="number">20000</span></span><br><span class="line">  <span class="attr">lr:</span> <span class="number">0.0002</span></span><br><span class="line">  <span class="attr">decay_step:</span> <span class="number">100000</span></span><br><span class="line">  <span class="attr">gamma:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">weight_decay:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">save_opt:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h5 id="训练脚本-1"><a href="#训练脚本-1" class="headerlink" title="训练脚本"></a>训练脚本</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.optim <span class="keyword">import</span> lr_scheduler</span><br><span class="line"><span class="keyword">from</span> logger <span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> diffusion.data_loaders <span class="keyword">import</span> get_data_loaders</span><br><span class="line"><span class="keyword">from</span> diffusion.solver <span class="keyword">import</span> train</span><br><span class="line"><span class="keyword">from</span> diffusion.unit2mel <span class="keyword">import</span> Unit2Mel</span><br><span class="line"><span class="keyword">from</span> diffusion.vocoder <span class="keyword">import</span> Vocoder</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_args</span>(<span class="params">args=<span class="literal">None</span>, namespace=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">"""Parse command-line arguments."""</span></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">"-c"</span>,</span><br><span class="line">        <span class="string">"--config"</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">        required=<span class="literal">True</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">"path to the config file"</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args(args=args, namespace=namespace)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># parse commands</span></span><br><span class="line">    cmd = parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># load config</span></span><br><span class="line">    args = utils.load_config(cmd.config)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">' &gt; config:'</span>, cmd.config)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">' &gt;    exp:'</span>, args.env.expdir)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># load vocoder</span></span><br><span class="line">    vocoder = Vocoder(args.vocoder.<span class="built_in">type</span>, args.vocoder.ckpt, device=args.device)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># load model</span></span><br><span class="line">    model = Unit2Mel(</span><br><span class="line">                args.data.encoder_out_channels, </span><br><span class="line">                args.model.n_spk,</span><br><span class="line">                args.model.use_pitch_aug,</span><br><span class="line">                vocoder.dimension,</span><br><span class="line">                args.model.n_layers,</span><br><span class="line">                args.model.n_chans,</span><br><span class="line">                args.model.n_hidden)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># load parameters</span></span><br><span class="line">    optimizer = torch.optim.AdamW(model.parameters())</span><br><span class="line">    initial_global_step, model, optimizer = utils.load_model(args.env.expdir, model, optimizer, device=args.device)</span><br><span class="line">    <span class="keyword">for</span> param_group <span class="keyword">in</span> optimizer.param_groups:</span><br><span class="line">        param_group[<span class="string">'lr'</span>] = args.train.lr</span><br><span class="line">        param_group[<span class="string">'weight_decay'</span>] = args.train.weight_decay</span><br><span class="line">    scheduler = lr_scheduler.StepLR(optimizer, step_size=args.train.decay_step, gamma=args.train.gamma)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># device</span></span><br><span class="line">    <span class="keyword">if</span> args.device == <span class="string">'cuda'</span>:</span><br><span class="line">        torch.cuda.set_device(args.env.gpu_id)</span><br><span class="line">    model.to(args.device)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> state <span class="keyword">in</span> optimizer.state.values():</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> state.items():</span><br><span class="line">            <span class="keyword">if</span> torch.is_tensor(v):</span><br><span class="line">                state[k] = v.to(args.device)</span><br><span class="line">                    </span><br><span class="line">    <span class="comment"># datas</span></span><br><span class="line">    loader_train, loader_valid = get_data_loaders(args, whole_audio=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># run</span></span><br><span class="line">    train(args, initial_global_step, model, optimizer, scheduler, vocoder, loader_train, loader_valid)</span><br></pre></td></tr></tbody></table></figure><h4 id="性能评估"><a href="#性能评估" class="headerlink" title="性能评估"></a>性能评估</h4><h5 id="DDSP模型训练日志"><a href="#DDSP模型训练日志" class="headerlink" title="DDSP模型训练日志"></a>DDSP模型训练日志</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">--- model size ---</span><br><span class="line">model: 4,000,518</span><br><span class="line">======= start training =======</span><br><span class="line">epoch: 0 |   9/ 47 | exp/combsub-test | batch/s: 1.35 | loss: 5.327 | time: 0:00:07.5 | step: 10</span><br><span class="line">epoch: 0 |  19/ 47 | exp/combsub-test | batch/s: 3.44 | loss: 4.606 | time: 0:00:10.4 | step: 20</span><br><span class="line">epoch: 0 |  29/ 47 | exp/combsub-test | batch/s: 3.48 | loss: 4.182 | time: 0:00:13.3 | step: 30</span><br><span class="line">epoch: 0 |  39/ 47 | exp/combsub-test | batch/s: 3.58 | loss: 3.385 | time: 0:00:16.0 | step: 40</span><br><span class="line">epoch: 1 |   2/ 47 | exp/combsub-test | batch/s: 3.73 | loss: 3.502 | time: 0:00:18.7 | step: 50</span><br><span class="line">epoch: 1 |  12/ 47 | exp/combsub-test | batch/s: 3.92 | loss: 3.372 | time: 0:00:21.3 | step: 60</span><br><span class="line">epoch: 1 |  22/ 47 | exp/combsub-test | batch/s: 3.52 | loss: 2.708 | time: 0:00:24.1 | step: 70</span><br><span class="line">epoch: 1 |  32/ 47 | exp/combsub-test | batch/s: 3.61 | loss: 2.679 | time: 0:00:26.9 | step: 80</span><br><span class="line">epoch: 1 |  42/ 47 | exp/combsub-test | batch/s: 3.58 | loss: 2.132 | time: 0:00:29.7 | step: 90</span><br><span class="line">epoch: 2 |   5/ 47 | exp/combsub-test | batch/s: 4.02 | loss: 2.151 | time: 0:00:32.2 | step: 100</span><br><span class="line"></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">epoch: 61 |  32/ 47 | exp/combsub-test | batch/s: 4.97 | loss: 1.073 | time: 0:10:41.3 | step: 8900</span><br><span class="line">epoch: 61 |  42/ 47 | exp/combsub-test | batch/s: 4.95 | loss: 1.113 | time: 0:10:43.3 | step: 8910</span><br><span class="line">epoch: 62 |   5/ 47 | exp/combsub-test | batch/s: 4.84 | loss: 1.056 | time: 0:10:45.4 | step: 8920</span><br><span class="line">epoch: 62 |  15/ 47 | exp/combsub-test | batch/s: 4.88 | loss: 1.082 | time: 0:10:47.4 | step: 8930</span><br><span class="line">epoch: 62 |  25/ 47 | exp/combsub-test | batch/s: 5.00 | loss: 1.094 | time: 0:10:49.4 | step: 8940</span><br><span class="line">epoch: 62 |  35/ 47 | exp/combsub-test | batch/s: 4.96 | loss: 1.042 | time: 0:10:51.4 | step: 8950</span><br><span class="line">epoch: 62 |  45/ 47 | exp/combsub-test | batch/s: 5.02 | loss: 1.065 | time: 0:10:53.4 | step: 8960</span><br><span class="line">epoch: 63 |   8/ 47 | exp/combsub-test | batch/s: 4.98 | loss: 1.102 | time: 0:10:55.4 | step: 8970</span><br><span class="line">epoch: 63 |  18/ 47 | exp/combsub-test | batch/s: 5.10 | loss: 1.080 | time: 0:10:57.4 | step: 8980</span><br><span class="line">epoch: 63 |  28/ 47 | exp/combsub-test | batch/s: 5.00 | loss: 1.064 | time: 0:10:59.4 | step: 8990</span><br><span class="line">epoch: 63 |  38/ 47 | exp/combsub-test | batch/s: 4.95 | loss: 1.069 | time: 0:11:01.4 | step: 9000</span><br><span class="line">--- &lt;validation&gt; --- </span><br><span class="line">loss: 1.087. </span><br></pre></td></tr></tbody></table></figure><h5 id="扩散模型训练日志"><a href="#扩散模型训练日志" class="headerlink" title="扩散模型训练日志"></a>扩散模型训练日志</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">--- model size ---</span><br><span class="line">model: 55,192,704</span><br><span class="line">======= start training =======</span><br><span class="line">epoch: 0 |   9/ 47 | exp/diffusion-test | batch/s: 1.40 | lr: 0.0002 | loss: 0.036 | time: 0:00:07.5 | step: 10</span><br><span class="line">epoch: 0 |  19/ 47 | exp/diffusion-test | batch/s: 1.62 | lr: 0.0002 | loss: 0.030 | time: 0:00:13.7 | step: 20</span><br><span class="line">epoch: 0 |  29/ 47 | exp/diffusion-test | batch/s: 1.62 | lr: 0.0002 | loss: 0.022 | time: 0:00:19.9 | step: 30</span><br><span class="line">epoch: 0 |  39/ 47 | exp/diffusion-test | batch/s: 1.61 | lr: 0.0002 | loss: 0.031 | time: 0:00:26.1 | step: 40</span><br><span class="line">epoch: 1 |   2/ 47 | exp/diffusion-test | batch/s: 1.74 | lr: 0.0002 | loss: 0.027 | time: 0:00:31.8 | step: 50</span><br><span class="line">epoch: 1 |  12/ 47 | exp/diffusion-test | batch/s: 1.61 | lr: 0.0002 | loss: 0.006 | time: 0:00:38.0 | step: 60</span><br><span class="line">epoch: 1 |  22/ 47 | exp/diffusion-test | batch/s: 1.61 | lr: 0.0002 | loss: 0.029 | time: 0:00:44.3 | step: 70</span><br><span class="line">epoch: 1 |  32/ 47 | exp/diffusion-test | batch/s: 1.60 | lr: 0.0002 | loss: 0.019 | time: 0:00:50.5 | step: 80</span><br><span class="line">epoch: 1 |  42/ 47 | exp/diffusion-test | batch/s: 1.60 | lr: 0.0002 | loss: 0.024 | time: 0:00:56.7 | step: 90</span><br><span class="line">epoch: 2 |   5/ 47 | exp/diffusion-test | batch/s: 1.72 | lr: 0.0002 | loss: 0.012 | time: 0:01:02.5 | step: 100</span><br><span class="line">                                </span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">epoch: 93 |  28/ 47 | exp/diffusion-test | batch/s: 1.52 | lr: 0.0002 | loss: 0.040 | time: 0:49:42.2 | step: 5900</span><br><span class="line">epoch: 93 |  38/ 47 | exp/diffusion-test | batch/s: 1.52 | lr: 0.0002 | loss: 0.023 | time: 0:49:48.8 | step: 5910</span><br><span class="line">epoch: 94 |   1/ 47 | exp/diffusion-test | batch/s: 1.65 | lr: 0.0002 | loss: 0.029 | time: 0:49:54.9 | step: 5920</span><br><span class="line">epoch: 94 |  11/ 47 | exp/diffusion-test | batch/s: 1.52 | lr: 0.0002 | loss: 0.021 | time: 0:50:01.5 | step: 5930</span><br><span class="line">epoch: 94 |  21/ 47 | exp/diffusion-test | batch/s: 1.52 | lr: 0.0002 | loss: 0.057 | time: 0:50:08.0 | step: 5940</span><br><span class="line">epoch: 94 |  31/ 47 | exp/diffusion-test | batch/s: 1.52 | lr: 0.0002 | loss: 0.020 | time: 0:50:14.6 | step: 5950</span><br><span class="line">epoch: 94 |  41/ 47 | exp/diffusion-test | batch/s: 1.52 | lr: 0.0002 | loss: 0.012 | time: 0:50:21.2 | step: 5960</span><br><span class="line">epoch: 95 |   4/ 47 | exp/diffusion-test | batch/s: 1.65 | lr: 0.0002 | loss: 0.008 | time: 0:50:27.2 | step: 5970</span><br><span class="line">epoch: 95 |  14/ 47 | exp/diffusion-test | batch/s: 1.52 | lr: 0.0002 | loss: 0.032 | time: 0:50:33.8 | step: 5980</span><br><span class="line">epoch: 95 |  24/ 47 | exp/diffusion-test | batch/s: 1.52 | lr: 0.0002 | loss: 0.020 | time: 0:50:40.4 | step: 5990</span><br><span class="line">epoch: 95 |  34/ 47 | exp/diffusion-test | batch/s: 1.52 | lr: 0.0002 | loss: 0.024 | time: 0:50:47.0 | step: 6000</span><br><span class="line"> --- &lt;validation&gt; --- </span><br><span class="line">loss: 0.027. </span><br></pre></td></tr></tbody></table></figure><h3 id="数据的可视化"><a href="#数据的可视化" class="headerlink" title="数据的可视化"></a>数据的可视化</h3><h4 id="DDSP训练loss"><a href="#DDSP训练loss" class="headerlink" title="DDSP训练loss"></a>DDSP训练loss<img src="https://pic1.imgdb.cn/item/6468da5be03e90d87451b660.jpg"></h4><h4 id="DDSP验证loss"><a href="#DDSP验证loss" class="headerlink" title="DDSP验证loss"></a>DDSP验证loss<img src="https://pic1.imgdb.cn/item/6468df81e03e90d8745846b4.jpg"></h4><h4 id="扩散训练loss"><a href="#扩散训练loss" class="headerlink" title="扩散训练loss"></a>扩散训练loss<img src="https://pic1.imgdb.cn/item/6468e01ce03e90d874590f26.jpg"></h4><h4 id="扩散验证loss"><a href="#扩散验证loss" class="headerlink" title="扩散验证loss"></a>扩散验证loss<img src="https://pic1.imgdb.cn/item/6468e07ee03e90d874599769.jpg"></h4><h1 id="研究结论"><a href="#研究结论" class="headerlink" title="研究结论"></a>研究结论</h1><p>DDSP使得音频转换效果在同等的硬件条件下大幅提升，在部分数据集上可以达到媲美So-VITS的效果。</p><p>此外，DDSP还具有以下优点：</p><ol><li>对音频进行实时处理，具有高效性和灵活性；</li><li>对音频进行可控的声音合成，使得用户可以根据自己的需求进行音频转换；</li><li>对音频进行可解释的分析，使得用户可以更好地理解音频的特征和结构。</li></ol><p>因此，DDSP是非常有前途，可以在音频转换、音乐合成、语音识别等领域得到广泛应用。</p><h2 id="推理音频示例"><a href="#推理音频示例" class="headerlink" title="推理音频示例"></a>推理音频示例</h2><p><a href="https://filedoge.com/download/fbe2cf1f61655588aa73a868addafef2e0eb82c9dd8f21d669d534a40ce50f454f657b81f24f965ff890">下载链接</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.123pan.com/s/k79SVv-h8zJ.html&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;没想到这玩意居然可以用来交信息作业&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://filedoge.com/download/e6638b2deab855fdf7d9e94cd547338f7e84a57293110b6a9f6b42c2dfc7749f5a58c19c15020a4f98f5&quot;&gt;作业&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>泠鸢lora模型v2</title>
    <link href="https://yousa.love/2023/05/07/%E6%B3%A0%E9%B8%A2lora%E6%A8%A1%E5%9E%8Bv2/"/>
    <id>https://yousa.love/2023/05/07/%E6%B3%A0%E9%B8%A2lora%E6%A8%A1%E5%9E%8Bv2/</id>
    <published>2023-05-07T07:27:20.000Z</published>
    <updated>2023-05-07T07:31:11.987Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog.">    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>lora模型</title>
    <link href="https://yousa.love/2023/05/01/lora%E6%A8%A1%E5%9E%8B/"/>
    <id>https://yousa.love/2023/05/01/lora%E6%A8%A1%E5%9E%8B/</id>
    <published>2023-05-01T08:00:37.000Z</published>
    <updated>2023-05-07T02:56:06.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Stable-Diffusion使用"><a href="#Stable-Diffusion使用" class="headerlink" title="Stable Diffusion使用"></a>Stable Diffusion使用</h2><span id="more"></span><ol><li><p>点击拓展模型面板</p><p><img src="https://pic2.imgdb.cn/item/644f86f70d2dde577736aeb7.jpg"></p></li><li><p>选择Lora，点击即可</p><p><img src="https://pic2.imgdb.cn/item/644f87080d2dde577736c4b3.jpg"></p></li></ol><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>关于Dreambooth，想必大家都已经知道了。LoRA和Dreambooth的关系又是什么？为什么这两个东西都有正则化？</p></blockquote><p>简单来说，目前微调AI绘画模型是这样的：</p><p><img src="https://pic2.imgdb.cn/item/644f871e0d2dde577736f299.jpg"></p><p>区别只有一个：<font color="red">正则化图像</font></p><p>没有正则化图像，他就叫直接微调，有正则化图像，他才叫Dreambooth。</p><p>那LoRA又在哪里？LoRA的全称是：LoRA: Low-Rank Adaptation of Large Language Models、他是为了解决大语言模型太大了（以亿计的参数）才出现的，AI绘画是拿过来借用的。</p><p>LoRA，他只是一种为了简化微调超级大模型需要巨多算力、传大模型麻烦而产生的算法，本质上，还是上面两种微调方法</p><p>转自B站@<a href="https://space.bilibili.com/12566101/dynamic">秋葉aaaki</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Stable-Diffusion使用&quot;&gt;&lt;a href=&quot;#Stable-Diffusion使用&quot; class=&quot;headerlink&quot; title=&quot;Stable Diffusion使用&quot;&gt;&lt;/a&gt;Stable Diffusion使用&lt;/h2&gt;</summary>
    
    
    
    
    <category term="Stable Diffusion" scheme="https://yousa.love/tags/Stable-Diffusion/"/>
    
  </entry>
  
  <entry>
    <title>泠鸢Lora模型</title>
    <link href="https://yousa.love/2023/05/01/%E6%B3%A0%E9%B8%A2Lora%E6%A8%A1%E5%9E%8B/"/>
    <id>https://yousa.love/2023/05/01/%E6%B3%A0%E9%B8%A2Lora%E6%A8%A1%E5%9E%8B/</id>
    <published>2023-05-01T07:46:44.000Z</published>
    <updated>2023-05-07T07:15:31.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="海盐柠檬"><a href="#海盐柠檬" class="headerlink" title="海盐柠檬"></a>海盐柠檬</h1><span id="more"></span><p><a href="https://www.123pan.com/s/k79SVv-iNzJ.html">网盘链接</a></p><p>模型哈希：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MD5: 3bb7100f186fa28c720e928d31ddb740</span><br><span class="line">SHA1: b5551755b92393db4fce29b468e69c3d1c9dbfa9</span><br><span class="line">SHA256: 942f802f6122afb741f53b617f0a9cd1871c19ed3d2e0d4c98f2434eb12fecd0</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">提示词：yousa,1girl,</span><br><span class="line"></span><br><span class="line">额外可选提示词：dress, hat , flat chest, red eyes, side ponytail,</span><br><span class="line"></span><br><span class="line">跑图建议使用DPM ++2M或DPM ++SDE算法</span><br><span class="line"></span><br><span class="line">权重根据模型不同可以在0.8-1之间调整</span><br></pre></td></tr></tbody></table></figure><p>预览：</p><p><img src="https://pic2.imgdb.cn/item/644f70490d2dde57771d8fb1.png"></p><hr><h1 id="登门喜鹊（待优化）"><a href="#登门喜鹊（待优化）" class="headerlink" title="登门喜鹊（待优化）"></a>登门喜鹊（待优化）</h1><p><a href="https://www.123pan.com/s/k79SVv-zNzJ.html">网盘链接</a></p><p>模型哈希：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MD5: 2718f4f6bc711d3f551599ea873021ac</span><br><span class="line">SHA1: c594d413803aa7aa6c3b528b39250b81b076c22e</span><br><span class="line">SHA256: 1c5d5b5b831e86d5bd15780e29cdb3fad5a579eb2f5f8eee7c47f41b35cf6747</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">提示词：yousa,1girl,</span><br><span class="line"></span><br><span class="line">额外可选提示词：dress, side ponytail, flat chest, red eyes,</span><br><span class="line"></span><br><span class="line">跑图建议使用DPM ++2M或DPM ++SDE算法（感觉Euler a也还不错）</span><br><span class="line"></span><br><span class="line">权重根据模型不同可以在0.7-0.9之间调整；</span><br></pre></td></tr></tbody></table></figure><p>预览：</p><p><img src="https://pic2.imgdb.cn/item/645137590d2dde57775a4c76.jpg"></p><p><img src="https://pic2.imgdb.cn/item/645137910d2dde57775a8c83.jpg"></p><hr><p><font color="red">若您使用此模型，则表明您已阅读并愿意遵守以下使用规约： </font></p><p><font color="red">    1.严禁用此模型参与任何盈利和商业性质活动和内容制作。</font></p><p><font color="red">    2.严禁用此模型参与政治、血腥、暴力、色情、反社会、宗教传播性质的内容制作。</font></p><p><font color="red">    3.严禁用此模型进行侮辱性或猎奇的创作，严禁用于任何损害泠鸢yousa名誉的行为。</font></p><p><font color="red">    4.任何由于不当使用此模型产生的后果由使用者自行承担，与模型训练者无关。</font></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;海盐柠檬&quot;&gt;&lt;a href=&quot;#海盐柠檬&quot; class=&quot;headerlink&quot; title=&quot;海盐柠檬&quot;&gt;&lt;/a&gt;海盐柠檬&lt;/h1&gt;</summary>
    
    
    
    
    <category term="Stable Diffusion" scheme="https://yousa.love/tags/Stable-Diffusion/"/>
    
    <category term="泠鸢yousa" scheme="https://yousa.love/tags/%E6%B3%A0%E9%B8%A2yousa/"/>
    
  </entry>
  
  <entry>
    <title>Typora快速设置文字颜色</title>
    <link href="https://yousa.love/2023/05/01/Typora%E5%BF%AB%E9%80%9F%E8%AE%BE%E7%BD%AE%E6%96%87%E5%AD%97%E9%A2%9C%E8%89%B2/"/>
    <id>https://yousa.love/2023/05/01/Typora%E5%BF%AB%E9%80%9F%E8%AE%BE%E7%BD%AE%E6%96%87%E5%AD%97%E9%A2%9C%E8%89%B2/</id>
    <published>2023-05-01T06:20:13.000Z</published>
    <updated>2023-05-01T06:33:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先安装AutoHotKey"><a href="#先安装AutoHotKey" class="headerlink" title="先安装AutoHotKey"></a>先安装AutoHotKey</h2><span id="more"></span><p><a href="https://autohotkey.com/download/">官方下载</a></p><p><a href="https://www.123pan.com/s/k79SVv-tNzJ.html">网盘</a></p><h2 id="打开记事本，把如下内容复制粘贴进去："><a href="#打开记事本，把如下内容复制粘贴进去：" class="headerlink" title="打开记事本，把如下内容复制粘贴进去："></a>打开记事本，把如下内容复制粘贴进去：</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">; Typora</span><br><span class="line">; 快捷增加字体颜色</span><br><span class="line">; SendInput {Text} 解决中文输入法问题</span><br><span class="line">#IfWinActive ahk_exe Typora.exe</span><br><span class="line">{</span><br><span class="line">    ; Ctrl+Alt+O 橙色</span><br><span class="line">    ^!o::addFontColor("orange")</span><br><span class="line">    ; Ctrl+Alt+R 红色</span><br><span class="line">    ^!r::addFontColor("red")</span><br><span class="line">    ; Ctrl+Alt+B 浅蓝色</span><br><span class="line">    ^!b::addFontColor("cornflowerblue")</span><br><span class="line">}</span><br><span class="line">; 快捷增加字体颜色</span><br><span class="line">addFontColor(color){</span><br><span class="line">    clipboard := "" ; 清空剪切板</span><br><span class="line">    Send {ctrl down}c{ctrl up} ; 复制</span><br><span class="line">    SendInput {TEXT}&lt;font color='%color%'&gt;</span><br><span class="line">    SendInput {ctrl down}v{ctrl up} ; 粘贴</span><br><span class="line">    If(clipboard = ""){</span><br><span class="line">        SendInput {TEXT}&lt;/font&gt; ; Typora 在这不会自动补充</span><br><span class="line">    }else{</span><br><span class="line">        SendInput {TEXT}&lt;/ ; Typora中自动补全标签</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="将文件保存为ahk后缀的文件"><a href="#将文件保存为ahk后缀的文件" class="headerlink" title="将文件保存为ahk后缀的文件"></a>将文件保存为ahk后缀的文件</h2><p>如<code>TyporaHotKey.ahk</code></p><h2 id="双击运行"><a href="#双击运行" class="headerlink" title="双击运行"></a>双击运行</h2><h2 id="在Typora软件里就可以使用快捷键："><a href="#在Typora软件里就可以使用快捷键：" class="headerlink" title="在Typora软件里就可以使用快捷键："></a>在Typora软件里就可以使用快捷键：</h2><p>如按<code>Ctrl+Alt+O</code>添加橙色，<code>Ctrl+Alt+R</code> 红色，按<code>Ctrl+\</code>取消样式！</p><p>也可以右键 <code>MyHotkeyScript.ahk</code> 脚本文件，点击<code>Compile Script</code>编译脚本成exe程序，就可以不用下载<code>Autohotkey</code>在其他电脑上运行了。</p><p>上面脚本只写了橙色、红色、浅蓝三种颜色，你可以按需照例增加其他颜色或快捷方式！</p><h2 id="加入到开机自启动"><a href="#加入到开机自启动" class="headerlink" title="加入到开机自启动"></a>加入到开机自启动</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;先安装AutoHotKey&quot;&gt;&lt;a href=&quot;#先安装AutoHotKey&quot; class=&quot;headerlink&quot; title=&quot;先安装AutoHotKey&quot;&gt;&lt;/a&gt;先安装AutoHotKey&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Python3 基础语法</title>
    <link href="https://yousa.love/2023/05/01/Python3%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://yousa.love/2023/05/01/Python3%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2023-05-01T05:57:45.000Z</published>
    <updated>2023-06-03T12:19:57.142Z</updated>
    
    <content type="html"><![CDATA[<p><strong>笔记</strong></p><span id="more"></span><h1 id="Python3-基础语法"><a href="#Python3-基础语法" class="headerlink" title="Python3 基础语法"></a>Python3 基础语法</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>默认情况下，Python 3 源码文件以 <strong>UTF-8</strong> 编码，所有字符串都是<code>unicode</code>字符串。 当然你也可以为源码文件指定不同的编码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: cp-1252 -*-</span></span><br></pre></td></tr></tbody></table></figure><p>上述定义允许在源文件中使用 Windows-1252 字符集中的字符编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语。</p><hr><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>第一个字符必须是字母表中字母或下划线 <strong>_</strong> 。</li><li>标识符的其他的部分由字母、数字和下划线组成。</li><li>标识符对大小写敏感。</li></ul><p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p><hr><h2 id="python保留字"><a href="#python保留字" class="headerlink" title="python保留字"></a>python保留字</h2><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword.kwlist</span><br><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Python中单行注释以 <strong>#</strong> 开头</p><p>多行注释可以用多个 <strong>#</strong> 号，还有 <code>'''</code> 和 <code>"""</code>：</p><hr><h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 <strong>{}</strong> 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</p><p>程序由于缩进不一致，执行后会出现类似以下错误：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IndentationError: unindent does not match any outer indentation level</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠来实现多行语句，例如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></tbody></table></figure><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 ****，例如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total = [<span class="string">'item_one'</span>, <span class="string">'item_two'</span>, <span class="string">'item_three'</span>,</span><br><span class="line">        <span class="string">'item_four'</span>, <span class="string">'item_five'</span>]</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="数字-Number-类型"><a href="#数字-Number-类型" class="headerlink" title="数字(Number)类型"></a>数字(Number)类型</h2><p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p><ul><li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li><strong>bool</strong> (布尔), 如 True。</li><li><strong>float</strong> (浮点数), 如 1.23、3E-2</li><li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li></ul><hr><h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h2><ul><li>Python 中单引号 <strong>‘</strong> 和双引号 <strong>“</strong> 使用完全相同。</li><li>使用三引号(<strong>‘’’</strong> 或 <strong>“””</strong>)可以指定一个多行字符串。</li><li>转义符 <code>\</code>。</li><li>反斜杠可以用来转义，使用 <code>r</code> 可以让反斜杠不发生转义。 如 <code>r"this is a line with \n"</code> 则 <strong>\n</strong> 会显示，并不是换行。</li><li>按字面意义级联字符串，如 <code>"this " "is " "string"</code> 会被自动转换为 <code>this is string</code>。</li><li>字符串可以用 <strong>+</strong> 运算符连接在一起，用 * 运算符重复。</li><li>Python 中的字符串有两种索引方式，从左往右以 <strong>0</strong> 开始，从右往左以 <strong>-1</strong> 开始。</li><li>Python 中的字符串不能改变。</li><li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li><li>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标:步长]</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'字符串'</span></span><br><span class="line">sentence = <span class="string">"这是一个句子。"</span></span><br><span class="line">paragraph = <span class="string">"""这是一个段落，</span></span><br><span class="line"><span class="string">可以由多行组成"""</span></span><br></pre></td></tr></tbody></table></figure><p><strong>实例：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">'123456789'</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)                 <span class="comment"># 输出字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])           <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])              <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出从第三个开始到第六个的字符（不包含）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:])             <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])          <span class="comment"># 输出从第二个开始到第五个且每隔一个的字符（步长为2）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)             <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">'你好'</span>)         <span class="comment"># 连接字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">'------------------------------'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">'hello\nrunoob'</span>)      <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r'hello\nrunoob'</span>)     <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br></pre></td></tr></tbody></table></figure><p>这里的 r 指 raw，即 raw string，会自动将反斜杠转义，例如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">'\n'</span>)       <span class="comment"># 输出空行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">r'\n'</span>)      <span class="comment"># 输出 \n</span></span><br><span class="line">\n</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure><p><font color="cornflowerblue">以上实例输出结果：</font></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123456789</span></span><br><span class="line"><span class="number">12345678</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">345</span></span><br><span class="line"><span class="number">3456789</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">123456789123456789</span></span><br><span class="line"><span class="number">123456789</span>你好</span><br><span class="line">------------------------------</span><br><span class="line">hello</span><br><span class="line">runoob</span><br><span class="line">hello\nrunoob</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p><p>空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p><p><strong>记住：</strong>空行也是程序代码的一部分。</p><hr><h2 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h2><p>执行下面的程序在按回车键后就会等待用户输入：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>(<span class="string">"\n\n按下 enter 键后退出。"</span>)</span><br></pre></td></tr></tbody></table></figure><p>以上代码中 ，<code>\n\n</code> 在结果输出前会输出两个新的空行。一旦用户按下 <code>enter</code> 键时，程序将退出。</p><hr><h2 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h2><p>Python 可以在同一行中使用多条语句，语句之间使用分号 <strong><code>;</code></strong> 分割，以下是一个简单的实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys; x = <span class="string">'runoob'</span>; sys.stdout.write(x + <span class="string">'\n'</span>)</span><br></pre></td></tr></tbody></table></figure><p>使用脚本执行以上代码，输出结果为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob</span><br></pre></td></tr></tbody></table></figure><p>使用交互式命令行执行，输出结果为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys; x = <span class="string">'runoob'</span>; sys.stdout.write(x + <span class="string">'\n'</span>)</span><br><span class="line">runoob</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></tbody></table></figure><p>此处的 7 表示字符数，<code>runoob</code> 有 6 个字符，<code>\n</code> 表示一个字符，加起来 <strong>7</strong> 个字符。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdout.write(<span class="string">" hi "</span>)    <span class="comment"># hi 前后各有 1 个空格</span></span><br><span class="line"> hi <span class="number">4</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="多个语句构成代码组"><a href="#多个语句构成代码组" class="headerlink" title="多个语句构成代码组"></a>多个语句构成代码组</h2><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><p>我们将首行及后面的代码组称为一个子句(clause)。</p><p>如下实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite</span><br><span class="line"><span class="keyword">elif</span> expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">else</span> : </span><br><span class="line">   suite</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="print-输出"><a href="#print-输出" class="headerlink" title="print 输出"></a>print 输出</h2><p><strong>print</strong> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 **<code>end=""</code>**：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">"a"</span></span><br><span class="line">y=<span class="string">"b"</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x )</span><br><span class="line"><span class="built_in">print</span>( y )</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">'---------'</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x, end=<span class="string">" "</span> )</span><br><span class="line"><span class="built_in">print</span>( y, end=<span class="string">" "</span> )</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></tbody></table></figure><p>以上实例执行结果为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">---------</span><br><span class="line">a b</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h2><p>在 python 用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为： <code>import somemodule</code></p><p>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code></p><p>从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code></p><p>将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'================Python import mode=========================='</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">'命令行参数为:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">    <span class="built_in">print</span> (i)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">'\n python 路径为'</span>,sys.path)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv,path  <span class="comment">#  导入特定的成员</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">'================python from import==================================='</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'path:'</span>,path) <span class="comment"># 因为已经导入path成员，所以此处引用时不需要加sys.path</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python -h</span><br><span class="line">usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...</span><br><span class="line">Options <span class="keyword">and</span> arguments (<span class="keyword">and</span> corresponding environment variables):</span><br><span class="line">-c cmd : program passed <span class="keyword">in</span> <span class="keyword">as</span> string (terminates option <span class="built_in">list</span>)</span><br><span class="line">-d     : debug output <span class="keyword">from</span> parser (also PYTHONDEBUG=x)</span><br><span class="line">-E     : ignore environment variables (such <span class="keyword">as</span> PYTHONPATH)</span><br><span class="line">-h     : <span class="built_in">print</span> this <span class="built_in">help</span> message <span class="keyword">and</span> exit</span><br><span class="line"></span><br><span class="line">[ etc. ]</span><br></pre></td></tr></tbody></table></figure><p>我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用如下：</p><p>Python 提供了 <strong>getopt</strong> 模块来获取命令行参数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py arg1 arg2 arg3</span><br></pre></td></tr></tbody></table></figure><p>Python 中也可以所用 <strong>sys</strong> 的 <strong>sys.argv</strong> 来获取命令行参数：</p><ul><li><strong><code>sys.argv</code></strong> 是命令行参数列表。</li><li><strong><code>len(sys.argv)</code></strong> 计算命令行参数个数。</li></ul><p>注：<code>sys.argv[0]</code> 表示脚本名。</p><p><strong>实例</strong></p><p>test.py 文件代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">'参数个数为:'</span>, <span class="built_in">len</span>(sys.argv), <span class="string">'个参数。'</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">'参数列表:'</span>, <span class="built_in">str</span>(sys.argv))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">'脚本名:'</span>, <span class="built_in">str</span>(sys.argv[<span class="number">0</span>]))</span><br></pre></td></tr></tbody></table></figure><p>执行以上代码，输出结果为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python3 test.py arg1 arg2 arg3</span><br><span class="line">参数个数为: <span class="number">4</span> 个参数。</span><br><span class="line">参数列表: [<span class="string">'test.py'</span>, <span class="string">'arg1'</span>, <span class="string">'arg2'</span>, <span class="string">'arg3'</span>]</span><br><span class="line">脚本名: test.py</span><br></pre></td></tr></tbody></table></figure><h3 id="getopt-模块"><a href="#getopt-模块" class="headerlink" title="getopt 模块"></a>getopt 模块</h3><p>getopt 模块是专门处理命令行参数的模块，用于获取命令行选项和参数，也就是 <code>sys.argv</code>。命令行选项使得程序的参数更加灵活。支持短选项模式 <code>-</code> 和长选项模式 <code>--</code>。</p><p>该模块提供了两个方法及一个异常处理来解析命令行参数。</p><h4 id="getopt-getopt-方法"><a href="#getopt-getopt-方法" class="headerlink" title="getopt.getopt 方法"></a>getopt.getopt 方法</h4><p>getopt.getopt 方法用于解析命令行参数列表，语法格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getopt.getopt(args, options[, long_options])</span><br></pre></td></tr></tbody></table></figure><p>方法参数说明：</p><ul><li><strong>args</strong>: 要解析的命令行参数列表。</li><li><strong>options</strong>: 以字符串的格式定义，<strong>options</strong> 后的冒号 <strong>:</strong> 表示该选项必须有附加的参数，不带冒号表示该选项不附加参数。</li><li><strong>long_options</strong>: 以列表的格式定义，<strong>long_options</strong> 后的等号 <strong>=</strong> 表示如果设置该选项，必须有附加的参数，否则就不附加参数。</li></ul><p>该方法返回值由两个元素组成: 第一个是 <strong>(option, value)</strong> 元组的列表。 第二个是参数列表，包含那些没有 <strong>-</strong> 或 <strong>–</strong> 的参数。</p><p>接下来我们定义一个 site() 函数，然后通过命令行输入站点名称 <strong>name</strong> 和网址 <strong>url</strong>，可以用缩写 <strong>n</strong> 和 <strong>u</strong>:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">site</span>():</span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    url = <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">    argv = sys.argv[<span class="number">1</span>:]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opts, args = getopt.getopt(argv, <span class="string">"n:u:"</span>)  <span class="comment"># 短选项模式</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Error"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> opt, arg <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> opt <span class="keyword">in</span> [<span class="string">'-n'</span>]:</span><br><span class="line">            name = arg</span><br><span class="line">        <span class="keyword">elif</span> opt <span class="keyword">in</span> [<span class="string">'-u'</span>]:</span><br><span class="line">            url = arg</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">print</span>( name +<span class="string">" "</span> + url)</span><br><span class="line"> </span><br><span class="line">site()</span><br></pre></td></tr></tbody></table></figure><p>测试以上代码，命令行中输入：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 test.py -n yousa -u yousa.love</span><br></pre></td></tr></tbody></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yousa yousa.love</span><br></pre></td></tr></tbody></table></figure><p>以下实例演示长选项模式的使用：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">site</span>():</span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    url = <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">    argv = sys.argv[<span class="number">1</span>:]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opts, args = getopt.getopt(argv, <span class="string">"n:u:"</span>,  </span><br><span class="line">                                   [<span class="string">"name="</span>,</span><br><span class="line">                                    <span class="string">"url="</span>])  <span class="comment"># 长选项模式</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Error"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> opt, arg <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> opt <span class="keyword">in</span> [<span class="string">'-n'</span>, <span class="string">'--name'</span>]:</span><br><span class="line">            name = arg</span><br><span class="line">        <span class="keyword">elif</span> opt <span class="keyword">in</span> [<span class="string">'-u'</span>, <span class="string">'--url'</span>]:</span><br><span class="line">            url = arg</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">print</span>( name + <span class="string">" "</span> + url)</span><br><span class="line"> </span><br><span class="line">site()</span><br></pre></td></tr></tbody></table></figure><p>测试以上代码，命令行中输入：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 test.py -n yousa -u yousa.love</span><br></pre></td></tr></tbody></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yousa yousa.love</span><br></pre></td></tr></tbody></table></figure><p>另外一个方法是 <code>getopt.gnu_getopt</code>，用到的情况比较少，这里不多做介绍。</p><h3 id="Exception-getopt-GetoptError"><a href="#Exception-getopt-GetoptError" class="headerlink" title="Exception getopt.GetoptError"></a>Exception getopt.GetoptError</h3><p>在没有找到参数列表，或选项的需要的参数为空时会触发该异常。</p><p>异常的参数是一个字符串，表示错误的原因。属性 <strong>msg</strong> 和 <strong>opt</strong> 为相关选项的错误信息。</p><p><strong>实例</strong></p><p>假定我们创建这样一个脚本，可以通过命令行向脚本文件传递两个文件名，同时我们通过另外一个选项查看脚本的使用。脚本使用方法如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;</span><br></pre></td></tr></tbody></table></figure><p>test.py 文件代码如下所示：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, getopt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">   inputfile = <span class="string">''</span></span><br><span class="line">   outputfile = <span class="string">''</span></span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">      opts, args = getopt.getopt(argv,<span class="string">"hi:o:"</span>,[<span class="string">"ifile="</span>,<span class="string">"ofile="</span>])</span><br><span class="line">   <span class="keyword">except</span> getopt.GetoptError:</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">'test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;'</span>)</span><br><span class="line">      sys.exit(<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">for</span> opt, arg <span class="keyword">in</span> opts:</span><br><span class="line">      <span class="keyword">if</span> opt == <span class="string">'-h'</span>:</span><br><span class="line">         <span class="built_in">print</span> (<span class="string">'test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;'</span>)</span><br><span class="line">         sys.exit()</span><br><span class="line">      <span class="keyword">elif</span> opt <span class="keyword">in</span> (<span class="string">"-i"</span>, <span class="string">"--ifile"</span>):</span><br><span class="line">         inputfile = arg</span><br><span class="line">      <span class="keyword">elif</span> opt <span class="keyword">in</span> (<span class="string">"-o"</span>, <span class="string">"--ofile"</span>):</span><br><span class="line">         outputfile = arg</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">'输入的文件为：'</span>, inputfile)</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">'输出的文件为：'</span>, outputfile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">   main(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></tbody></table></figure><p>执行以上代码，输出结果为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python3 test.py -h</span><br><span class="line">usage: test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;</span><br><span class="line"></span><br><span class="line">python3 test.py -i inputfile -o outputfile</span><br><span class="line">输入的文件为： inputfile</span><br><span class="line">输出的文件为： outputfile</span><br></pre></td></tr></tbody></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;笔记&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://yousa.love/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pdf测试</title>
    <link href="https://yousa.love/2023/05/01/pdf%E6%B5%8B%E8%AF%95/"/>
    <id>https://yousa.love/2023/05/01/pdf%E6%B5%8B%E8%AF%95/</id>
    <published>2023-05-01T03:32:58.000Z</published>
    <updated>2023-05-01T03:42:44.235Z</updated>
    
    <content type="html"><![CDATA[<p>测试</p><span id="more"></span><iframe style="width:100%;height:500px" src="https://flbook.mwkj.net/c/abd7lDexY1" seamless="seamless" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true"></iframe>]]></content>
    
    
    <summary type="html">&lt;p&gt;测试&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>元素法典</title>
    <link href="https://yousa.love/2023/04/22/%E5%85%83%E7%B4%A0%E6%B3%95%E5%85%B8/"/>
    <id>https://yousa.love/2023/04/22/%E5%85%83%E7%B4%A0%E6%B3%95%E5%85%B8/</id>
    <published>2023-04-22T04:34:25.000Z</published>
    <updated>2023-05-13T08:54:13.587Z</updated>
    
    <content type="html"><![CDATA[<p><strong>欢迎来到魔法的世界！</strong></p><span id="more"></span><h1 id="冰魔法"><a href="#冰魔法" class="headerlink" title="冰魔法"></a>冰魔法</h1><p>正面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(((masterpiece))),best quality, illustration,(beautiful detailed girl),beautiful detailed glow,detailed ice,beautiful detailed water,(beautiful detailed eyes),expressionless,(floating palaces),azure hair,disheveled hair,long bangs, hairs between eyes,(skyblue dress),black ribbon,white bowties,midriff,{{{half closed eyes}}},big forhead,blank stare,flower,large top sleeves</span><br></pre></td></tr></tbody></table></figure><p>反面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">owres,bad anatomy,bad hands,text,error,missing fingers,extra digit,fewer digits,cropped,worst quality,low quality,normal quality,jpeg artifacts,signature,watermark,username,blurry,missing fingers,bad hands,missing arms,large breasts</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steps: 27, Sampler: Euler a, CFG scale: 7</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p><img src="https://pic1.imgdb.cn/item/644368d20d2dde5777cbcd70.jpg"></p><h1 id="星空法"><a href="#星空法" class="headerlink" title="星空法"></a>星空法</h1><p>正面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((masterpiece)),&nbsp;(((best&nbsp;quality))),&nbsp;((ultra-detailed)),&nbsp;((illustration)),&nbsp;((disheveled&nbsp;hair)),&nbsp;beautiful&nbsp;detailed&nbsp;eyes,&nbsp;(1girl:1.2),(solo),&nbsp;dynamic&nbsp;angle,&nbsp;dark&nbsp;magician&nbsp;girl,(black&nbsp;kneehighs:1.1),(starry&nbsp;tornado:1.4),&nbsp;starry&nbsp;Nebula,&nbsp;((frills)),&nbsp;beautiful&nbsp;detailed&nbsp;sky,&nbsp;beautiful&nbsp;detailed&nbsp;eyes,evil&nbsp;smile,&nbsp;expressionless,hairs&nbsp;between&nbsp;eyes,&nbsp;&nbsp;white&nbsp;&nbsp;hair,pleated&nbsp;skirt,((disreveled hair))</span><br></pre></td></tr></tbody></table></figure><p>反面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lowres,&nbsp;bad&nbsp;anatomy,&nbsp;bad&nbsp;hands,&nbsp;text,&nbsp;error,&nbsp;missing&nbsp;fingers,&nbsp;extra&nbsp;digit,&nbsp;fewer&nbsp;digits,&nbsp;cropped,&nbsp;worst&nbsp;quality,&nbsp;low&nbsp;quality,&nbsp;normal&nbsp;quality,&nbsp;jpeg&nbsp;artifacts,&nbsp;signature,&nbsp;watermark,&nbsp;username,&nbsp;blurry,missing&nbsp;fingers,bad&nbsp;hands,missing&nbsp;arms</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steps: 50, Sampler: Euler a, CFG scale: 6</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p><img src="https://pic1.imgdb.cn/item/64437c120d2dde5777e28338.jpg"></p><h1 id="幻之时"><a href="#幻之时" class="headerlink" title="幻之时"></a>幻之时</h1><p>正面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{masterpiece},{best quality},{1girl},Amazing,beautiful detailed eyes,finely detail,Depth of field,extremely detailed CG,original, extremely detailed wallpaper,loli,white_hair,magic_circle,cat_ears,long_hair,white_hair/yellow_eyes,wand,pentagram,clock, {masterpiece},{best quality},{1girl},Amazing,beautiful detailed eyes,finely detail,Depth of field,extremely detailed CG,original, extremely detailed wallpaper,loli, white_hair</span><br></pre></td></tr></tbody></table></figure><p>反面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsfw,&nbsp;lowres,&nbsp;bad&nbsp;anatomy,&nbsp;bad&nbsp;hands,&nbsp;text,&nbsp;error,&nbsp;missing&nbsp;fingers,&nbsp;extra&nbsp;digit,&nbsp;fewer&nbsp;digits,&nbsp;cropped,&nbsp;worst&nbsp;quality,&nbsp;low&nbsp;quality,&nbsp;normal&nbsp;quality,&nbsp;jpeg&nbsp;artifacts,&nbsp;signature,&nbsp;watermark,&nbsp;username,&nbsp;blurry,&nbsp;nsfw,&nbsp;lowres,&nbsp;bad&nbsp;anatomy,&nbsp;bad&nbsp;hands,&nbsp;text,&nbsp;error,&nbsp;missing&nbsp;fingers,&nbsp;extra&nbsp;digit,&nbsp;fewer&nbsp;digits,&nbsp;cropped,&nbsp;worst&nbsp;quality,&nbsp;low&nbsp;quality,&nbsp;normal&nbsp;quality,&nbsp;jpeg&nbsp;artifacts,&nbsp;signature,&nbsp;watermark,&nbsp;username,&nbsp;blurry</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steps: 25, Sampler: Euler a, CFG scale: 7</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p><img src="https://pic1.imgdb.cn/item/64437d5f0d2dde5777e3c965.jpg"></p><h1 id="圣光法"><a href="#圣光法" class="headerlink" title="圣光法"></a>圣光法</h1><p>正面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(((masterpiece))),&nbsp;(((best&nbsp;quality))),&nbsp;((ultra-detailed)),&nbsp;(illustration),&nbsp;(detailed&nbsp;light),((an&nbsp;extremely&nbsp;delicate&nbsp;and&nbsp;beautiful)),(beautiful&nbsp;detailed&nbsp;eyes),&nbsp;(sunlight),(angel),solo,young&nbsp;girls,dynamic&nbsp;angle,floating,&nbsp;bare_shoulders,looking_at_viewer&nbsp;,wings&nbsp;,arms_up,halo,Floating&nbsp;white&nbsp;silk,(Holy&nbsp;Light),just&nbsp;like&nbsp;silver&nbsp;stars&nbsp;imploding&nbsp;we&nbsp;absorb&nbsp;the&nbsp;light&nbsp;of&nbsp;day</span><br></pre></td></tr></tbody></table></figure><p>反面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lowres,&nbsp;bad&nbsp;anatomy,&nbsp;bad&nbsp;hands,&nbsp;text,&nbsp;error,&nbsp;missing&nbsp;fingers,&nbsp;extra&nbsp;digit,&nbsp;fewer&nbsp;digits,&nbsp;cropped,&nbsp;worst&nbsp;quality,&nbsp;low&nbsp;quality,&nbsp;normal&nbsp;quality,&nbsp;jpeg&nbsp;artifacts,&nbsp;signature,&nbsp;watermark,&nbsp;username,&nbsp;blurry,missing&nbsp;fingers,bad&nbsp;hands,missing&nbsp;arms,large&nbsp;breasts</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steps: 36, Sampler: Euler a, CFG scale: 7</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><img src="https://pic1.imgdb.cn/item/64437f5a0d2dde5777e61c5e.png" style="zoom:50%;"><h1 id="虹彩法"><a href="#虹彩法" class="headerlink" title="虹彩法"></a>虹彩法</h1><blockquote><p><del><em>谁不喜欢色彩斑斓的女孩子呢？</em></del></p></blockquote><p>正面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((extremely&nbsp;detailed&nbsp;CG)),((8k_wallpaper)),(((masterpiece))),((best&nbsp;quality)),watercolor_(medium),((beautiful&nbsp;detailed&nbsp;starry&nbsp;sky)),cinmatic&nbsp;lighting,loli,princess,very&nbsp;long&nbsp;rainbow&nbsp;hair,side&nbsp;view,looking&nbsp;at&nbsp;viewer,full&nbsp;body,frills,(far&nbsp;from&nbsp;viewer),((extremely&nbsp;detailed&nbsp;face)),((an&nbsp;extremely&nbsp;delicate&nbsp;and&nbsp;beautiful&nbsp;girl)),((extremely&nbsp;detailed&nbsp;cute&nbsp;anime&nbsp;face)),((extremely&nbsp;detailed&nbsp;eyes)),(((extremely&nbsp;detailed&nbsp;body))),(ultra&nbsp;detailed),illustration,((bare&nbsp;stomach)),((bare&nbsp;shoulder)),small&nbsp;breast,((sideboob)),((((floating&nbsp;and&nbsp;rainbow&nbsp;hair)))),(((Iridescence&nbsp;and&nbsp;rainbow&nbsp;hair))),(((extremely&nbsp;detailed&nbsp;sailor&nbsp;dress))),((((Iridescence&nbsp;and&nbsp;rainbow&nbsp;dress)))),(Iridescence&nbsp;and&nbsp;rainbow&nbsp;eyes),beautiful&nbsp;detailed&nbsp;hair,beautiful&nbsp;detailed&nbsp;dress,dramatic&nbsp;angle,expressionless,(big&nbsp;top&nbsp;sleeves),frills,blush,(ahoge)</span><br></pre></td></tr></tbody></table></figure><p>反面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lowres,bad&nbsp;anatomy,bad&nbsp;hands,text,error,ugly,duplicate,morbid,boken&nbsp;limb,incorrect&nbsp;limb,fusion&nbsp;finger,lose&nbsp;finger,multiple&nbsp;finger,multiple&nbsp;digit,fusion&nbsp;hand,lose&nbsp;leg,fused&nbsp;leg,multiple&nbsp;leg,bad&nbsp;feet,fewer&nbsp;digits,cropped,worst&nbsp;quality,low&nbsp;quality,normal&nbsp;quality,simple&nbsp;background, jpeg,</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steps: 28, Sampler: Euler a, CFG scale: 5</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p><img src="https://pic1.imgdb.cn/item/6443830a0d2dde5777ec3d3b.jpg"></p><h1 id="冬雪法"><a href="#冬雪法" class="headerlink" title="冬雪法"></a>冬雪法</h1><blockquote><p><del>果然雪天还是要配白毛红瞳！</del></p></blockquote><p>正面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(((masterpiece))),&nbsp;(((best&nbsp;quality))),&nbsp;((ultra-detailed)),&nbsp;(illustration),beautiful&nbsp;detailed&nbsp;sky ,night,stars,(1girl)((an&nbsp;extremely&nbsp;delicate&nbsp;and&nbsp;beautiful&nbsp;girl)),red eyes,dramatic angle,small breasts,(((full body))),hood,cold face and white shirt,(((long white hair))),(red hair),(red plum blossom),((winter)),(((snowflakes))){{{{{{detailed&nbsp;cute&nbsp;anime&nbsp;face}}}}}},cinmatic&nbsp;lighting,((red and white flowers))，hairs&nbsp;between&nbsp;eyes,&nbsp;expressionless, young&nbsp;girl,(((Facing&nbsp;the&nbsp;lens))),(starry sky),((Beautiful&nbsp;face)),((full body)),(sitting),depth_of_field,((colorful)),scenery,hair_flower,lantern,christmas,(starfall)</span><br></pre></td></tr></tbody></table></figure><p>反面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(((ugly))),(((duplicate))),((morbid)),((mutilated)),(((tranny))),mutated hands,(((poorly drawn hands))),blurry,((bad anatomy)),(((bad proportions))),extra limbs,cloned face,(((disfigured))),(((more than 2 nipples))),((((missing arms)))),(((extra legs))),mutated hands,(((((fused fingers))))),(((((too many fingers))))),(((unclear eyes))),lowers,bad anatomy,bad hands,text,error,missing fingers,extra digit,fewer digits,cropped,worst quality,low quality,normal quality,jpeg artifacts,signature,watermark,username,blurry,bad feet，text font ui,malformed hands,long neck,missing limb,(mutated hand and finger: 1.5),(long body: 1.3),(mutation poorly drawn: 1.2),disfigured,malformed mutated,multiple breasts,</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steps: 30, Sampler: Euler a, CFG scale: 7</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p><img src="https://pic1.imgdb.cn/item/644384c90d2dde5777ee3055.jpg"></p><h1 id="银河潜航"><a href="#银河潜航" class="headerlink" title="银河潜航"></a>银河潜航</h1><p>正面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(((masterpiece,best quality,an extremely delicate and beautiful,illustration))),</span><br><span class="line"></span><br><span class="line">(from side,medium long shot),</span><br><span class="line"></span><br><span class="line">((a cute_detailed_girl in spacesuit,beautiful_detailed_face in aerospace_helmet)),(((upper body))),(disheveled hair:0.3),</span><br><span class="line"></span><br><span class="line">(((clouds:0.3),multiple_luna,(floating_fortress technology machinery),night sky background)),</span><br><span class="line"></span><br><span class="line">(cyberpunk_aerospace_helmet)</span><br></pre></td></tr></tbody></table></figure><p>反面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsfw,lowres,bad anatomy,cropped,worst quality,low quality,normal quality,missing arms,long neck,humpbacked,nude</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steps: 30, Sampler: DDIM, CFG scale: 7</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p><img src="https://pic2.imgdb.cn/item/644ce74a0d2dde577790ff80.webp"></p><h1 id="月下湖中"><a href="#月下湖中" class="headerlink" title="月下湖中"></a>月下湖中</h1><p>正面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(masterpiece),(wallpaper), (best quality), (best illuminate, best shadow), (best illustration), dynamic angle,</span><br><span class="line"></span><br><span class="line">(+++a girl+++) is walking in front of a delicate and beautiful moon-blue sky, solo, from side,</span><br><span class="line"></span><br><span class="line">(Backlight), mid shot, (the beautiful and delicate girl:1.3), beautiful bare back, (detailed face:1.2), (long floating hair:1.2), (beautiful long dress:1.2), floating dress,</span><br><span class="line"></span><br><span class="line">the girl (walking) on surface of the water, Beautiful and delicate violet light water surface, reflective water surface,</span><br><span class="line"></span><br><span class="line">High saturation blue clouds and (stars sky) in the background, cold color </span><br></pre></td></tr></tbody></table></figure><p>反面tag：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">((((ugly)))),lowres, bad anatomy,worst quality, low quality, normal quality,</span><br><span class="line"></span><br><span class="line">bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, jpeg artifacts, signature, watermark, username, blurry, Missing limbs, three arms, bad feet,</span><br><span class="line"></span><br><span class="line">text font ui, signature, blurry, malformed hands, long neck, mutated hands and fingers :1.5).(long body :1.3),(mutation ,poorly drawn :1.2), disfigured, malformed, mutated, multiple breasts, futa, yaoi, three legs, huge breasts</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steps: 30, Sampler: Euler a, CFG scale: 7</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p><img src="https://pic2.imgdb.cn/item/644ceb1a0d2dde5777948efc.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;欢迎来到魔法的世界！&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Stable Diffusion" scheme="https://yousa.love/tags/Stable-Diffusion/"/>
    
  </entry>
  
  <entry>
    <title>《名侦探柯南》主线整理</title>
    <link href="https://yousa.love/2023/04/22/%E3%80%8A%E5%90%8D%E4%BE%A6%E6%8E%A2%E6%9F%AF%E5%8D%97%E3%80%8B%E4%B8%BB%E7%BA%BF%E6%95%B4%E7%90%86/"/>
    <id>https://yousa.love/2023/04/22/%E3%80%8A%E5%90%8D%E4%BE%A6%E6%8E%A2%E6%9F%AF%E5%8D%97%E3%80%8B%E4%B8%BB%E7%BA%BF%E6%95%B4%E7%90%86/</id>
    <published>2023-04-22T03:54:13.000Z</published>
    <updated>2023-04-22T04:40:55.642Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：B站@<a href="https://space.bilibili.com/586669368">棕四火</a></p><span id="more"></span><h1 id="故事的缘起"><a href="#故事的缘起" class="headerlink" title="故事的缘起"></a>故事的缘起</h1><p>001 云霄飞车杀人事件 // 新一被两个黑衣人灌下特殊药成为柯南</p><p>002 董事长千金绑架事件 // 柯南寄宿毛利兰家</p><p>003 偶像密室杀人事件  //  冲野洋子初登场</p><p>005 新干线大爆破事件 // 得知两个黑衣人外号分别是琴酒和伏特加</p><p>006 情人节杀人事件  //  铃木园子初登场 </p><p>007 每月一件礼物威胁事件 // 小兰第一次怀疑柯南是新一</p><p>009 天下第一夜祭杀人事件//横沟参悟初登场</p><p>010 足球选手恐吓事件//赤木英雄初登场</p><p>014 奇怪的寻人事件 // 宫野明美（广田雅美）初登场（存在bug）</p><p>019 六月新娘杀人事件//松本清长初登场</p><p>033 咖啡店杀人事件//妃英理初登场</p><p>044 江户川柯南诱拐事件 // 工藤优作、工藤有希子初登场并知道柯南真实身份</p><p>049-050 外交官杀人事件 // 服部平次初登场//柯南第一次变回新一</p><p>056 电玩公司杀人事件 // 龙舌兰登场并死亡</p><p>059-060 福尔摩斯迷杀人事件 // 服部平次知道柯南真实身份</p><p>068 夜路杀人事件//高木涉正式登场</p><p>078-079 柯南对怪盗基德//怪盗基德、中森银三、铃木朋子初登场 </p><p>080 名家连续惨死事件//服部平藏初登场</p><p>099-102 走投无路的名侦探，连续两大杀人事件 // 小兰第二次怀疑柯南是新一//山村操初登场</p><p>118 帝丹小学七大离奇事件//小林澄子初登场</p><p>124-125 浪花连续杀人事件//远山和叶、远山银司郎、大泷悟郎、沼渊己一郎初登场</p><h1 id="灰原哀篇"><a href="#灰原哀篇" class="headerlink" title="灰原哀篇"></a>灰原哀篇</h1><p>135 黑衣组织10亿元抢劫事件 // 宫野明美被杀</p><p>136-139 来自黑衣组织的女子，大学教授杀人事件 // 宫野志保（灰原哀）初登场</p><p>140-141 竞技场一视同仁胁迫事件 // 佐藤美和子初登场</p><p>156-157 总局刑警恋爱物语//宫本由美初登场</p><p>162 神秘老人失踪事件//夏本梓初登场</p><p>163-164 园子的危险夏日物语 // 京极真初登场</p><p>172-173 飞天密室 工藤新一最初的事件 // 新一第一次处理命案</p><p>190-192 与黑衣组织的再会 // 灰原哀第一次变回宫野志保 </p><h1 id="贝尔摩德篇"><a href="#贝尔摩德篇" class="headerlink" title="贝尔摩德篇"></a>贝尔摩德篇</h1><p>181-182 黑暗中的死角 // 新出医生初登场【候选人】</p><p>203-208 生死一瞬间 // 小兰第三次怀疑柯南是新一//柯南第二次变回新一</p><p>233-234 目暮警官尘封在内心里的秘密//目暮绿初登场</p><p>235-238 名侦探齐聚一堂！工藤新一VS怪盗基德//首次提乌丸莲耶//白马探、寺井黄之助初登场</p><p>241-243人鱼失踪记</p><p>245-246 战斗游戏的陷阱 // 茱蒂初登场【候选人】</p><p>249-250 神秘的乘客 // 赤井秀一初登场【候选人】</p><p>261 元太的灾难 // 琴酒信息</p><p>265-266 网中谜</p><p>277-278 来自芝加哥的男人 // 詹姆斯初登场</p><p>282-285 大阪双重疑案 浪花剑客与太阁城//冲田总司初登场</p><p>288-190 情人节的真相</p><p>291-292 犯罪的纪念品</p><p>293-294 情急之下的应变之道</p><p>299-300 英语教师VS关西名侦探 // 柯南调查朱蒂</p><p>301-302 疯狂足球迷//比护隆佑、莎朗·温亚德初登场</p><p>306-307 中华街的雨中幻影//横沟重悟初登场</p><p>308-310 工藤新一的纽约事件 // 毛利兰第一次见到贝尔摩德</p><p>311-312 光彦森林迷失记//沼渊己一郎相关//圆谷朝美（光彦姐姐）初登场</p><p>323-324 恶意与圣者的游行//松田阵平被回忆</p><p>326-329 撼动警视厅1200万名人质 // 松田阵平正式初登场// 萩原研二初登场</p><p>332-333 遗留的无声 // 板仓卓登场</p><p>334-336 接触黑色组织 // 柯南冒充板仓卓交易差点被发现</p><p>350-352 火焰中的红马//弓长警部初登场</p><p>354-355 用钱买不到的友情//宫野厚司&amp;爱莲娜信息</p><p>358-359 相似的两位公主</p><p>360-361 东都现象所的秘密</p><p>363-364 四台保时捷 // 新出智明第一次接触到灰原哀</p><p>365-366 隐藏在厕所里的秘密 // 灰原哀得到其母亲宫野艾莲娜的录音带</p><p>369-370 便利商店的陷阱 // 小兰发现朱蒂在调查新一</p><p>371-375 与黑衣组织面对面对决，满月的双重案件 // 贝尔摩德身份曝光</p><p>376-377 找寻臀部上的记号 // 灰原哀拒绝FBI保护计划</p><p>392-393 帝丹高中校园灵异事件 // 新出智明回归</p><p>405-406 星星与香菸的暗号 // Boss在鸟取县 </p><p>419-421 斯托拉帝巴力欧斯不协调的和音 前奏曲 // Boss电子邮箱地址曝光</p><p>428-430 诡异宅院大冒险</p><p>432-433 诡谲家族的委托 </p><p>434 满腹疑惑的小兰 // 小兰第四次怀疑柯南是新一</p><p>455-456 银杏色的初恋 // 阿笠博士的故事 </p><h1 id="红与黑的对决篇"><a href="#红与黑的对决篇" class="headerlink" title="红与黑的对决篇"></a>红与黑的对决篇</h1><p>459-463 黑色冲击，组织之手伸来的瞬间 // 水无怜奈(基尔)、基安蒂、科恩初登场</p><p>465-466 超机密的上学路 </p><p>467-468 无法回头的两个人 // 本堂瑛佑初登场</p><p>473-474 侦探团备受瞩目的采访 </p><p>502-505 黑色组织之影系列 // 红黑篇前奏</p><p>512-513 工藤新一少年冒险 //黑羽盗一初登场</p><p>527-528 黑色照片的下落 // 调查伊森本堂</p><p>536-537 服部平次v.s.工藤新一 滑雪场的推理对决 </p><p>538-551 红与黑的撞击系列//水无怜奈身份曝光 // 卡梅隆初登场 // 赤井秀一殉职</p><p>554-555 卡拉OK包厢的死角 // 本堂瑛佑知道柯南身份</p><h1 id="波本篇"><a href="#波本篇" class="headerlink" title="波本篇"></a>波本篇</h1><p>556 红白黄色和侦探团 // 冲矢昴初登场【候选人】</p><p>557 柯南vs双重暗号之谜 // 柯南邀请冲矢昴入住工藤家</p><p>558 推理对决 新一v.s.冲矢昴 // 得知冲矢昴喜欢喝”波本”酒</p><p>564-566 风火林山系列 // 大和敢助，上原由衣初登场</p><p>570-571 杀人犯工藤新一</p><p>572-573 新一的真实身分和小兰的眼泪 // 柯南第三次变回新一</p><p>574 真正想知道的事</p><p>575-576 憎恨的蓝色火花 </p><p>593-594 鱼儿消失的一角岩 // 冲矢昴再喝”波本”酒</p><p>608 危险的二人组  </p><p>609-612 死亡之馆赤壁系列 // 诸伏高明初登场 </p><p>614-615 侦探团v.s.抢匪团系列 // 伤疤赤井秀一现身</p><p>629 引发危机的红色前兆 // 寻找伤疤赤井秀一</p><p>630 黑色13的暗示 // 琴酒怀疑赤井秀一没死</p><p>631 步步逼近的黑色期限 // 琴酒，伏特加，基尔再提波本</p><p>632 摇曳的红色目标 </p><p>667-672 福尔摩斯默示录系列 // 柯南第四次变回新一 // 新一对小兰告白</p><p>673-674 紧急事件252</p><p>675 初恋的影像录//三池苗子初登场</p><p>695-696 美味得要死的拉面//不是很重要但是剧情很好</p><p>697-698 幽灵饭店的推理对决 // 世良真纯初登场【候选人】</p><p>699-701 侦探事务所挟持事件系列</p><p>702-703 柯南v.s.平次 东西侦探推理对决</p><p>704-707 毒与恨的设计系列 // 米原樱子登场 </p><p>708-709 博士的影音网站 // 冲矢昴窃听柯南灰原哀谈话</p><p>719-720 婚礼前夕 // 安室透初登场【候选人】 </p><p>723-726 侦探们的夜想曲系列 // 冲矢昴，世良真纯，安室透同时出场</p><p>727-728 一点都不原谅</p><p>733 赌上性命的恋爱转播//伊达航初登场</p><p>735 以性命为赌注的恋爱转播</p><p>736-737 泡沫 热气与烟</p><p>742-743 工藤优作的未解决事件 // 冲矢昴知道柯南真实身份</p><p>746 老店消失的日式甜点 // 画质大提升（非主线）</p><p>751-752 迫近灰原秘密的黑影 // 灰原哀第二次变会宫野志保 // 为下集做铺垫</p><p>753-756 漆黑的神秘列车 // 波本身份曝光</p><h1 id="绯色篇"><a href="#绯色篇" class="headerlink" title="绯色篇"></a>绯色篇</h1><p>757-758 密室里的柯南，揭开谜底的波本</p><p>774-775 香甜冰冷的宅急便 </p><p>776-777 怪盗基德与赤面人鱼//怪盗基德知道世良是女生//暗示世良和秀一是</p><p>兄妹</p><p>779-780 装满水果的宝箱 </p><p>783-784 现场的邻人是前男友 // 羽田秀吉初登场</p><p>786-787 茱蒂的回忆与赏花陷阱 // 柯南与茱蒂交流情报被偷听</p><p>791-792 小五郎在BAR </p><p>793-794 小兰也昏倒的浴室 // 世良在推理前打电话</p><p>804-805 招财三色猫事件//安室透称柯南“将利爪隐藏在天真的笑容之下”</p><p>807-809 红衣女的惨剧 // 领域外的妹妹第一次登场（本集很精彩，推荐观看）</p><p>812-813 恋爱小说的意外结果 // 领域外的妹妹（世良玛丽）正式登场</p><p>816-817 柯南与平次 恋爱的信号 // 你要对我的和叶做什么</p><p>823-824 气氛僵硬的茶会 // 安室透调查楠田陆道 // 安室透的信息</p><p>825-826 工藤新一水族馆事件 </p><p>832-836 绯色系列 // 安室透、冲矢昴身份揭晓 </p><h1 id="朗姆篇（连载中）"><a href="#朗姆篇（连载中）" class="headerlink" title="朗姆篇（连载中）"></a>朗姆篇（连载中）</h1><p>838-839 太阁之恋名人战 // 世良搬进杯户尊豪酒店</p><p>840-841 盛夏沉入泳池的谜</p><p>845-846 三个第一发现者 //  朗姆有关信息</p><p>863-864 镰鼬旅馆</p><p>865-867 县警的黑暗 // 黑田兵卫初登场【候选人】 </p><p>868 悄悄靠近安室的黑暗</p><p>869-870 博客女演员的密室事件 </p><p>882-883 好吃到要死的拉面2 // 领妹的真名</p><p>891-892 关系恶劣的女子乐队</p><p>898-899 不明真相的侦探团</p><p>904-905 结婚登记表的密码 // 羽田浩司相关 </p><p>908-909 樱花班的回忆</p><p>916-917 与17年前一样的案发现场 // 羽田浩司案件</p><p>918-919 灵魂侦探凶杀案 // 柯南认为羽田浩司被朗姆杀害</p><p>921-922 背叛的舞台 //波本和贝尔摩德调查浅香</p><p>933-934 试衣间的死角</p><p>936-937 涟漪上的魔法师</p><p>940-941 在白罗咖啡厅解谜//伊织无我初登场</p><p>944-945 新老师的骸骨事件 // 若狭留美初登场【候选人】 </p><p>949-950 隔壁的江户式推理秀 // 胁田兼则初登场【候选人】  </p><p>951-952 手部白皙的女人</p><p>956-957 妃律师的求救讯号 // 毛利兰第五次怀疑江户川柯南是工藤新一</p><p>964-965 燃烧帐篷的怪物 // 黑田兵卫，若狭留美出场</p><p>971-972 恋爱与推理的剑道大赛 </p><p>974-975 女子高中生3人组的秘密咖啡店</p><p>980-981 充满心意的手机吊饰//风见裕也初登场</p><p>982-985 红色的修学旅行 // 世纪之吻</p><p>998-999 寻找玛丽亚</p><p>1009-1011 充满谜团的鸡尾酒</p><p>1028-1031 目标是警视厅交通部</p><p>1040-1041 基德对高明 被盯上的嘴唇</p><p>1050-1052  替身京极真</p><p>1060-1062  36宫格的完美犯罪 // 朗姆性格曝光</p><p>1068-1069 挖野草与四叶草</p><p>1075-1077 藏不住的古董盘 </p><p>1081-1082 大冈红叶的挑战书</p><p>1086 警察学校篇 疯狂警察故事 松田阵平篇</p><p>1090-1092 太阁名人的将棋盘</p><p>1095 警察学校篇 疯狂警察故事伊达航篇</p><p>1096 会飞的万圣节南瓜//联动M25//非主线</p><p>1099 警察学校篇 疯狂警察故事 萩原研二篇</p><p>1102-1103 遭天谴的生日宴//世良偷解药</p><p>1110-1111 掉入牧场的火种//若狭留美击倒安室透</p><p>1116-1117冲野洋子和阁楼的密室//胁田兼则登场</p><p>1118 警察学校篇 疯狂警察故事诸伏景光篇</p><p>1128-1129 工藤优作的推理秀//海猿岛篇的预热//结尾有重要主线</p><p>1134 警察学校篇 疯狂警察故事降谷零篇</p><p>1135-1137 黑暗组织的谋略篇//红与黑的再次碰撞//朗姆登场//朗姆揭晓</p><p>1138 对准灰原哀的摄像头//联动M26//非主线</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;转载自：B站@&lt;a href=&quot;https://space.bilibili.com/586669368&quot;&gt;棕四火&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="名探偵コナン" scheme="https://yousa.love/categories/%E5%90%8D%E6%8E%A2%E5%81%B5%E3%82%B3%E3%83%8A%E3%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>生成式人工智能服务管理办法</title>
    <link href="https://yousa.love/2023/04/22/%E7%94%9F%E6%88%90%E5%BC%8F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E5%8A%9E%E6%B3%95/"/>
    <id>https://yousa.love/2023/04/22/%E7%94%9F%E6%88%90%E5%BC%8F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E5%8A%9E%E6%B3%95/</id>
    <published>2023-04-22T02:22:22.000Z</published>
    <updated>2023-05-03T04:16:26.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生成式人工智能服务管理办法"><a href="#生成式人工智能服务管理办法" class="headerlink" title="生成式人工智能服务管理办法"></a>生成式人工智能服务管理办法</h2><p>（征求意见稿）</p><span id="more"></span><p><strong>第一条</strong> 为促进生成式人工智能健康发展和规范应用，根据《中华人民共和国网络安全法》《中华人民共和国数据安全法》《中华人民共和国个人信息保护法》等法律、行政法规，制定本办法。</p><p><strong>第二条</strong> 研发、利用生成式人工智能产品，面向中华人民共和国境内公众提供服务的，适用本办法。本办法所称生成式人工智能，是指基于算法、模型、规则生成文本、图片、声音、视频、代码等内容的技术。</p><p><strong>第三条</strong> 国家支持人工智能算法、框架等基础技术的自主创新、推广应用、国际合作，鼓励优先采用安全可信的软件、工具、计算和数据资源。</p><p><strong>第四条</strong> 提供生成式人工智能产品或服务应当遵守法律法规的要求，尊重社会公德、公序良俗，符合以下要求：</p><ul><li><p><strong>（一）利用生成式人工智能生成的内容应当体现社会主义核心价值观</strong>，不得含有颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，暴力、淫秽色情信息，虚假信息，以及可能扰乱经济秩序和社会秩序的内容。</p></li><li><p>（二）在算法设计、训练数据选择、模型生成和优化、提供服务等过程中，采取措施防止出现种族、民族、信仰、国别、地域、性别、年龄、职业等歧视。</p></li><li><p>（三）尊重知识产权、商业道德，不得利用算法、数据、平台等优势实施不公平竞争。</p></li><li><p>（四）利用生成式人工智能生成的内容应当真实准确，采取措施防止生成虚假信息。</p></li><li><p>（五）尊重他人合法利益，防止伤害他人身心健康，损害肖像权、名誉权和个人隐私，侵犯知识产权。禁止非法获取、披露、利用个人信息和隐私、商业秘密。</p></li></ul><p><strong>第五条</strong> 利用生成式人工智能产品提供聊天和文本、图像、声音生成等服务的组织和个人（以下称“提供者”），包括通过提供可编程接口等方式支持他人自行生成文本、图像、声音等，承担该产品生成内容生产者的责任；涉及个人信息的，承担个人信息处理者的法定责任，履行个人信息保护义务。</p><p><strong>第六条</strong> 利用生成式人工智能产品向公众提供服务前，应当按照《具有舆论属性或社会动员能力的互联网信息服务安全评估规定》向国家网信部门申报安全评估，并按照《互联网信息服务算法推荐管理规定》履行算法备案和变更、注销备案手续。</p><p><strong>第七条</strong> 提供者应当对生成式人工智能产品的预训练数据、优化训练数据来源的合法性负责。用于生成式人工智能产品的预训练、优化训练数据，应满足以下要求：</p><ul><li><p>（一）符合《中华人民共和国网络安全法》等法律法规的要求；</p></li><li><p>（二）不含有侵犯知识产权的内容；</p></li><li><p>（三）数据包含个人信息的，应当征得个人信息主体同意或者符合法律、行政法规规定的其他情形；</p></li><li><p>（四）能够保证数据的真实性、准确性、客观性、多样性；</p></li><li><p>（五）国家网信部门关于生成式人工智能服务的其他监管要求。</p></li></ul><p><strong>第八条</strong> 生成式人工智能产品研制中采用人工标注时，提供者应当制定符合本办法要求，清晰、具体、可操作的标注规则，对标注人员进行必要培训，抽样核验标注内容的正确性。</p><p><strong>第九条</strong> 提供生成式人工智能服务应当按照《中华人民共和国网络安全法》规定，要求用户提供真实身份信息。</p><p><strong>第十条</strong> 提供者应当明确并公开其服务的适用人群、场合、用途，采取适当措施防范用户过分依赖或沉迷生成内容。</p><p><strong>第十一条</strong> 提供者在提供服务过程中，对用户的输入信息和使用记录承担保护义务。不得非法留存能够推断出用户身份的输入信息，不得根据用户输入信息和使用情况进行画像，不得向他人提供用户输入信息。法律法规另有规定的，从其规定。</p><p><strong>第十二条</strong> 提供者不得根据用户的种族、国别、性别等进行带有歧视性的内容生成。</p><p><strong>第十三条</strong> 提供者应当建立用户投诉接收处理机制，及时处置个人关于更正、删除、屏蔽其个人信息的请求；发现、知悉生成的文本、图片、声音、视频等侵害他人肖像权、名誉权、个人隐私、商业秘密，或者不符合本办法要求时，应当采取措施，停止生成，防止危害持续。</p><p><strong>第十四条</strong> 提供者应当在生命周期内，提供安全、稳健、持续的服务，保障用户正常使用。</p><p><strong>第十五条</strong> 对于运行中发现、用户举报的不符合本办法要求的生成内容，除采取内容过滤等措施外，应在3个月内通过模型优化训练等方式防止再次生成。</p><p><strong>第十六条</strong> 提供者应当按照《互联网信息服务深度合成管理规定》对生成的图片、视频等内容进行标识。</p><p><strong>第十七条</strong> 提供者应当根据国家网信部门和有关主管部门的要求，提供可以影响用户信任、选择的必要信息，包括预训练和优化训练数据的来源、规模、类型、质量等描述，人工标注规则，人工标注数据的规模和类型，基础算法和技术体系等。</p><p><strong>第十八条</strong> 提供者应当指导用户科学认识和理性使用生成式人工智能生成的内容，不利用生成内容损害他人形象、名誉以及其他合法权益，不进行商业炒作、不正当营销。用户发现生成内容不符合本办法要求时，有权向网信部门或者有关主管部门举报。</p><p><strong>第十九条</strong> 提供者发现用户利用生成式人工智能产品过程中违反法律法规，违背商业道德、社会公德行为时，包括从事网络炒作、恶意发帖跟评、制造垃圾邮件、编写恶意软件，实施不正当的商业营销等，应当暂停或者终止服务。</p><p><strong>第二十条</strong> 提供者违反本办法规定的，由网信部门和有关主管部门按照《中华人民共和国网络安全法》《中华人民共和国数据安全法》《中华人民共和国个人信息保护法》等法律、行政法规的规定予以处罚。法律、行政法规没有规定的，由网信部门和有关主管部门依据职责给予警告、通报批评，责令限期改正；拒不改正或者情节严重的，责令暂停或者终止其利用生成式人工智能提供服务，并处一万元以上十万元以下罚款。构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p><strong>第二十一条</strong> 本办法自2023年 月 日起实施。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;生成式人工智能服务管理办法&quot;&gt;&lt;a href=&quot;#生成式人工智能服务管理办法&quot; class=&quot;headerlink&quot; title=&quot;生成式人工智能服务管理办法&quot;&gt;&lt;/a&gt;生成式人工智能服务管理办法&lt;/h2&gt;&lt;p&gt;（征求意见稿）&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Word文档转Markdown</title>
    <link href="https://yousa.love/2023/04/09/Word%E6%96%87%E6%A1%A3%E8%BD%ACMarkdown/"/>
    <id>https://yousa.love/2023/04/09/Word%E6%96%87%E6%A1%A3%E8%BD%ACMarkdown/</id>
    <published>2023-04-09T02:30:13.000Z</published>
    <updated>2023-04-09T03:16:46.551Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.123pan.com/s/k79SVv-PGzJ.html">下载链接</a></p><span id="more"></span><ol><li><p>安装软件</p></li><li><p>切换到word文件所在目录，打开命令行</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -f docx -t markdown --extract-media ./ -o output.md input.docx</span><br></pre></td></tr></tbody></table></figure><blockquote><p>-f docx：指定源文件为 docx 格式（from）<br>-t markdown：指定我们要转为 md 格式（to）<br>–extract-media ./：将图片文件导出到目录 ./<br>-o output.md：表示输出的文件名为 output.md（output）<br>input.docx：表示要转换的文件为 input.docx</p></blockquote></li><li><p>详细信息请阅读官方文档</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.123pan.com/s/k79SVv-PGzJ.html&quot;&gt;下载链接&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>《云服务在电子游戏领域的应用》</title>
    <link href="https://yousa.love/2023/04/09/%E3%80%8A%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%9C%A8%E7%94%B5%E5%AD%90%E6%B8%B8%E6%88%8F%E9%A2%86%E5%9F%9F%E7%9A%84%E5%BA%94%E7%94%A8%E3%80%8B/"/>
    <id>https://yousa.love/2023/04/09/%E3%80%8A%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%9C%A8%E7%94%B5%E5%AD%90%E6%B8%B8%E6%88%8F%E9%A2%86%E5%9F%9F%E7%9A%84%E5%BA%94%E7%94%A8%E3%80%8B/</id>
    <published>2023-04-09T02:15:36.000Z</published>
    <updated>2023-04-09T02:18:44.340Z</updated>
    
    <content type="html"><![CDATA[<p><strong>云服务在电子游戏领域的应用</strong></p><p><strong>摘要：</strong></p><span id="more"></span><p>​随着互联网的迅速发展以及网络数据传输服务的迅速发展，云服务逐渐被应用在更多的领域以及更大的范围，以云计算为基础的新型游戏模式”云游戏”也逐步走进大众视野。本文主要介绍了云计算和云游戏的概念，阐述云游戏的相应的基础技术以及云游戏平台的运营模式，并对云游戏产业链进行了相应调查。总结了云游戏相比以往传统游戏模式的优势以及云游戏市场的发展状况。</p><p><strong>【关键词】云服务，云计算，云游戏，市场</strong></p><h1 id="云游戏及其基本技术概念"><a href="#云游戏及其基本技术概念" class="headerlink" title="云游戏及其基本技术概念"></a>云游戏及其基本技术概念</h1><h2 id="云服务概念"><a href="#云服务概念" class="headerlink" title="云服务概念"></a>云服务概念</h2><blockquote><p>云服务（cloud service）是基于互联网的相关服务的增加、使用和交互模式，通常涉及通过互联网来提供动态易扩展且经常是虚拟化的资源。云是网络、互联网的一种比喻说法。过去在图中往往用云来表示电信网，后来也用来表示互联网和底层基础设施的抽象。云服务指通过网络以按需、易扩展的方式获得所需服务。这种服务可以是IT和软件、互联网相关，也可是其他服务。它意味着计算能力也可作为一种商品通过互联网进行流通。</p></blockquote><h2 id="云计算概念"><a href="#云计算概念" class="headerlink" title="云计算概念"></a>云计算概念</h2><blockquote><p>云计算（cloud computing）是分布式计算的一种，指的是通过网络”云”将巨大的数据计算处理程序分解成无数个小程序，然后，通过多部服务器组成的系统进行处理和分析这些小程序得到结果并返回给用户。</p></blockquote><h2 id="云游戏概念"><a href="#云游戏概念" class="headerlink" title="云游戏概念"></a>云游戏概念</h2><blockquote><p>云游戏（cloud game）是以云计算为基础的游戏方式，在云游戏的运行模式下，所有游戏都在服务器端运行，并将渲染完毕后的游戏画面压缩后通过网络传送给用户。在客户端，用户的游戏设备不需要任何高端处理器和显卡，只需要基本的视频解压能力就可以了。</p></blockquote><h1 id="云游戏产生原因分析"><a href="#云游戏产生原因分析" class="headerlink" title="云游戏产生原因分析"></a>云游戏产生原因分析</h1><h2 id="大型网络游戏的普及"><a href="#大型网络游戏的普及" class="headerlink" title="大型网络游戏的普及"></a><strong>大型网络游戏的普及</strong></h2><blockquote><p><img src="https://pic.imgdb.cn/item/64321da80d2dde5777bb995b.jpg">近年来，越来越多大型网络游戏出现，同时玩家人数也一直在不断上涨。</p></blockquote><h2 id="硬件性能的限制"><a href="#硬件性能的限制" class="headerlink" title="硬件性能的限制"></a>硬件性能的限制</h2><blockquote><p>一般来说，此类大型网络游戏对于游戏设备的性能都有相对较高的要求，同时游戏的包体也很大（如《原神》3.4版本PC端占用53.1GB，云游戏则只有300多MB）而一般的游戏玩家并不愿意因此承担高昂的硬件费用，所以云游戏便成为了相当一部分的用户选择。</p></blockquote><p><img src="https://pic.imgdb.cn/item/64321dd30d2dde5777bbd706.jpg"></p><p>上图为<code>原神</code>Windows端完整包体</p><p><img src="https://pic.imgdb.cn/item/64321de10d2dde5777bbe7a6.jpg"></p><p>上图为<code>原神</code>云游戏包体</p><h1 id="云游戏相关基础技术"><a href="#云游戏相关基础技术" class="headerlink" title="云游戏相关基础技术"></a>云游戏相关基础技术</h1><h2 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h2><blockquote><p>虚拟化技术（Virtualization Technology）和多任务（Multitasking）、超线程技术（Hyper-Threading）是完全不同的。多任务是指在一个操作系统中多个程序同时并行运行，而在虚拟化技术中，你可以拥有多个独立的操作系统同时运行，每一个操作系统中都有多个程序运行，每一个操作系统都运行在一个虚拟的CPU或虚拟主机（虚拟机）上。而Hyper-Threading超线程只是在SMP系统（Symmetric Multi Processing）中单CPU模拟双CPU来平衡程序运行性能，这两个模拟出来的CPU是不能分离的，只能协同工作。如果一个CPU同时支持Hyper-Threading和虚拟化技术的话，每一个虚拟CPU在各自的操作系统中都被看成是两个对称多任务处理的CPU。</p><p>虚拟化技术使得游戏厂商并不用将游戏进行很大的改动便可以移植到云游戏平台上同时让玩家获得原汁原味的游戏体验。虚拟化技术是云计算对实现计算资源和存储资源充分高效利用的关键。这项技术可以将对象的操作系统、计算机系统、存储设备和网络资源等进行虚拟化并生成--个虚拟版本,使得用户可以用与访问抽象前资源--致的方法访问抽象后的资源。从而隐藏属性和操作之间的差异并允许通过一种通用的方式来查看和维护资源，将应用程序以及数据，在不同的层次以不同的面貌加以展现,进而使不同层次的使用者、开发者及维持人员能够方便的使用，开发，维护和管理程序。</p></blockquote><h2 id="远程渲染映射（Remote-Rendering-Mapping）技术"><a href="#远程渲染映射（Remote-Rendering-Mapping）技术" class="headerlink" title="远程渲染映射（Remote Rendering Mapping）技术"></a>远程渲染映射（Remote Rendering Mapping）技术</h2><blockquote><p>基本原理是用户在客户端发出各种游戏的指令和控制信号，由网络传送到云游戏的云端服务器平台，云端服务器运用其强大的处理器和显卡对游戏画面进行渲染并对游戏涉及到的数据进行运算。最后将渲染完毕的游戏画面形成视频流并压缩（一般基于H.264或H.265编码）通过高速网络传送至客户端解压呈现在终端显示部件上。是云游戏的核心技术。</p></blockquote><p>a.  指令流的实现框架<img src="https://pic.imgdb.cn/item/64321e370d2dde5777bc4481.jpg"></p><p>b.  音视频流的实现框架<img src="https://pic.imgdb.cn/item/64321e490d2dde5777bc580f.jpg"></p><p>c.  云游戏完整框架</p><p><img src="https://pic.imgdb.cn/item/64321e640d2dde5777bc77d5.jpg"></p><h1 id="云游戏运营模式"><a href="#云游戏运营模式" class="headerlink" title="云游戏运营模式"></a>云游戏运营模式</h1><blockquote><p>云游戏运维主要包含边缘节点管理，游戏管理，游戏自动更新，账户管理，游戏安全管理，服务器通信等工作。云游戏需要维护大量的边缘计算节点，大量的游戏，而且游戏一般都比较大且更新频繁，需要及时处理游戏自动更新分发同步等问题。</p></blockquote><h2 id="边缘计算节点管理"><a href="#边缘计算节点管理" class="headerlink" title="边缘计算节点管理"></a>边缘计算节点管理</h2><blockquote><p>云游戏服务的云端是服务器集群，为了保证低延时，一般会在不同地域设置多个服务器集群，要同时维护这些节点是云游戏运营重要的一环。</p></blockquote><h1 id="云游戏相对于传统游戏的优势和劣势"><a href="#云游戏相对于传统游戏的优势和劣势" class="headerlink" title="云游戏相对于传统游戏的优势和劣势"></a>云游戏相对于传统游戏的优势和劣势</h1><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><blockquote><ol><li><p>云游戏不需要安装，可以快速进行游戏的访问。</p></li><li><p>云游戏的画质一般都高于终端设备。</p></li><li><p>云游戏的处理主要在服务器上进行，因此，云游戏对终端设备的要求比较低。</p></li><li><p>云游戏的游戏版本升级，全部都在服务器上进行，终端只需要更新云服务平台版本，因此游戏的版本升级，非常方便，终端无感知，每次都可以玩最新的游戏版本。</p></li></ol></blockquote><h2 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h2><blockquote><ol><li><p>云游戏对网络传输带宽要求很高，在网络传输带宽限制下，一些高清晰度的游戏在特定的网络环境下是无法基于云游戏实现的。</p></li><li><p>云游戏对网络的时延要求也比较高，在无线网络中传输的时候，如采用4G，5G网络来传输时，容易在一些区域造成卡顿，影响玩家的体验。</p></li></ol></blockquote><h1 id="云游戏产业链"><a href="#云游戏产业链" class="headerlink" title="云游戏产业链"></a>云游戏产业链</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>云游戏产业链可以分为上游的游戏研发、中游的游戏运营云服务、下游的游戏终端。而中游的游戏运营云服务包含游戏云平台、云服务商及通信运营商三个主体。</p></blockquote><h2 id="游戏研发商"><a href="#游戏研发商" class="headerlink" title="游戏研发商"></a>游戏研发商</h2><blockquote><p>研发、制作游戏产品，提供内容。在云游戏时代，游戏体验跨越设备限制，用户对于游戏品质的要求预计越来越高，预计游戏品类更加重度化，龙头游戏研发商的优势有望扩大。</p></blockquote><h2 id="云游戏平台"><a href="#云游戏平台" class="headerlink" title="云游戏平台"></a>云游戏平台</h2><blockquote><p>负责云游戏运营，基于云化技术，负责游戏指令流和视频流的编解码，将游戏内容和IaaS （Infrastructure as a Service，基础设施即服务）有云对接。分为 PC云游戏平台和移动云游戏平台两大赛道，大量初创公司在 2012-2015年切入此领域，通过提过游戏运营的云化服务，产生订阅收入。巨头如华为、腾讯2019年通过合作和推出自有平台的方式切入该领域。预计订阅收入将成为云游戏平台的主要收入来源，也将成为云游戏时代除了游戏内道具付费之外的重要变现方式。</p></blockquote><h2 id="云服务商"><a href="#云服务商" class="headerlink" title="云服务商"></a>云服务商</h2><blockquote><p>具备IDC（Internet Data Center，互联网数据中心）提供算力和存储服务，主要为 IaaS公有云平台，包括阿里云、腾讯云、华为云、百度云等。游戏只是其云计算服务的一个领域。</p></blockquote><h2 id="通信运营商"><a href="#通信运营商" class="headerlink" title="通信运营商"></a>通信运营商</h2><blockquote><p>高速稳定的网络是游戏数据传输和游戏画面流畅的先决条件。运营商的 5G网络具备高下载速度、低延迟等优势，成为用户终端-云平台数据传输的重要通道。同时，运营商在推广5G套餐时，云游戏可能成为重要的内容抓手，因此运营商在云游戏领域或将拥有用户入口优势，成为重要的分发平台。</p></blockquote><h2 id="设备提供商"><a href="#设备提供商" class="headerlink" title="设备提供商"></a>设备提供商</h2><blockquote><p>由于云游戏将游戏的运行放在云端，终端设备只需有游戏画面呈现功能即可，用户存量的智能手机、平板电脑、PC、智能电视以及集成游戏内容的智能机顶盒等都可成为云游戏的终端。因为云游戏对终端设备较低的要求，设备提供商在云游戏产业链中处于相对弱势地位。</p></blockquote><h1 id="云游戏未来发展趋势"><a href="#云游戏未来发展趋势" class="headerlink" title="云游戏未来发展趋势"></a>云游戏未来发展趋势</h1><h2 id="游戏研发商-1"><a href="#游戏研发商-1" class="headerlink" title="游戏研发商"></a>游戏研发商</h2><blockquote><p>游戏重度化趋势加剧，头部研发商市场份额将进一步提升。</p></blockquote><h2 id="游戏云平台"><a href="#游戏云平台" class="headerlink" title="游戏云平台"></a>游戏云平台</h2><blockquote><p>由初创公司百花齐放，到初创公司与新入局的巨头加强合作，最终具备 IaaS资源的云计算巨头和拥有用户、流量优势的企业有望主导产业链该环节。云游戏产业链中，由于游戏云平台这一环节的出现，订阅云服务有望成为游戏行业继付费下载、游戏内付费（主要为道具付费）之后又一主流变现模式。订阅服务收入在游戏收入中的占比有望不断提升，云游戏带来用户对硬件需求的降低将转移对订阅云服务需求的提升。</p></blockquote><h2 id="通信运营商-1"><a href="#通信运营商-1" class="headerlink" title="通信运营商"></a>通信运营商</h2><blockquote><p>云游戏时代，由于游戏即点即玩、无需下载，应用商店等渠道作用将弱化，但云游戏作为5G重要应用领域，通信运营商基于5G 网络入口优势，较过去 4G时代有望更多切入游戏云平台运营、甚至研发环节。在 4G时代，三大通信运营商更多承担数据传输通道的作用，数据业务收入取得大幅增长。而随着5G来临，四大运营商将不甘于仅仅起到数据通道作用，而是纷纷通过自身加大资金投入以及外部合作的方式，力图深度参与5G应用。尤其是在5G推广的初期，将流量与内容绑定、通过内容来吸引用户订购5G套餐，或将成为运营商的重要营销方式。云游戏是5G娱乐应用领域比超高清视频、VR/AR更早爆发和更成熟的应用，通信运营商或将基于自身海量用户，通过与游戏内容方、硬件终端合作的方式，切入游戏云平台运营、甚至研发领域。</p></blockquote><h1 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h1><blockquote><p>《2020-2026年中国云游戏行业市场研究分析及未来前景展望报告》数据显示：随着5G网络的正式商用，让云游戏再次成为了行业风口。据调查数据显示，2020年中国云游戏用户达到 2.47 亿人，同比增长 114.8%，并在 2023 年增至6.58亿;云游戏市场在 2020 年将达到 68 亿元，并在 2023 年增至 986 亿元</p><p>如大家所见，云游戏必将成为云计算中的相当重要的应用，随着广电技术的推广和网络的改善，云游戏的时代已经接近。在未来，云游戏一定会为我们的生活创造更多的精彩!</p></blockquote><p>参考文献：</p><ol><li><p><a href="https://baike.baidu.com/item/%E4%BA%91%E6%9C%8D%E5%8A%A1/7843499?fr=aladdin">百度百科：云服务</a>[引用日期：2023年1月30日]</p></li><li><p><a href="https://baike.baidu.com/item/%E4%BA%91%E8%AE%A1%E7%AE%97/9969353?fromModule=lemma-qiyi_sense-lemma">百度百科：云计算</a>[引用日期：2023年1月30日]</p></li><li><p><a href="https://baike.baidu.com/item/%E4%BA%91%E6%B8%B8%E6%88%8F/1404089?fr=aladdin">百度百科：云服务</a>[引用日期：2023年1月30日]</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;云服务在电子游戏领域的应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
